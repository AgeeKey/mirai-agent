"""
Emergency System –¥–ª—è Mirai Trading API
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
"""
from fastapi import APIRouter, HTTPException, BackgroundTasks
from fastapi.responses import PlainTextResponse
import logging
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_DIR = '/root/mirai-agent/logs'
LOG_FILE = os.path.join(LOG_DIR, 'emergency.log')

os.makedirs(LOG_DIR, exist_ok=True)

emergency_logger = logging.getLogger("emergency")
emergency_logger.setLevel(logging.CRITICAL)
handler = logging.FileHandler(LOG_FILE)
formatter = logging.Formatter('%(asctime)s - EMERGENCY - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
if not emergency_logger.handlers:
    emergency_logger.addHandler(handler)

router = APIRouter(prefix="/emergency", tags=["Emergency"])

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
EMERGENCY_STATE = {
    "trading_stopped": False,
    "last_stop_time": None,
    "stop_reason": None,
    "stopped_by": None,
    "active_positions_closed": False
}

class EmergencyStopManager:
    def __init__(self):
        self.is_stopped = False
        self.stop_time = None
        self.notifications_sent = False
        
    async def execute_emergency_stop(self, reason: str = "Manual", user: str = "System"):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        try:
            emergency_logger.critical(f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ò–ù–ò–¶–ò–ò–†–û–í–ê–ù–ê: {reason} by {user}")
            
            # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            await self.stop_trading_signals()
            
            # 2. –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            await self.close_all_positions()
            
            # 3. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI Orchestrator
            await self.stop_ai_orchestrator()
            
            # 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await self.send_emergency_notifications(reason, user)
            
            # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            EMERGENCY_STATE.update({
                "trading_stopped": True,
                "last_stop_time": datetime.now().isoformat(),
                "stop_reason": reason,
                "stopped_by": user,
                "active_positions_closed": True
            })
            
            self.is_stopped = True
            self.stop_time = datetime.now()
            
            emergency_logger.critical("‚úÖ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            
            return {
                "status": "success",
                "message": "Emergency stop executed successfully",
                "timestamp": datetime.now().isoformat(),
                "reason": reason,
                "stopped_by": user
            }
            
        except Exception as e:
            emergency_logger.critical(f"‚ùå –û–®–ò–ë–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ô –û–°–¢–ê–ù–û–í–ö–ò: {str(e)}")
            raise HTTPException(status_code=500, detail=f"Emergency stop failed: {str(e)}")
    
    async def stop_trading_signals(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            import httpx
            async with httpx.AsyncClient() as client:
                response = await client.post("http://localhost:8080/emergency/pause")
                
            emergency_logger.critical("üõë –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            emergency_logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    async def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ Binance API
            emergency_logger.critical("üí∞ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
            return True
        except Exception as e:
            emergency_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
            return False
    
    async def stop_ai_orchestrator(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI Orchestrator"""
        try:
            import httpx
            async with httpx.AsyncClient() as client:
                response = await client.post("http://localhost:8080/emergency/stop")
                
            emergency_logger.critical("ü§ñ AI Orchestrator –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            emergency_logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AI: {e}")
    
    async def send_emergency_notifications(self, reason: str, user: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        try:
            message = f"""
üö® *–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –¢–û–†–ì–û–í–õ–ò*

‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}
üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {user}
üìù –ü—Ä–∏—á–∏–Ω–∞: {reason}

‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã
‚úÖ AI –æ—Ç–∫–ª—é—á–µ–Ω

üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
            """
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_CHAT_ID')
            if bot_token and chat_id:
                import httpx
                api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
                payload = {
                    "chat_id": chat_id,
                    "text": message,
                    "parse_mode": "Markdown"
                }
                try:
                    async with httpx.AsyncClient() as client:
                        await client.post(api_url, json=payload, timeout=10)
                except Exception as te:
                    emergency_logger.error(f"–û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {te}")

            emergency_logger.critical("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            emergency_logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
emergency_manager = EmergencyStopManager()

@router.post("/stop")
async def emergency_stop(
    background_tasks: BackgroundTasks,
    reason: Optional[str] = "Manual emergency stop",
    user: Optional[str] = "API User"
):
    """üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´"""
    
    if EMERGENCY_STATE["trading_stopped"]:
        return {
            "status": "already_stopped",
            "message": "Trading is already stopped",
            "last_stop_time": EMERGENCY_STATE["last_stop_time"],
            "stopped_by": EMERGENCY_STATE["stopped_by"]
        }
    
    background_tasks.add_task(emergency_manager.execute_emergency_stop, reason, user)
    
    return {
        "status": "initiated",
        "message": "Emergency stop initiated",
        "timestamp": datetime.now().isoformat(),
        "estimated_completion": "30 seconds"
    }

@router.get("/status")
async def emergency_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    return {
        "emergency_state": EMERGENCY_STATE,
        "system_status": {
            "trading_active": not EMERGENCY_STATE["trading_stopped"],
            "ai_active": not EMERGENCY_STATE["trading_stopped"],
            "positions_status": "closed" if EMERGENCY_STATE["active_positions_closed"] else "active",
            "last_check": datetime.now().isoformat()
        }
    }

@router.post("/reset")
async def reset_emergency_state(
    confirmation: str,
    user: Optional[str] = "API User"
):
    """üîÑ –°–ë–†–û–° –°–û–°–¢–û–Ø–ù–ò–Ø –≠–ö–°–¢–†–ï–ù–ù–û–ô –û–°–¢–ê–ù–û–í–ö–ò"""
    
    if confirmation != "CONFIRM_RESET":
        raise HTTPException(
            status_code=400, 
            detail="Invalid confirmation. Use 'CONFIRM_RESET' to proceed."
        )
    
    if not EMERGENCY_STATE["trading_stopped"]:
        return {
            "status": "not_needed",
            "message": "Emergency stop is not active"
        }
    
    EMERGENCY_STATE.update({
        "trading_stopped": False,
        "last_stop_time": None,
        "stop_reason": None,
        "stopped_by": None,
        "active_positions_closed": False
    })
    
    emergency_logger.critical(f"üîÑ –≠–ö–°–¢–†–ï–ù–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ë–†–û–®–ï–ù–û: {user}")
    
    return {
        "status": "reset",
        "message": "Emergency state reset. Trading can resume.",
        "reset_by": user,
        "timestamp": datetime.now().isoformat()
    }

@router.get("/logs")
async def get_emergency_logs(lines: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        lines = max(1, min(lines, 500))
        if not os.path.exists(LOG_FILE):
            return {"logs": []}
        with open(LOG_FILE, 'r') as f:
            content = f.readlines()
        return {"logs": [line.rstrip('\n') for line in content[-lines:]]}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/test")
async def test_emergency_system():
    """üß™ –¢–ï–°–¢ –≠–ö–°–¢–†–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´"""
    try:
        test_results = {
            "timestamp": datetime.now().isoformat(),
            "tests": {}
        }
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            emergency_logger.info("üß™ TEST: Emergency logging system")
            test_results["tests"]["logging"] = "‚úÖ OK"
        except Exception as e:
            test_results["tests"]["logging"] = f"‚ùå FAIL: {str(e)}"
        
        # –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        try:
            log_dir = '/root/mirai-agent/logs'
            if os.path.exists(log_dir) and os.access(log_dir, os.W_OK):
                test_results["tests"]["filesystem"] = "‚úÖ OK"
            else:
                test_results["tests"]["filesystem"] = "‚ùå FAIL: Log directory not writable"
        except Exception as e:
            test_results["tests"]["filesystem"] = f"‚ùå FAIL: {str(e)}"
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        failed_tests = [k for k, v in test_results["tests"].items() if "‚ùå" in v]
        test_results["overall"] = "‚úÖ ALL TESTS PASSED" if not failed_tests else f"‚ùå {len(failed_tests)} TESTS FAILED"
        
        emergency_logger.info(f"üß™ Emergency system test completed: {test_results['overall']}")
        
        return test_results
        
    except Exception as e:
        emergency_logger.error(f"üß™ Emergency system test failed: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Test failed: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è middleware - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async def emergency_middleware_func(request, call_next):
    """Middleware –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º emergency endpoints
    if request.url.path.startswith("/emergency"):
        response = await call_next(request)
        return response
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö endpoints
    if EMERGENCY_STATE["trading_stopped"] and any(
        path in request.url.path for path in ["/trade", "/order", "/position"]
    ):
        return PlainTextResponse(
            content=json.dumps({
                "error": "Trading is suspended due to emergency stop",
                "emergency_state": EMERGENCY_STATE,
                "message": "Use /emergency/reset to resume trading"
            }),
            status_code=503,
            media_type="application/json"
        )
    
    response = await call_next(request)
    return response
