name: 🛡️ Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # ============================================================================
  # CODEQL SECURITY ANALYSIS
  # ============================================================================
  codeql:
    name: 🔍 CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,quality
        config-file: ./.github/codeql/codeql-config.yml

    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: 📊 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # ============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ============================================================================
  dependency-scan:
    name: 🔒 Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry safety pip-audit

    - name: 🔍 Poetry dependency check
      run: |
        poetry check
        poetry install --no-dev

    - name: 🛡️ Safety vulnerability scan
      run: |
        poetry run safety check --json --output safety-report.json
        poetry run safety check

    - name: 🔍 Pip-audit scan
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit

    - name: 📤 Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  # ============================================================================
  # CONTAINER SECURITY SCANNING
  # ============================================================================
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🏗️ Build Docker image
      run: |
        docker build -t mirai-agent:security-scan .

    - name: 🔐 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'mirai-agent:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 🔍 Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'mirai-agent:security-scan'
        output-format: sarif
        output-file: grype-results.sarif

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 📤 Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'grype-results.sarif'

  # ============================================================================
  # SECRET SCANNING
  # ============================================================================
  secret-scan:
    name: 🔑 Secret Scanning
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔍 Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: 🔐 Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # INFRASTRUCTURE SECURITY SCANNING
  # ============================================================================
  infrastructure-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose,yaml,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: 📤 Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'checkov-results.sarif'

    - name: 🔍 Scan Kubernetes configs
      run: |
        if [ -d "k8s" ] || [ -d "kubernetes" ]; then
          docker run --rm -v $(pwd):/workspace \
            aquasec/kube-bench:latest \
            run --targets node,policies,managedservices
        else
          echo "No Kubernetes configurations found"
        fi

  # ============================================================================
  # NETWORK SECURITY SCANNING
  # ============================================================================
  network-scan:
    name: 🌐 Network Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🚀 Start services for scanning
      run: |
        docker-compose -f docker-compose.production.yml up -d
        sleep 30  # Wait for services to start

    - name: 🔍 Run nmap port scan
      run: |
        sudo apt-get update && sudo apt-get install -y nmap
        nmap -sS -O localhost > nmap-scan.txt
        cat nmap-scan.txt

    - name: 🔐 SSL/TLS configuration check
      run: |
        # Check SSL configuration if HTTPS is enabled
        if docker-compose -f docker-compose.production.yml exec -T nginx nginx -T | grep -q ssl; then
          docker run --rm --network host \
            drwetter/testssl.sh:latest \
            --jsonfile ssl-report.json \
            localhost:443 || true
        fi

    - name: 🛑 Stop services
      run: |
        docker-compose -f docker-compose.production.yml down

    - name: 📤 Upload network scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: network-scan-results
        path: |
          nmap-scan.txt
          ssl-report.json

  # ============================================================================
  # COMPLIANCE SCANNING
  # ============================================================================
  compliance-scan:
    name: 📋 Compliance Scanning
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Run Open Policy Agent
      run: |
        # Install OPA
        curl -L -o opa https://openpolicyagent.org/downloads/v0.58.0/opa_linux_amd64_static
        chmod 755 ./opa
        
        # Create basic security policy
        cat > security.rego << 'EOF'
        package docker.security
        
        deny[msg] {
          input.Config.User == "root"
          msg := "Container runs as root user"
        }
        
        deny[msg] {
          input.Config.Env[_] == "DEBUG=true"
          msg := "Debug mode enabled in production"
        }
        EOF
        
        # Test Docker image against policy
        docker build -t mirai-agent:compliance .
        docker inspect mirai-agent:compliance | ./opa eval -d security.rego -I "data.docker.security.deny[x]"

    - name: 📊 Generate compliance report
      run: |
        cat > compliance-report.md << 'EOF'
        # Security Compliance Report
        
        ## Scanned Components
        - [x] Source code (CodeQL)
        - [x] Dependencies (Safety, pip-audit)
        - [x] Container images (Trivy, Grype)
        - [x] Infrastructure (Checkov)
        - [x] Secrets (TruffleHog, GitLeaks)
        - [x] Network security (nmap)
        - [x] Policy compliance (OPA)
        
        ## Compliance Standards
        - OWASP Top 10
        - CIS Docker Benchmark
        - NIST Cybersecurity Framework
        
        Generated: $(date)
        EOF

    - name: 📤 Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md

  # ============================================================================
  # SECURITY NOTIFICATION
  # ============================================================================
  notify-security-results:
    name: 📢 Security Notification
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, container-scan, secret-scan, infrastructure-scan]
    if: always()

    steps:
    - name: 📊 Collect security scan results
      run: |
        echo "Security scan summary:"
        echo "- CodeQL: ${{ needs.codeql.result }}"
        echo "- Dependency scan: ${{ needs.dependency-scan.result }}"
        echo "- Container scan: ${{ needs.container-scan.result }}"
        echo "- Secret scan: ${{ needs.secret-scan.result }}"
        echo "- Infrastructure scan: ${{ needs.infrastructure-scan.result }}"

    - name: 🚨 Notify on security issues
      if: contains(needs.*.result, 'failure')
      run: |
        echo "🚨 Security issues detected! Check the workflow results."
        # Add notification logic here (Slack, email, etc.)

    - name: ✅ Notify on successful scan
      if: ${{ !contains(needs.*.result, 'failure') }}
      run: |
        echo "✅ All security scans passed successfully!"
        # Add success notification logic here