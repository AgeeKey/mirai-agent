#!/bin/bash

# Mirai Log Analysis Script
# –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º

set -e

echo "üìä –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ Mirai Ecosystem"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
analyze_system_logs() {
    log "üîç –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤..."
    
    local report_file="/root/mirai-agent/reports/log_analysis_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "=== –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–ù–´–• –õ–û–ì–û–í ===" > "$report_file"
    echo "–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: $(date)" >> "$report_file"
    echo "" >> "$report_file"
    
    # –û—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    echo "--- –°–ò–°–¢–ï–ú–ù–´–ï –û–®–ò–ë–ö–ò (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å) ---" >> "$report_file"
    journalctl --since "1 hour ago" --priority=err | tail -20 >> "$report_file"
    echo "" >> "$report_file"
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    echo "--- –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å) ---" >> "$report_file"
    journalctl --since "1 hour ago" --priority=warning | tail -20 >> "$report_file"
    echo "" >> "$report_file"
    
    log "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
}

# –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
analyze_application_logs() {
    log "üì± –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π..."
    
    local report_file="/root/mirai-agent/reports/log_analysis_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "--- –õ–û–ì–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–ô ---" >> "$report_file"
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ API
    if [ -f "/root/mirai-agent/logs/api.log" ]; then
        echo "API –û—à–∏–±–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):" >> "$report_file"
        grep -i "error\|exception\|failed" /root/mirai-agent/logs/api.log | tail -10 >> "$report_file"
        echo "" >> "$report_file"
    fi
    
    # –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
    if [ -f "/root/mirai-agent/logs/autonomous.log" ]; then
        echo "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –æ—à–∏–±–∫–∏:" >> "$report_file"
        grep -i "error\|failed" /root/mirai-agent/logs/autonomous.log | tail -10 >> "$report_file"
        echo "" >> "$report_file"
    fi
    
    # Docker –ª–æ–≥–∏
    echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –æ—à–∏–±–∫–∞–º–∏:" >> "$report_file"
    for container in $(docker ps --format "{{.Names}}"); do
        local errors=$(docker logs "$container" --since="1h" 2>&1 | grep -i "error\|exception\|failed" | wc -l)
        if [ $errors -gt 0 ]; then
            echo "$container: $errors –æ—à–∏–±–æ–∫" >> "$report_file"
            docker logs "$container" --since="1h" 2>&1 | grep -i "error\|exception\|failed" | tail -5 >> "$report_file"
            echo "" >> "$report_file"
        fi
    done
    
    log "‚úÖ –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
}

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
analyze_performance() {
    log "‚ö° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    local report_file="/root/mirai-agent/reports/log_analysis_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "--- –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ---" >> "$report_file"
    
    # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ nginx
    if [ -f "/var/log/nginx/access.log" ]; then
        echo "–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (>2 —Å–µ–∫):" >> "$report_file"
        awk '$NF > 2.0 {print $0}' /var/log/nginx/access.log | tail -10 >> "$report_file"
        echo "" >> "$report_file"
    fi
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    echo "–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:" >> "$report_file"
    echo "CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')" >> "$report_file"
    echo "Memory: $(free | awk 'FNR==2{printf "%.1f%%", $3/($3+$4)*100}')" >> "$report_file"
    echo "Disk: $(df / | awk 'NR==2 {print $5}')" >> "$report_file"
    echo "Load: $(uptime | awk -F'load average:' '{print $2}')" >> "$report_file"
    echo "" >> "$report_file"
    
    log "‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
analyze_security() {
    log "üîí –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏..."
    
    local report_file="/root/mirai-agent/reports/log_analysis_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "--- –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ---" >> "$report_file"
    
    # –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
    echo "–ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ SSH (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞):" >> "$report_file"
    grep "Failed password" /var/log/auth.log | tail -10 >> "$report_file"
    echo "" >> "$report_file"
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    echo "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:" >> "$report_file"
    netstat -tnp | grep ESTABLISHED | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head -10 >> "$report_file"
    echo "" >> "$report_file"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
    echo "–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:" >> "$report_file"
    netstat -tlnp | grep LISTEN >> "$report_file"
    echo "" >> "$report_file"
    
    log "‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏
create_summary() {
    log "üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏–∑–∞..."
    
    local report_file="/root/mirai-agent/reports/log_analysis_$(date +%Y%m%d_%H%M%S).txt"
    local summary_file="/root/mirai-agent/reports/log_summary_$(date +%Y%m%d).json"
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    local system_errors=$(journalctl --since "1 hour ago" --priority=err | wc -l)
    local system_warnings=$(journalctl --since "1 hour ago" --priority=warning | wc -l)
    local failed_logins=$(grep "Failed password" /var/log/auth.log | wc -l)
    local docker_errors=0
    
    for container in $(docker ps --format "{{.Names}}"); do
        local errors=$(docker logs "$container" --since="1h" 2>&1 | grep -i "error\|exception\|failed" | wc -l)
        docker_errors=$((docker_errors + errors))
    done
    
    # –°–æ–∑–¥–∞–µ–º JSON —Å–≤–æ–¥–∫—É
    cat > "$summary_file" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "analysis_period": "1 hour",
    "summary": {
        "system_errors": $system_errors,
        "system_warnings": $system_warnings,
        "failed_logins": $failed_logins,
        "docker_errors": $docker_errors,
        "total_issues": $((system_errors + system_warnings + failed_logins + docker_errors))
    },
    "recommendations": [
EOF

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    local has_recommendations=false
    
    if [ $system_errors -gt 5 ]; then
        echo '        "–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞"' >> "$summary_file"
        has_recommendations=true
    fi
    
    if [ $failed_logins -gt 10 ]; then
        if [ "$has_recommendations" = true ]; then
            echo ',' >> "$summary_file"
        fi
        echo '        "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"' >> "$summary_file"
        has_recommendations=true
    fi
    
    if [ $docker_errors -gt 0 ]; then
        if [ "$has_recommendations" = true ]; then
            echo ',' >> "$summary_file"
        fi
        echo '        "–û—à–∏–±–∫–∏ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"' >> "$summary_file"
        has_recommendations=true
    fi
    
    if [ "$has_recommendations" = false ]; then
        echo '        "–°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"' >> "$summary_file"
    fi
    
    echo '    ]' >> "$summary_file"
    echo '}' >> "$summary_file"
    
    echo "" >> "$report_file"
    echo "--- –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê ---" >> "$report_file"
    echo "–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏: $system_errors" >> "$report_file"
    echo "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: $system_warnings" >> "$report_file"
    echo "–ù–µ—É–¥–∞—á–Ω—ã–µ –≤—Ö–æ–¥—ã: $failed_logins" >> "$report_file"
    echo "–û—à–∏–±–∫–∏ Docker: $docker_errors" >> "$report_file"
    echo "–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: $((system_errors + system_warnings + failed_logins + docker_errors))" >> "$report_file"
    
    log "‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: $summary_file"
    log "üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: $report_file"
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
send_alerts() {
    local summary_file="/root/mirai-agent/reports/log_summary_$(date +%Y%m%d).json"
    
    if [ -f "$summary_file" ]; then
        local total_issues=$(cat "$summary_file" | grep -o '"total_issues": [0-9]*' | grep -o '[0-9]*')
        
        if [ $total_issues -gt 20 ]; then
            log "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $total_issues –ø—Ä–æ–±–ª–µ–º!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –≤ API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            curl -s -X POST http://localhost:8001/api/alerts \
                -H "Content-Type: application/json" \
                -d "{\"level\": \"critical\", \"message\": \"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $total_issues –ø—Ä–æ–±–ª–µ–º –≤ –ª–æ–≥–∞—Ö\", \"source\": \"log_analysis\"}" || true
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mkdir -p /root/mirai-agent/reports
    
    analyze_system_logs
    analyze_application_logs
    analyze_performance
    analyze_security
    create_summary
    send_alerts
    
    log "üéâ –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# –ó–∞–ø—É—Å–∫
main