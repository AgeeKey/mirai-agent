"""
Mirai Agent - –í–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤
"""
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, JSONResponse
import asyncio
import httpx
from datetime import datetime
from typing import Dict, List

app = FastAPI(title="Mirai Alert Dashboard", description="–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏")

@app.get("/", response_class=HTMLResponse)
async def alert_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–Ω–µ–ª–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Mirai Agent - Alert Dashboard</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
                color: white;
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1600px;
                margin: 0 auto;
            }
            
            .header {
                text-align: center;
                margin-bottom: 30px;
                padding: 20px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 12px;
                backdrop-filter: blur(10px);
            }
            
            .header h1 {
                font-size: 2.5em;
                margin-bottom: 10px;
                text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
            }
            
            .controls {
                display: flex;
                justify-content: center;
                gap: 15px;
                margin-bottom: 30px;
                flex-wrap: wrap;
            }
            
            .btn {
                background: rgba(255, 255, 255, 0.2);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 1em;
                transition: all 0.3s ease;
                border: 1px solid rgba(255, 255, 255, 0.3);
            }
            
            .btn:hover {
                background: rgba(255, 255, 255, 0.3);
                transform: translateY(-2px);
            }
            
            .btn-danger { background: rgba(231, 76, 60, 0.8); }
            .btn-warning { background: rgba(243, 156, 18, 0.8); }
            .btn-success { background: rgba(46, 204, 113, 0.8); }
            .btn-info { background: rgba(52, 152, 219, 0.8); }
            
            .dashboard-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin-bottom: 30px;
            }
            
            @media (max-width: 1024px) {
                .dashboard-grid {
                    grid-template-columns: 1fr;
                }
            }
            
            .alert-panel {
                background: rgba(255, 255, 255, 0.15);
                border-radius: 12px;
                padding: 20px;
                backdrop-filter: blur(10px);
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .alert-panel h3 {
                font-size: 1.4em;
                margin-bottom: 20px;
                color: #f1c40f;
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .alert-item {
                background: rgba(0, 0, 0, 0.3);
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 15px;
                border-left: 4px solid;
                transition: transform 0.2s ease;
            }
            
            .alert-item:hover {
                transform: translateX(5px);
            }
            
            .alert-item.critical { border-left-color: #e74c3c; }
            .alert-item.warning { border-left-color: #f39c12; }
            .alert-item.info { border-left-color: #3498db; }
            .alert-item.emergency { border-left-color: #8e44ad; animation: pulse 1.5s infinite; }
            
            .alert-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 10px;
            }
            
            .alert-title {
                font-weight: bold;
                font-size: 1.1em;
            }
            
            .alert-time {
                font-size: 0.9em;
                opacity: 0.8;
            }
            
            .alert-message {
                font-size: 0.95em;
                opacity: 0.9;
                line-height: 1.4;
            }
            
            .alert-meta {
                margin-top: 10px;
                font-size: 0.85em;
                opacity: 0.7;
                display: flex;
                gap: 15px;
                flex-wrap: wrap;
            }
            
            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                margin-bottom: 30px;
            }
            
            .stat-card {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 8px;
                padding: 15px;
                text-align: center;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .stat-value {
                font-size: 2em;
                font-weight: bold;
                margin-bottom: 5px;
            }
            
            .stat-label {
                font-size: 0.9em;
                opacity: 0.8;
            }
            
            .rules-list {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
            }
            
            .rule-card {
                background: rgba(0, 0, 0, 0.2);
                border-radius: 8px;
                padding: 15px;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .rule-name {
                font-weight: bold;
                margin-bottom: 10px;
                font-size: 1.1em;
            }
            
            .rule-details {
                font-size: 0.9em;
                opacity: 0.8;
                line-height: 1.4;
            }
            
            .status-online { color: #2ecc71; }
            .status-offline { color: #e74c3c; }
            
            .no-alerts {
                text-align: center;
                padding: 40px;
                font-size: 1.1em;
                opacity: 0.7;
            }
            
            .update-info {
                text-align: center;
                margin-top: 20px;
                padding: 15px;
                background: rgba(0, 0, 0, 0.2);
                border-radius: 8px;
                font-size: 0.9em;
                opacity: 0.8;
            }
            
            @keyframes pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.7; }
            }
            
            .loading {
                animation: pulse 1.5s infinite;
            }
            
            .modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
            }
            
            .modal-content {
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                margin: 15% auto;
                padding: 20px;
                border-radius: 12px;
                width: 80%;
                max-width: 500px;
                color: white;
            }
            
            .close {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
            }
            
            .close:hover {
                color: white;
            }
            
            .form-group {
                margin-bottom: 15px;
            }
            
            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }
            
            .form-group input,
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 10px;
                border: none;
                border-radius: 4px;
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border: 1px solid rgba(255, 255, 255, 0.3);
            }
            
            .form-group input::placeholder,
            .form-group textarea::placeholder {
                color: rgba(255, 255, 255, 0.6);
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üö® Mirai Alert Center</h1>
                <p>–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
            </div>
            
            <div class="controls">
                <button class="btn btn-info" onclick="loadData()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                <button class="btn btn-success" onclick="testAlert()">üß™ –¢–µ—Å—Ç –∞–ª–µ—Ä—Ç–∞</button>
                <button class="btn btn-warning" onclick="openManualAlert()">‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç</button>
                <button class="btn btn-danger" onclick="resolveAllAlerts()">‚úÖ –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ</button>
            </div>
            
            <div id="statsContainer" class="stats-grid">
                <div class="stat-card loading">
                    <div class="stat-value">-</div>
                    <div class="stat-label">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
            </div>
            
            <div class="dashboard-grid">
                <div class="alert-panel">
                    <h3>üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</h3>
                    <div id="activeAlerts" class="loading">
                        <div class="no-alerts">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤...</div>
                    </div>
                </div>
                
                <div class="alert-panel">
                    <h3>üìã –ü—Ä–∞–≤–∏–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h3>
                    <div id="alertRules" class="loading">
                        <div class="no-alerts">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª...</div>
                    </div>
                </div>
            </div>
            
            <div class="alert-panel">
                <h3>üìä –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ (24—á)</h3>
                <div id="alertHistory">
                    <div class="no-alerts loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>
                </div>
            </div>
            
            <div class="update-info">
                <span id="lastUpdate">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
                <span id="serviceStatus" class="status-offline">‚óè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...</span>
            </div>
        </div>
        
        <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ -->
        <div id="manualAlertModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeManualAlert()">&times;</span>
                <h2>–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç –≤—Ä—É—á–Ω—É—é</h2>
                <form id="manualAlertForm">
                    <div class="form-group">
                        <label>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</label>
                        <input type="text" id="alertTitle" placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–ª–µ—Ä—Ç–∞" required>
                    </div>
                    <div class="form-group">
                        <label>–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                        <textarea id="alertMessage" rows="3" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>–£—Ä–æ–≤–µ–Ω—å:</label>
                        <select id="alertLevel">
                            <option value="info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</option>
                            <option value="warning" selected>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</option>
                            <option value="critical">–ö—Ä–∏—Ç–∏—á–Ω–æ</option>
                            <option value="emergency">–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>–¢–∏–ø:</label>
                        <select id="alertType">
                            <option value="system" selected>–°–∏—Å—Ç–µ–º–∞</option>
                            <option value="trading">–¢–æ—Ä–≥–æ–≤–ª—è</option>
                            <option value="ai">AI</option>
                            <option value="security">–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</option>
                        </select>
                    </div>
                    <button type="submit" class="btn btn-warning">–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç</button>
                </form>
            </div>
        </div>
        
        <script>
            let alertData = {};
            
            async function loadData() {
                try {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    const [activeResponse, historyResponse, rulesResponse, statsResponse] = await Promise.all([
                        fetch('/api/alerts/active'),
                        fetch('/api/alerts/history'),
                        fetch('/api/alerts/rules'),
                        fetch('/api/alerts/stats')
                    ]);
                    
                    const activeAlerts = await activeResponse.json();
                    const alertHistory = await historyResponse.json();
                    const alertRules = await rulesResponse.json();
                    const alertStats = await statsResponse.json();
                    
                    alertData = { activeAlerts, alertHistory, alertRules, alertStats };
                    
                    renderActiveAlerts(activeAlerts);
                    renderAlertHistory(alertHistory);
                    renderAlertRules(alertRules);
                    renderStats(alertStats);
                    
                    document.getElementById('lastUpdate').textContent = 
                        `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;
                    document.getElementById('serviceStatus').textContent = '‚óè –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                    document.getElementById('serviceStatus').className = 'status-online';
                    
                } catch (error) {
                    console.error('Error loading data:', error);
                    document.getElementById('serviceStatus').textContent = '‚óè –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
                    document.getElementById('serviceStatus').className = 'status-offline';
                }
            }
            
            function renderStats(stats) {
                const container = document.getElementById('statsContainer');
                if (!stats.stats) return;
                
                const s = stats.stats;
                container.innerHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${s.active_alerts}</div>
                        <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${s.alerts_24h}</div>
                        <div class="stat-label">–ó–∞ 24—á</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${s.by_level_24h?.critical || 0}</div>
                        <div class="stat-label">–ö—Ä–∏—Ç–∏—á–Ω—ã–µ</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${s.by_level_24h?.warning || 0}</div>
                        <div class="stat-label">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è</div>
                    </div>
                `;
            }
            
            function renderActiveAlerts(data) {
                const container = document.getElementById('activeAlerts');
                
                if (!data.alerts || data.alerts.length === 0) {
                    container.innerHTML = '<div class="no-alerts">‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç</div>';
                    return;
                }
                
                container.innerHTML = data.alerts.map(alert => {
                    const time = new Date(alert.timestamp).toLocaleTimeString('ru-RU');
                    const levelClass = alert.level;
                    
                    return `
                        <div class="alert-item ${levelClass}">
                            <div class="alert-header">
                                <div class="alert-title">${alert.title}</div>
                                <div class="alert-time">${time}</div>
                            </div>
                            <div class="alert-message">${alert.message}</div>
                            <div class="alert-meta">
                                <span>–¢–∏–ø: ${alert.type}</span>
                                <span>–£—Ä–æ–≤–µ–Ω—å: ${alert.level}</span>
                                <button class="btn" onclick="resolveAlert('${alert.id}')">–ó–∞–∫—Ä—ã—Ç—å</button>
                            </div>
                        </div>
                    `;
                }).join('');
            }
            
            function renderAlertRules(data) {
                const container = document.getElementById('alertRules');
                
                if (!data.rules || data.rules.length === 0) {
                    container.innerHTML = '<div class="no-alerts">–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
                    return;
                }
                
                container.innerHTML = `
                    <div class="rules-list">
                        ${data.rules.map(rule => `
                            <div class="rule-card">
                                <div class="rule-name">${rule.name}</div>
                                <div class="rule-details">
                                    –¢–∏–ø: ${rule.type}<br>
                                    –£—Ä–æ–≤–µ–Ω—å: ${rule.level}<br>
                                    Cooldown: ${rule.cooldown}—Å<br>
                                    ${rule.last_triggered ? 
                                        `–ü–æ—Å–ª–µ–¥–Ω–∏–π: ${new Date(rule.last_triggered).toLocaleString('ru-RU')}` : 
                                        '–ù–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª'
                                    }
                                </div>
                            </div>
                        `).join('')}
                    </div>
                `;
            }
            
            function renderAlertHistory(data) {
                const container = document.getElementById('alertHistory');
                
                if (!data.alerts || data.alerts.length === 0) {
                    container.innerHTML = '<div class="no-alerts">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>';
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–ª–µ—Ä—Ç–æ–≤
                const recentAlerts = data.alerts.slice(0, 10);
                
                container.innerHTML = recentAlerts.map(alert => {
                    const time = new Date(alert.timestamp).toLocaleTimeString('ru-RU');
                    const date = new Date(alert.timestamp).toLocaleDateString('ru-RU');
                    const levelClass = alert.level;
                    
                    return `
                        <div class="alert-item ${levelClass}">
                            <div class="alert-header">
                                <div class="alert-title">${alert.title}</div>
                                <div class="alert-time">${date} ${time}</div>
                            </div>
                            <div class="alert-message">${alert.message}</div>
                            <div class="alert-meta">
                                <span>–¢–∏–ø: ${alert.type}</span>
                                <span>–£—Ä–æ–≤–µ–Ω—å: ${alert.level}</span>
                                ${alert.resolved ? '<span style="color: #2ecc71;">‚úÖ –ó–∞–∫—Ä—ã—Ç</span>' : ''}
                            </div>
                        </div>
                    `;
                }).join('');
            }
            
            async function testAlert() {
                try {
                    const response = await fetch('/api/alerts/test', { method: 'POST' });
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        alert('–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
                        setTimeout(loadData, 2000); // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    } else {
                        alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞');
                    }
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞: ' + error.message);
                }
            }
            
            async function resolveAlert(alertId) {
                try {
                    const response = await fetch(`/api/alerts/resolve/${alertId}`, { method: 'POST' });
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        loadData(); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    } else {
                        alert('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∞–ª–µ—Ä—Ç–∞');
                    }
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞: ' + error.message);
                }
            }
            
            async function resolveAllAlerts() {
                if (!confirm('–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã?')) return;
                
                const activeAlerts = alertData.activeAlerts?.alerts || [];
                for (const alert of activeAlerts) {
                    await resolveAlert(alert.id);
                }
            }
            
            function openManualAlert() {
                document.getElementById('manualAlertModal').style.display = 'block';
            }
            
            function closeManualAlert() {
                document.getElementById('manualAlertModal').style.display = 'none';
            }
            
            document.getElementById('manualAlertForm').onsubmit = async function(e) {
                e.preventDefault();
                
                const alertData = {
                    title: document.getElementById('alertTitle').value,
                    message: document.getElementById('alertMessage').value,
                    level: document.getElementById('alertLevel').value,
                    alert_type: document.getElementById('alertType').value
                };
                
                try {
                    const response = await fetch('/api/alerts/manual', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(alertData)
                    });
                    
                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        alert('–ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!');
                        closeManualAlert();
                        loadData();
                        document.getElementById('manualAlertForm').reset();
                    } else {
                        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: ' + result.detail);
                    }
                } catch (error) {
                    alert('–û—à–∏–±–∫–∞: ' + error.message);
                }
            };
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            setInterval(loadData, 30000);
            
            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
            loadData();
        </script>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)

# Proxy endpoints –¥–ª—è Alert API
@app.get("/api/alerts/active")
async def proxy_active_alerts():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:9998/alerts/active", timeout=10)
            return response.json()
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.get("/api/alerts/history")
async def proxy_alert_history():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:9998/alerts/history", timeout=10)
            return response.json()
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.get("/api/alerts/rules")
async def proxy_alert_rules():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:9998/alerts/rules", timeout=10)
            return response.json()
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.get("/api/alerts/stats")
async def proxy_alert_stats():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:9998/alerts/stats", timeout=10)
            return response.json()
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/api/alerts/test")
async def proxy_test_alert():
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post("http://localhost:9998/alerts/test", timeout=10)
            return response.json()
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/api/alerts/resolve/{alert_id}")
async def proxy_resolve_alert(alert_id: str):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"http://localhost:9998/alerts/resolve/{alert_id}", timeout=10)
            return response.json()
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.post("/api/alerts/manual")
async def proxy_manual_alert(request: Request):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    try:
        body = await request.json()
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "http://localhost:9998/alerts/manual",
                json=body,
                timeout=10
            )
            return response.json()
    except Exception as e:
        return JSONResponse(content={"error": str(e)}, status_code=500)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤–µ–±-–ø–∞–Ω–µ–ª–∏"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=9997)