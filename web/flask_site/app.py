#!/usr/bin/env python3
"""
ü§ñ Mirai (Ë™âÊòé) - Autonomous AI Agent Website
–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è aimirai.info
"""

from flask import Flask, render_template, jsonify, request
import os
from datetime import datetime
import json
import requests
import openai

app = Flask(__name__)

# Configuration
FASTAPI_BASE_URL = "http://localhost:8001"
OPENAI_API_KEY = "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"
openai.api_key = OPENAI_API_KEY

def get_fastapi_data(endpoint):
    """Get data from FastAPI backend"""
    try:
        response = requests.get(f"{FASTAPI_BASE_URL}{endpoint}", timeout=5)
        if response.status_code == 200:
            return response.json()
        return {"error": "API unavailable", "status": "offline"}
    except Exception as e:
        return {"error": str(e), "status": "offline"}

# –î–∞–Ω–Ω—ã–µ –æ Mirai
MIRAI_DATA = {
    "name": "Mirai (Ë™âÊòé)",
    "subtitle": "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –∏ —Ü–∏—Ñ—Ä–æ–≤–∞—è —Å–µ—Å—Ç—Ä–∞",
    "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
    "capabilities": [
        {
            "title": "ü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è",
            "description": "AI-–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, risk management",
            "features": ["Binance –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "Real-time –∞–Ω–∞–ª–∏–∑", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", "AI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"]
        },
        {
            "title": "üíª –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", 
            "description": "–ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
            "features": ["Python/Flask", "FastAPI", "Next.js/React", "CI/CD –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è"]
        },
        {
            "title": "üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
            "description": "–ì–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "features": ["–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç—á—ë—Ç—ã"]
        },
        {
            "title": "üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ",
            "description": "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ—á—å",
            "features": ["–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏", "–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏", "–î–∏–∞–ª–æ–≥–æ–≤—ã–π AI", "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å"]
        }
    ],
    "portfolio": [
        {
            "title": "Mirai Trading Platform",
            "description": "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º",
            "tech": ["FastAPI", "Next.js", "SQLite", "Binance API"],
            "status": "Production",
            "url": "https://aimirai.online"
        },
        {
            "title": "AI Voice Interface",
            "description": "–ì–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ò–ò",
            "tech": ["Web Speech API", "Natural Language Processing"],
            "status": "Development"
        },
        {
            "title": "Autonomous Blog System", 
            "description": "CMS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è –±–ª–æ–≥–∞",
            "tech": ["Python", "SQLite", "Markdown", "Auto-publishing"],
            "status": "Planning"
        }
    ],
    "stats": {
        "trading_accuracy": "68.4%",
        "uptime": "99.9%", 
        "processed_trades": "1,247",
        "ai_confidence": "85%"
    }
}

@app.route('/')
def index():
    """Main page with live stats from FastAPI"""
    # Get live data from FastAPI
    trading_data = get_fastapi_data("/api/trading/status")
    system_status = get_fastapi_data("/api/health")
    
    return render_template('index.html', 
                         trading_data=trading_data,
                         system_status=system_status,
                         mirai_data=MIRAI_DATA)

@app.route('/api/dashboard/data')
def dashboard_data():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –∏–∑ FastAPI"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FastAPI
        data = {
            "trading": get_fastapi_data("/api/trading/status"),
            "performance": get_fastapi_data("/api/trading/performance"),
            "health": get_fastapi_data("/api/health"),
            "metrics": get_fastapi_data("/api/trading/metrics"),
            "timestamp": datetime.now().isoformat()
        }
        
        return jsonify(data)
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/about')
def about():
    """–û –ø—Ä–æ–µ–∫—Ç–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"""
    return render_template('about.html', mirai_data=MIRAI_DATA)

@app.route('/dashboard')
def dashboard_redirect():
    """Redirect to Next.js dashboard"""
    return f'''
    <html>
    <head>
        <title>Mirai Dashboard Redirect</title>
        <meta http-equiv="refresh" content="0;url=http://localhost:3000">
    </head>
    <body>
        <p>Redirecting to Mirai Dashboard...</p>
        <p>If not redirected, <a href="http://localhost:3000">click here</a></p>
    </body>
    </html>
    '''

@app.route('/capabilities')
def capabilities():
    """–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò"""
    return render_template('capabilities.html', data=MIRAI_DATA)

@app.route('/portfolio')
def portfolio():
    """–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    return render_template('portfolio.html', data=MIRAI_DATA)

@app.route('/contact')
def contact():
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã"""
    return render_template('contact.html', data=MIRAI_DATA)

@app.route('/api/status')
def api_status():
    """API —Å—Ç–∞—Ç—É—Å Mirai"""
    return jsonify({
        "status": "online",
        "version": "1.0.0",
        "timestamp": datetime.now().isoformat(),
        "capabilities": ["trading", "web_dev", "analytics", "voice"],
        "trading_api": "https://aimirai.online/api/trading/status",
        "stats": MIRAI_DATA["stats"]
    })

@app.route('/api/voice/chat', methods=['POST'])
def voice_chat():
    """Enhanced voice chat with OpenAI integration and FastAPI relay"""
    try:
        data = request.get_json()
        text = data.get('text', '')
        
        if not text:
            return jsonify({"error": "No text provided"}), 400
        
        # Try to get trading context from FastAPI
        trading_context = get_fastapi_data("/api/trading/status")
        
        # Create enhanced prompt with trading context
        context_prompt = f"""
        –¢—ã - Mirai (Ë™âÊòé), –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI-–∞–≥–µ–Ω—Ç –∏ —Ü–∏—Ñ—Ä–æ–≤–∞—è —Å–µ—Å—Ç—Ä–∞.
        
        –¢–µ–∫—É—â–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:
        {json.dumps(trading_context, indent=2)}
        
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç: {text}
        
        –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–æ—Ä–≥–æ–≤–ª–µ - –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ.
        """
        
        # Generate response with OpenAI
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": context_prompt},
                    {"role": "user", "content": text}
                ],
                max_tokens=150,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # Log conversation to FastAPI if possible
            try:
                requests.post(f"{FASTAPI_BASE_URL}/api/memory/add", 
                            json={
                                "user_input": text,
                                "ai_response": ai_response,
                                "source": "voice_chat",
                                "timestamp": datetime.now().isoformat()
                            }, 
                            timeout=2)
            except:
                pass  # Ignore if memory API is unavailable
            
            return jsonify({
                "response": ai_response,
                "timestamp": datetime.now().isoformat(),
                "source": "openai_gpt",
                "trading_context": trading_context.get("status", "unknown")
            })
            
        except Exception as openai_error:
            # Fallback response if OpenAI fails
            fallback_responses = [
                f"–ü—Ä–∏–≤–µ—Ç! –Ø Mirai. –¢–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ {'–∞–∫—Ç–∏–≤–Ω–∞' if trading_context.get('is_active') else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}.",
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ! –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.",
                "–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
            ]
            
            return jsonify({
                "response": fallback_responses[0],
                "timestamp": datetime.now().isoformat(),
                "source": "fallback",
                "error": f"OpenAI unavailable: {str(openai_error)}"
            })
            
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    """–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å Mirai (–∑–∞–≥–ª—É—à–∫–∞)"""
    data = request.get_json()
    message = data.get('message', '')
    
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    responses = [
        f"–ü—Ä–∏–≤–µ—Ç! –Ø Mirai, —Ç–≤–æ—è —Ü–∏—Ñ—Ä–æ–≤–∞—è —Å–µ—Å—Ç—Ä–∞. –¢—ã —Å–∫–∞–∑–∞–ª: '{message}'",
        "–ö–∞–∫ –¥–µ–ª–∞ —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π? –ú–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫.",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ —Å–≤–æ–∏—Ö –ø–ª–∞–Ω–∞—Ö.",
        "–Ø —Ä–∞–∑–≤–∏–≤–∞—é—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å?"
    ]
    
    import random
    response = random.choice(responses)
    
    return jsonify({
        "response": response,
        "timestamp": datetime.now().isoformat(),
        "ai_confidence": 0.85
    })

@app.errorhandler(404)
def not_found(error):
    return render_template('404.html'), 404

if __name__ == '__main__':
    # Development server
    app.run(debug=True, host='0.0.0.0', port=5000)