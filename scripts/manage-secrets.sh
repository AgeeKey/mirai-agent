#!/bin/bash

# GitHub Actions Secrets & Variables Management Script
# –¢—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω GH_TOKEN —Å –ø—Ä–∞–≤–∞–º–∏ repo + admin:org

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
check_token() {
    if [ -z "$GH_TOKEN" ]; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: GH_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è${NC}"
        echo -e "${YELLOW}üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–æ–∫–µ–Ω GH_TOKEN –¥–æ–±–∞–≤–ª–µ–Ω –≤ Codespaces secrets${NC}"
        exit 1
    fi
    echo -e "${GREEN}‚úÖ –¢–æ–∫–µ–Ω GH_TOKEN –Ω–∞–π–¥–µ–Ω${NC}"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ public key –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
get_public_key() {
    local repo=$1
    echo -e "${BLUE}üîë –ü–æ–ª—É—á–∞–µ–º public key –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è $repo...${NC}"
    
    curl -s -H "Authorization: Bearer $GH_TOKEN" \
         -H "Accept: application/vnd.github+json" \
         "https://api.github.com/repos/$repo/actions/secrets/public-key"
}

# –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é PyNaCl
encrypt_secret() {
    local value=$1
    local public_key=$2
    
    python3 << EOF
import base64
from nacl import encoding, public
from nacl.public import SealedBox

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º public key
public_key_bytes = base64.b64decode("$public_key")
public_key_obj = public.PublicKey(public_key_bytes)

# –®–∏—Ñ—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
sealed_box = SealedBox(public_key_obj)
encrypted = sealed_box.encrypt(b"$value")

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º base64 encoded —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(base64.b64encode(encrypted).decode())
EOF
}

# –°–æ–∑–¥–∞–Ω–∏–µ repository secret
create_repository_secret() {
    local repo=$1
    local secret_name=$2
    local secret_value=$3
    
    echo -e "${BLUE}üîê –°–æ–∑–¥–∞–µ–º repository secret $secret_name...${NC}"
    
    # –ü–æ–ª—É—á–∞–µ–º public key
    local key_data=$(get_public_key "$repo")
    local key_id=$(echo "$key_data" | jq -r '.key_id')
    local public_key=$(echo "$key_data" | jq -r '.key')
    
    if [ "$key_id" = "null" ] || [ "$public_key" = "null" ]; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è public key${NC}"
        echo "$key_data"
        return 1
    fi
    
    # –®–∏—Ñ—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    local encrypted_value=$(encrypt_secret "$secret_value" "$public_key")
    
    # –°–æ–∑–¥–∞–µ–º secret
    local response=$(curl -s -X PUT \
        -H "Authorization: Bearer $GH_TOKEN" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/repos/$repo/actions/secrets/$secret_name" \
        -d "{\"encrypted_value\":\"$encrypted_value\",\"key_id\":\"$key_id\"}")
    
    if echo "$response" | grep -q '"message"'; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è secret:${NC}"
        echo "$response" | jq .
        return 1
    else
        echo -e "${GREEN}‚úÖ Secret $secret_name —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ${NC}"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ repository variable
create_repository_variable() {
    local repo=$1
    local var_name=$2
    local var_value=$3
    
    echo -e "${BLUE}üìù –°–æ–∑–¥–∞–µ–º repository variable $var_name...${NC}"
    
    local response=$(curl -s -X POST \
        -H "Authorization: Bearer $GH_TOKEN" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/repos/$repo/actions/variables" \
        -d "{\"name\":\"$var_name\",\"value\":\"$var_value\"}")
    
    if echo "$response" | grep -q '"message"'; then
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è variable:${NC}"
        echo "$response" | jq .
        return 1
    else
        echo -e "${GREEN}‚úÖ Variable $var_name —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ${NC}"
    fi
}

# –°–ø–∏—Å–æ–∫ repository secrets
list_repository_secrets() {
    local repo=$1
    echo -e "${BLUE}üìã –°–ø–∏—Å–æ–∫ repository secrets –¥–ª—è $repo:${NC}"
    
    curl -s -H "Authorization: Bearer $GH_TOKEN" \
         -H "Accept: application/vnd.github+json" \
         "https://api.github.com/repos/$repo/actions/secrets" | \
         jq '.secrets[]? | {name: .name, created_at: .created_at, updated_at: .updated_at}'
}

# –°–ø–∏—Å–æ–∫ repository variables
list_repository_variables() {
    local repo=$1
    echo -e "${BLUE}üìã –°–ø–∏—Å–æ–∫ repository variables –¥–ª—è $repo:${NC}"
    
    curl -s -H "Authorization: Bearer $GH_TOKEN" \
         -H "Accept: application/vnd.github+json" \
         "https://api.github.com/repos/$repo/actions/variables" | \
         jq '.variables[]? | {name: .name, value: .value, created_at: .created_at, updated_at: .updated_at}'
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo -e "${BLUE}üöÄ GitHub Actions Secrets & Variables Manager${NC}"
    echo "=========================================="
    
    check_token
    
    local repo="AgeeKey/mirai-agent"
    
    case "${1:-help}" in
        "create-secret")
            if [ $# -ne 3 ]; then
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 create-secret SECRET_NAME SECRET_VALUE"
                exit 1
            fi
            create_repository_secret "$repo" "$2" "$3"
            ;;
        "create-variable")
            if [ $# -ne 3 ]; then
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 create-variable VAR_NAME VAR_VALUE"
                exit 1
            fi
            create_repository_variable "$repo" "$2" "$3"
            ;;
        "list-secrets")
            list_repository_secrets "$repo"
            ;;
        "list-variables")
            list_repository_variables "$repo"
            ;;
        "test")
            echo -e "${YELLOW}üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ secret –∏ variable${NC}"
            create_repository_secret "$repo" "TEST_SECRET" "test-secret-value-$(date +%s)"
            create_repository_variable "$repo" "TEST_VARIABLE" "test-variable-value-$(date +%s)"
            echo -e "${GREEN}‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω${NC}"
            ;;
        *)
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
            echo "  create-secret SECRET_NAME SECRET_VALUE  - –°–æ–∑–¥–∞—Ç—å repository secret"
            echo "  create-variable VAR_NAME VAR_VALUE      - –°–æ–∑–¥–∞—Ç—å repository variable"
            echo "  list-secrets                            - –°–ø–∏—Å–æ–∫ repository secrets"
            echo "  list-variables                          - –°–ø–∏—Å–æ–∫ repository variables"
            echo "  test                                    - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ secret –∏ variable"
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"