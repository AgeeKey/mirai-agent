#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞ Mirai
–û—Å–Ω–æ–≤–Ω–æ–π –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
"""

import os
import sys
import asyncio
import argparse
import json
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from autonomous_agent import MiraiAgent
    from agent_config import AgentConfig, PREDEFINED_OBJECTIVES
    from trading_tools import AdvancedTradingTools
    from safety_system import create_safety_system, create_sandbox
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –∞–≥–µ–Ω—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö")
    sys.exit(1)

def setup_logging(log_level=logging.INFO):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_dir = "/root/mirai-agent/logs"
    os.makedirs(log_dir, exist_ok=True)
    
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f'{log_dir}/mirai_agent.log'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    banner = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                    ü§ñ MIRAI AGENT 2024                       ‚ïë
    ‚ïë              –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π AI-–∞–≥–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏                ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  üß† Powered by OpenAI GPT-4                                  ‚ïë
    ‚ïë  üìä Advanced Trading Analytics                               ‚ïë
    ‚ïë  üõ°Ô∏è  Multi-layer Safety System                               ‚ïë
    ‚ïë  üèñÔ∏è  Sandbox Mode Enabled                                    ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API –∫–ª—é—á–∞
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export OPENAI_API_KEY='your-api-key-here'")
        return False
    else:
        print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import openai
        print("‚úÖ OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
    except ImportError:
        print("‚ùå OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = [
        "/root/mirai-agent/logs",
        "/root/mirai-agent/state"
    ]
    
    for dir_path in required_dirs:
        if not os.path.exists(dir_path):
            os.makedirs(dir_path, exist_ok=True)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_path}")
        else:
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_path}")
    
    return True

def display_objectives():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    print("\\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞:")
    print("‚ïê" * 60)
    
    for key, objective in PREDEFINED_OBJECTIVES.items():
        print(f"\\nüéØ {key}:")
        print(f"   {objective.strip()}")
    
    print("\\nüí° –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–ª—å")

def get_user_objective():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    display_objectives()
    
    print("\\n" + "‚ïê" * 60)
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å (–≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏–ª–∏ 'custom'): ").strip()
    
    if choice in PREDEFINED_OBJECTIVES:
        return PREDEFINED_OBJECTIVES[choice]
    elif choice.lower() == 'custom':
        print("\\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ü–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞:")
        custom_objective = input("> ").strip()
        return custom_objective
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å: {choice}")
        return get_user_objective()

def display_safety_status(safety_system):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    status = safety_system.get_safety_status()
    
    print("\\nüõ°Ô∏è  –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    print("‚ïê" * 50)
    print(f"üèñÔ∏è  –†–µ–∂–∏–º –ø–µ—Å–æ—á–Ω–∏—Ü—ã: {'–í–ö–õ–Æ–ß–ï–ù' if status['sandboxed'] else '–û–¢–ö–õ–Æ–ß–ï–ù'}")
    print(f"üìä –°–¥–µ–ª–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {status['daily_limits']['trades_today']}/{status['daily_limits']['max_trades']}")
    print(f"üí∞ –û–±—ä–µ–º —Å–µ–≥–æ–¥–Ω—è: ${status['daily_limits']['volume_today']:.2f}/${status['daily_limits']['max_volume']:.2f}")
    print(f"‚ö†Ô∏è  –ù–∞—Ä—É—à–µ–Ω–∏–π —Ä–∏—Å–∫–∞: {status['session_stats']['risk_violations']}")
    
    if status['pending_confirmations'] > 0:
        print(f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π: {status['pending_confirmations']}")

async def run_interactive_mode(agent):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
    print("\\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω")
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  'status' - —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞")
    print("  'safety' - —Å—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏") 
    print("  'stop' - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞")
    print("  'objective <text>' - –Ω–æ–≤–∞—è —Ü–µ–ª—å")
    print("  'help' - –ø–æ–º–æ—â—å")
    
    while agent.running:
        try:
            command = input("\\n> ").strip().lower()
            
            if command == 'stop':
                agent.stop_agent()
                print("üõë –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            elif command == 'status':
                print(f"üìä –ê–≥–µ–Ω—Ç {'—Ä–∞–±–æ—Ç–∞–µ—Ç' if agent.running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                print(f"üéØ –¶–µ–ª—å: {agent.current_objective}")
                print(f"üìã –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {len(agent.task_queue)}")
            elif command == 'safety':
                display_safety_status(agent.safety_system)
            elif command.startswith('objective '):
                new_objective = command[10:]
                agent.set_objective(new_objective)
                print(f"üéØ –ù–æ–≤–∞—è —Ü–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_objective}")
            elif command == 'help':
                print("üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                print("  status, safety, stop, objective <text>, help")
            else:
                print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
        
        except KeyboardInterrupt:
            print("\\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞...")
            agent.stop_agent()
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Mirai AI Trading Agent")
    parser.add_argument("--objective", type=str, help="–¶–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–∞")
    parser.add_argument("--max-iterations", type=int, default=20, help="–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π")
    parser.add_argument("--interactive", action="store_true", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")
    parser.add_argument("--dry-run", action="store_true", default=True, help="–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--log-level", choices=["DEBUG", "INFO", "WARNING", "ERROR"], 
                       default="INFO", help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(getattr(logging, args.log_level))
    
    # –ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        print("\\n‚ùå –ù–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return 1
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = AgentConfig(
            dry_run_mode=args.dry_run,
            max_iterations=args.max_iterations
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        safety_system = create_safety_system({
            "max_position_size": 1000.0,
            "max_daily_trades": 10,
            "real_trading_enabled": False
        })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
        agent = MiraiAgent(
            openai_api_key=config.openai_api_key,
            max_iterations=args.max_iterations
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫ –∞–≥–µ–Ω—Ç—É
        agent.safety_system = safety_system
        agent.sandbox = create_sandbox(safety_system)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        display_safety_status(safety_system)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–∏
        if args.objective:
            objective = args.objective
        else:
            objective = get_user_objective()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
        agent.set_objective(objective)
        
        print(f"\\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å —Ü–µ–ª—å—é:")
        print(f"üéØ {objective}")
        print(f"‚öôÔ∏è  –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π: {args.max_iterations}")
        print(f"üõ°Ô∏è  –†–µ–∂–∏–º: {'–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' if args.dry_run else '–ü—Ä–æ–¥–∞–∫—à–Ω'}")
        
        # –ó–∞–ø—É—Å–∫
        if args.interactive:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            agent_task = asyncio.create_task(agent.run_agent_loop())
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            interactive_task = asyncio.create_task(run_interactive_mode(agent))
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [agent_task, interactive_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
            for task in pending:
                task.cancel()
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
            await agent.run_agent_loop()
        
        print("\\n‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ")
        return 0
        
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        print(f"\\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≥–µ–Ω—Ç–∞")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())