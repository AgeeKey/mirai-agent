#!/bin/bash

# üß™ Mirai Agent - Manual Testing Script (No Docker)
# Manual testing of AI integration components without Docker dependency

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

echo -e "${BOLD}${BLUE}===============================================${NC}"
echo -e "${BOLD}${BLUE}   MIRAI AGENT - MANUAL AI TESTING           ${NC}"
echo -e "${BOLD}${BLUE}===============================================${NC}"
echo ""

# Check for critical files
check_file() {
    local file="$1"
    local description="$2"
    
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $description –Ω–∞–π–¥–µ–Ω: $file${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $description –Ω–µ –Ω–∞–π–¥–µ–Ω: $file${NC}"
        return 1
    fi
}

echo -e "${CYAN}üìã –ü–†–û–í–ï–†–ö–ê AI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í${NC}"
echo "======================================"

cd /root/mirai-agent

# Check AI implementation files
check_file "app/trader/agent_loop.py" "Enhanced Agent Loop"
check_file "app/agent/policy.py" "AI Trading Policies"
check_file "microservices/ai-engine/orchestrator/main.py" "AI Orchestrator"
check_file "infra/docker-compose.ai.yml" "AI Docker Compose"
check_file "scripts/deploy-ai-full.sh" "AI Deployment Script"
check_file "scripts/test-ai-integration.sh" "AI Testing Script"

echo ""
echo -e "${CYAN}üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PYTHON –ú–û–î–£–õ–ï–ô${NC}"
echo "====================================="

# Test Enhanced Agent Loop
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced Agent Loop..."
if python3 -c "
import sys
sys.path.insert(0, '/root/mirai-agent/app/trader')
try:
    from agent_loop import AIIntegratedTradingLoop, create_enhanced_trading_loop
    print('‚úÖ Enhanced Agent Loop –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    
    # Test configuration
    config = {
        'dry_run': True,
        'ai_enabled': True,
        'orchestrator_url': 'http://localhost:8080',
        'symbols': ['BTCUSDT'],
        'loop_interval': 5.0
    }
    
    loop = create_enhanced_trading_loop(config)
    print(f'‚úÖ Trading Loop —Å–æ–∑–¥–∞–Ω: AI={loop.ai_enabled}')
    
    status = loop.get_status()
    print(f'‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {status[\"state\"]}')
    
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    sys.exit(1)
"; then
    echo -e "${GREEN}‚úÖ Enhanced Agent Loop - —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "${RED}‚ùå Enhanced Agent Loop - –æ—à–∏–±–∫–∞${NC}"
fi

echo ""

# Test AI Policies
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Trading Policies..."
if python3 -c "
import sys
sys.path.insert(0, '/root/mirai-agent/app/agent')
try:
    from policy import AIEnhancedPolicy, PolicyEngine, MockLLMPolicy
    print('‚úÖ AI Policies –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')
    
    # Test policy engine
    config = {
        'ai_enabled': True,
        'orchestrator_url': 'http://localhost:8080',
        'ai_decision_weight': 0.6
    }
    
    engine = PolicyEngine(config)
    print(f'‚úÖ PolicyEngine —Å–æ–∑–¥–∞–Ω: AI={engine.policy.ai_enabled}')
    
    status = engine.get_status()
    print(f'‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: AI weight={status[\"ai_weight\"]}')
    
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
    sys.exit(1)
"; then
    echo -e "${GREEN}‚úÖ AI Trading Policies - —Ä–∞–±–æ—Ç–∞—é—Ç${NC}"
else
    echo -e "${RED}‚ùå AI Trading Policies - –æ—à–∏–±–∫–∞${NC}"
fi

echo ""

# Test configuration files
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

if grep -q "ai_integration:" configs/strategies.yaml; then
    echo -e "${GREEN}‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ strategies.yaml${NC}"
else
    echo -e "${RED}‚ùå AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ strategies.yaml${NC}"
fi

if grep -q "ai_risk:" configs/risk.yaml; then
    echo -e "${GREEN}‚úÖ AI —Ä–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ risk.yaml${NC}"
else
    echo -e "${RED}‚ùå AI —Ä–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ risk.yaml${NC}"
fi

# Check environment variables
echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

if grep -q "AI_ENABLED" .env; then
    ai_enabled=$(grep "AI_ENABLED" .env | cut -d'=' -f2)
    echo -e "${GREEN}‚úÖ AI_ENABLED=$ai_enabled${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è AI_ENABLED –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env${NC}"
fi

if grep -q "POSTGRES_PASSWORD" .env; then
    echo -e "${GREEN}‚úÖ POSTGRES_PASSWORD –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è POSTGRES_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi

if grep -q "CHROMA_TOKEN" .env; then
    echo -e "${GREEN}‚úÖ CHROMA_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è CHROMA_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi

echo ""
echo -e "${CYAN}üèóÔ∏è –ü–†–û–í–ï–†–ö–ê AI –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´${NC}"
echo "======================================"

# Check AI directories
dirs_to_check=(
    "microservices/ai-engine/orchestrator"
    "microservices/ai-engine/superagi"
    "microservices/ai-engine/autogpt-runner"
    "shared/data"
    "shared/reports"
    "shared/knowledge"
)

for dir in "${dirs_to_check[@]}"; do
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir${NC}"
    else
        echo -e "${RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $dir –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç${NC}"
    fi
done

echo ""
echo -e "${CYAN}üì¶ –ü–†–û–í–ï–†–ö–ê DEPENDENCIES${NC}"
echo "==============================="

# Check Python dependencies
python_deps=(
    "aiohttp"
    "asyncio"
    "json"
    "datetime"
)

for dep in "${python_deps[@]}"; do
    if python3 -c "import $dep" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Python –º–æ–¥—É–ª—å: $dep${NC}"
    else
        echo -e "${RED}‚ùå Python –º–æ–¥—É–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: $dep${NC}"
    fi
done

echo ""
echo -e "${CYAN}üß™ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï${NC}"
echo "======================================"

# Test AI integration mock
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (mock)..."
python3 << 'EOF'
import sys
sys.path.insert(0, '/root/mirai-agent/app/trader')
sys.path.insert(0, '/root/mirai-agent/app/agent')

try:
    from agent_loop import AIIntegratedTradingLoop
    from policy import PolicyEngine
    
    # Create mock test
    config = {
        'dry_run': True,
        'ai_enabled': False,  # Disable AI for local test
        'symbols': ['BTCUSDT'],
        'loop_interval': 1.0
    }
    
    # Test loop creation
    loop = AIIntegratedTradingLoop(config)
    print('‚úÖ AI Trading Loop —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    
    # Test status
    status = loop.get_status()
    print(f'‚úÖ –°—Ç–∞—Ç—É—Å: {status["state"]}, AI: {status["ai_enabled"]}')
    
    # Test policy engine
    policy_engine = PolicyEngine(config)
    print('‚úÖ Policy Engine —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    
    policy_status = policy_engine.get_status()
    print(f'‚úÖ Policy —Å—Ç–∞—Ç—É—Å: AI enabled = {policy_status["ai_enabled"]}')
    
    print('‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã')
    
except Exception as e:
    print(f'‚ùå –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}')
    sys.exit(1)
EOF

echo ""
echo -e "${CYAN}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${NC}"
echo "================================="

# Count files
ai_files_count=$(find . -name "*.py" -exec grep -l "ai_enabled\|AI_ENABLED\|orchestrator" {} \; | wc -l)
config_files_count=$(find configs -name "*.yaml" -exec grep -l "ai_" {} \; | wc -l)

echo "üìÅ AI-–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: $ai_files_count"
echo "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å AI: $config_files_count"
echo "üèóÔ∏è AI –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞"
echo "üß™ Python –º–æ–¥—É–ª–∏: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã"

echo ""
echo -e "${BOLD}${GREEN}üéâ –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û${NC}"
echo "============================================="

echo ""
echo -e "${BOLD}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:${NC}"
echo "‚Ä¢ ‚úÖ Enhanced Agent Loop —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "‚Ä¢ ‚úÖ AI Trading Policies —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç"
echo "‚Ä¢ ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è AI"
echo "‚Ä¢ ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
echo "‚Ä¢ ‚úÖ AI –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞"
echo "‚Ä¢ ‚úÖ Python –º–æ–¥—É–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã"
echo ""

echo -e "${BOLD}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ (–±–µ–∑ Docker):${NC}"
echo "1. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –Ω—É–∂–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π Orchestrator"
echo "2. –ú–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ ai_enabled=false (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)"
echo "3. AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker"
echo "4. –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã"
echo ""

echo -e "${YELLOW}‚ö†Ô∏è –í–ê–ñ–ù–û:${NC}"
echo "‚Ä¢ Docker –Ω–µ–∏—Å–ø—Ä–∞–≤–µ–Ω - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
echo "‚Ä¢ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ mock —Ä–µ–∂–∏–º–µ"
echo "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker"
echo "‚Ä¢ –í—Å–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É"
echo ""

echo -e "${BOLD}${BLUE}===============================================${NC}"
echo -e "${BOLD}${BLUE}       AI INTEGRATION MANUAL TEST COMPLETE    ${NC}"
echo -e "${BOLD}${BLUE}===============================================${NC}"