version: '3.8'

networks:
  mirai-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:

services:
  # Infrastructure services
  redis:
    image: redis:7-alpine
    container_name: mirai-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-miraipass}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mirai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Advanced AI Engine (Phase 2)
  ai-engine:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: mirai-ai-engine
    command: ["python", "-m", "uvicorn", "ai_engine:app", "--host", "0.0.0.0", "--port", "8001"]
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
    depends_on:
      - redis
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Advanced Portfolio Manager (Phase 2)
  portfolio-manager:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: mirai-portfolio-manager
    command: ["python", "-m", "uvicorn", "portfolio_manager:app", "--host", "0.0.0.0", "--port", "8002"]
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - AI_ENGINE_URL=http://ai-engine:8001
    depends_on:
      - redis
      - ai-engine
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Advanced Analytics Engine (Phase 2)
  analytics:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: mirai-analytics
    command: ["python", "-m", "uvicorn", "analytics:app", "--host", "0.0.0.0", "--port", "8003"]
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - AI_ENGINE_URL=http://ai-engine:8001
      - PORTFOLIO_MANAGER_URL=http://portfolio-manager:8002
    depends_on:
      - redis
      - ai-engine
      - portfolio-manager
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Collector (Enhanced)
  data-collector:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: mirai-data-collector
    command: ["python", "-m", "uvicorn", "data_collector:app", "--host", "0.0.0.0", "--port", "8004"]
    ports:
      - "8004:8004"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - ANALYTICS_URL=http://analytics:8003
    depends_on:
      - redis
      - analytics
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Strategy Engine (Enhanced)
  strategy-engine:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: mirai-strategy-engine
    command: ["python", "-m", "uvicorn", "strategy_engine:app", "--host", "0.0.0.0", "--port", "8005"]
    ports:
      - "8005:8005"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - AI_ENGINE_URL=http://ai-engine:8001
      - ANALYTICS_URL=http://analytics:8003
    depends_on:
      - redis
      - ai-engine
      - analytics
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Risk Engine (Enhanced)
  risk-engine:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: mirai-risk-engine
    command: ["python", "-m", "uvicorn", "risk_engine:app", "--host", "0.0.0.0", "--port", "8006"]
    ports:
      - "8006:8006"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - AI_ENGINE_URL=http://ai-engine:8001
      - PORTFOLIO_MANAGER_URL=http://portfolio-manager:8002
    depends_on:
      - redis
      - ai-engine
      - portfolio-manager
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./configs:/app/configs
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notifications Service (Enhanced)
  notifications:
    build:
      context: ./microservices
      dockerfile: Dockerfile
    container_name: mirai-notifications
    command: ["python", "-m", "uvicorn", "notifications:app", "--host", "0.0.0.0", "--port", "8007"]
    ports:
      - "8007:8007"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    depends_on:
      - redis
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Main API)
  api-gateway:
    build:
      context: ./app/api
      dockerfile: Dockerfile
    container_name: mirai-api-gateway
    command: ["uvicorn", "mirai_api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-miraipass}
      - AI_ENGINE_URL=http://ai-engine:8001
      - PORTFOLIO_MANAGER_URL=http://portfolio-manager:8002
      - ANALYTICS_URL=http://analytics:8003
      - DATA_COLLECTOR_URL=http://data-collector:8004
      - STRATEGY_ENGINE_URL=http://strategy-engine:8005
      - RISK_ENGINE_URL=http://risk-engine:8006
      - NOTIFICATIONS_URL=http://notifications:8007
    depends_on:
      - redis
      - ai-engine
      - portfolio-manager
      - analytics
      - data-collector
      - strategy-engine
      - risk-engine
      - notifications
    networks:
      - mirai-network
    restart: unless-stopped
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend (Next.js)
  web-frontend:
    build:
      context: ./web/services
      dockerfile: Dockerfile
    container_name: mirai-web-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - api-gateway
    networks:
      - mirai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mirai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
      - web-frontend
    networks:
      - mirai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3