#!/bin/bash

# Mirai Agent - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
# –°–æ–∑–¥–∞–µ—Ç backup –ë–î, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –ª–æ–≥–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
BACKUP_DIR="$PROJECT_ROOT/backups"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="mirai_backup_$TIMESTAMP"
BACKUP_PATH="$BACKUP_DIR/$BACKUP_NAME"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è backup
create_backup_structure() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã backup..."
    
    mkdir -p "$BACKUP_DIR"
    mkdir -p "$BACKUP_PATH"
    mkdir -p "$BACKUP_PATH/database"
    mkdir -p "$BACKUP_PATH/configs"
    mkdir -p "$BACKUP_PATH/logs"
    mkdir -p "$BACKUP_PATH/state"
    mkdir -p "$BACKUP_PATH/secrets"
    mkdir -p "$BACKUP_PATH/monitoring"
    mkdir -p "$BACKUP_PATH/scripts"
    
    info "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ backup —Å–æ–∑–¥–∞–Ω–∞: $BACKUP_PATH"
}

# Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup_database() {
    log "Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    DB_PATH="$PROJECT_ROOT/state/mirai.db"
    
    if [ -f "$DB_PATH" ]; then
        cp "$DB_PATH" "$BACKUP_PATH/database/"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ SQL dump
        if command -v sqlite3 &> /dev/null; then
            sqlite3 "$DB_PATH" .dump > "$BACKUP_PATH/database/mirai_dump_$TIMESTAMP.sql"
            info "SQL dump —Å–æ–∑–¥–∞–Ω"
        fi
        
        info "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
    else
        warn "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $DB_PATH"
    fi
}

# Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
backup_configs() {
    log "Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if [ -d "$PROJECT_ROOT/configs" ]; then
        cp -r "$PROJECT_ROOT/configs/"* "$BACKUP_PATH/configs/" 2>/dev/null || true
        info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    fi
    
    # Backup docker-compose —Ñ–∞–π–ª–æ–≤
    find "$PROJECT_ROOT" -name "docker-compose*.yml" -exec cp {} "$BACKUP_PATH/configs/" \; 2>/dev/null || true
    
    # Backup pyproject.toml —Ñ–∞–π–ª–æ–≤
    find "$PROJECT_ROOT" -name "pyproject.toml" -exec cp {} "$BACKUP_PATH/configs/" \; 2>/dev/null || true
    
    # Backup Dockerfile'–æ–≤
    find "$PROJECT_ROOT" -name "Dockerfile*" -exec cp {} "$BACKUP_PATH/configs/" \; 2>/dev/null || true
    
    info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
}

# Backup –ª–æ–≥–æ–≤
backup_logs() {
    log "Backup –ª–æ–≥–æ–≤..."
    
    if [ -d "$PROJECT_ROOT/logs" ]; then
        # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –ª–æ–≥–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
        find "$PROJECT_ROOT/logs" -name "*.log" -mtime -7 -exec cp {} "$BACKUP_PATH/logs/" \; 2>/dev/null || true
        
        # –°–∂–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        find "$PROJECT_ROOT/logs" -name "*.log" -mtime +7 -exec gzip {} \; 2>/dev/null || true
        
        info "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    else
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# Backup state —Ñ–∞–π–ª–æ–≤
backup_state() {
    log "Backup state —Ñ–∞–π–ª–æ–≤..."
    
    if [ -d "$PROJECT_ROOT/state" ]; then
        cp -r "$PROJECT_ROOT/state/"* "$BACKUP_PATH/state/" 2>/dev/null || true
        info "State —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    fi
}

# Backup —Å–µ–∫—Ä–µ—Ç–æ–≤ (–±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
backup_secrets() {
    log "Backup —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ–∫—Ä–µ—Ç–æ–≤..."
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–µ–∫—Ä–µ—Ç–æ–≤ –±–µ–∑ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if [ -d "$PROJECT_ROOT/secrets" ]; then
        find "$PROJECT_ROOT/secrets" -type f -exec basename {} \; > "$BACKUP_PATH/secrets/secrets_list.txt" 2>/dev/null || true
        info "–°–ø–∏—Å–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)"
    fi
    
    # Backup .env.example —Ñ–∞–π–ª–æ–≤
    find "$PROJECT_ROOT" -name ".env.example" -exec cp {} "$BACKUP_PATH/secrets/" \; 2>/dev/null || true
}

# Backup –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
backup_monitoring() {
    log "Backup –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    if [ -d "$PROJECT_ROOT/monitoring" ]; then
        # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        find "$PROJECT_ROOT/monitoring" -name "*.yml" -exec cp {} "$BACKUP_PATH/monitoring/" \; 2>/dev/null || true
        find "$PROJECT_ROOT/monitoring" -name "*.yaml" -exec cp {} "$BACKUP_PATH/monitoring/" \; 2>/dev/null || true
        find "$PROJECT_ROOT/monitoring" -name "*.json" -exec cp {} "$BACKUP_PATH/monitoring/" \; 2>/dev/null || true
        
        info "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
    fi
}

# Backup —Å–∫—Ä–∏–ø—Ç–æ–≤
backup_scripts() {
    log "Backup —Å–∫—Ä–∏–ø—Ç–æ–≤..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
    find "$PROJECT_ROOT" -name "*.sh" -exec cp {} "$BACKUP_PATH/scripts/" \; 2>/dev/null || true
    find "$PROJECT_ROOT" -name "manage_services.sh" -exec cp {} "$BACKUP_PATH/scripts/" \; 2>/dev/null || true
    
    # –ö–æ–ø–∏—Ä—É–µ–º Python —Å–∫—Ä–∏–ø—Ç—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    find "$PROJECT_ROOT" -maxdepth 1 -name "*.py" -exec cp {} "$BACKUP_PATH/scripts/" \; 2>/dev/null || true
    
    info "–°–∫—Ä–∏–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup
create_backup_metadata() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö backup..."
    
    cat > "$BACKUP_PATH/backup_info.json" << EOF
{
    "backup_name": "$BACKUP_NAME",
    "timestamp": "$TIMESTAMP",
    "date": "$(date -Iseconds)",
    "hostname": "$(hostname)",
    "user": "$(whoami)",
    "project_root": "$PROJECT_ROOT",
    "backup_version": "1.0",
    "components": {
        "database": $([ -f "$BACKUP_PATH/database/mirai.db" ] && echo "true" || echo "false"),
        "configs": $([ -d "$BACKUP_PATH/configs" ] && echo "true" || echo "false"),
        "logs": $([ -d "$BACKUP_PATH/logs" ] && echo "true" || echo "false"),
        "state": $([ -d "$BACKUP_PATH/state" ] && echo "true" || echo "false"),
        "monitoring": $([ -d "$BACKUP_PATH/monitoring" ] && echo "true" || echo "false"),
        "scripts": $([ -d "$BACKUP_PATH/scripts" ] && echo "true" || echo "false")
    },
    "total_size": "$(du -sh "$BACKUP_PATH" | cut -f1)"
}
EOF

    info "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ backup —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–∂–∞—Ç–∏–µ backup
compress_backup() {
    log "–°–∂–∞—Ç–∏–µ backup..."
    
    cd "$BACKUP_DIR"
    tar -czf "${BACKUP_NAME}.tar.gz" "$BACKUP_NAME"
    
    if [ $? -eq 0 ]; then
        rm -rf "$BACKUP_PATH"
        info "Backup —Å–∂–∞—Ç: ${BACKUP_NAME}.tar.gz"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        SIZE=$(du -sh "${BACKUP_NAME}.tar.gz" | cut -f1)
        info "–†–∞–∑–º–µ—Ä backup: $SIZE"
    else
        error "–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è backup"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤
cleanup_old_backups() {
    log "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö backup'–æ–≤..."
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 backup'–æ–≤
    cd "$BACKUP_DIR"
    ls -t mirai_backup_*.tar.gz 2>/dev/null | tail -n +8 | xargs rm -f 2>/dev/null || true
    
    REMAINING=$(ls -1 mirai_backup_*.tar.gz 2>/dev/null | wc -l)
    info "–û—Å—Ç–∞–≤–ª–µ–Ω–æ backup'–æ–≤: $REMAINING"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ backup'–∞
verify_backup() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ backup'–∞..."
    
    BACKUP_FILE="$BACKUP_DIR/${BACKUP_NAME}.tar.gz"
    
    if [ -f "$BACKUP_FILE" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞
        if tar -tzf "$BACKUP_FILE" >/dev/null 2>&1; then
            info "‚úÖ Backup –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"
            return 0
        else
            error "‚ùå Backup –ø–æ–≤—Ä–µ–∂–¥–µ–Ω!"
            return 1
        fi
    else
        error "‚ùå Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        return 1
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ backup
send_backup_notification() {
    local status=$1
    local message=$2
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Alert API
    if curl -s --max-time 5 "http://localhost:9998/alerts/health" >/dev/null 2>&1; then
        local level="info"
        if [ "$status" != "success" ]; then
            level="warning"
        fi
        
        curl -s -X POST "http://localhost:9998/alerts/manual" \
            -H "Content-Type: application/json" \
            -d "{
                \"title\": \"üíæ Backup System\",
                \"message\": \"$message\",
                \"level\": \"$level\",
                \"alert_type\": \"system\"
            }" >/dev/null 2>&1 || true
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üíæ Mirai Agent - –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
    echo "=============================================="
    
    log "–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã backup..."
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º backup
    create_backup_structure
    backup_database
    backup_configs
    backup_logs
    backup_state
    backup_secrets
    backup_monitoring
    backup_scripts
    create_backup_metadata
    
    # –°–∂–∏–º–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    if compress_backup && verify_backup; then
        cleanup_old_backups
        
        SIZE=$(du -sh "$BACKUP_DIR/${BACKUP_NAME}.tar.gz" | cut -f1)
        SUCCESS_MSG="Backup —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${BACKUP_NAME}.tar.gz (—Ä–∞–∑–º–µ—Ä: $SIZE)"
        
        log "‚úÖ $SUCCESS_MSG"
        send_backup_notification "success" "$SUCCESS_MSG"
        
        echo ""
        echo "üìÅ Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $BACKUP_DIR/${BACKUP_NAME}.tar.gz"
        echo "üìä –†–∞–∑–º–µ—Ä: $SIZE"
        echo "üïí –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: $(date)"
        
        return 0
    else
        ERROR_MSG="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup'–∞"
        error "‚ùå $ERROR_MSG"
        send_backup_notification "error" "$ERROR_MSG"
        return 1
    fi
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup
restore_backup() {
    local backup_file=$1
    
    if [ -z "$backup_file" ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 restore <backup_file.tar.gz>"
        return 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        error "Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        return 1
    fi
    
    log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup: $backup_file"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    TEMP_DIR=$(mktemp -d)
    
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º backup
    tar -xzf "$backup_file" -C "$TEMP_DIR"
    
    BACKUP_CONTENT=$(find "$TEMP_DIR" -mindepth 1 -maxdepth 1 -type d)
    
    if [ -z "$BACKUP_CONTENT" ]; then
        error "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π backup —Ñ–∞–π–ª"
        rm -rf "$TEMP_DIR"
        return 1
    fi
    
    BACKUP_CONTENT=$(basename "$BACKUP_CONTENT")
    
    log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if [ -f "$TEMP_DIR/$BACKUP_CONTENT/database/mirai.db" ]; then
        cp "$TEMP_DIR/$BACKUP_CONTENT/database/mirai.db" "$PROJECT_ROOT/state/"
        info "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [ -d "$TEMP_DIR/$BACKUP_CONTENT/configs" ]; then
        mkdir -p "$PROJECT_ROOT/configs"
        cp -r "$TEMP_DIR/$BACKUP_CONTENT/configs/"* "$PROJECT_ROOT/configs/" 2>/dev/null || true
        info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª—è–µ–º state
    if [ -d "$TEMP_DIR/$BACKUP_CONTENT/state" ]; then
        mkdir -p "$PROJECT_ROOT/state"
        cp -r "$TEMP_DIR/$BACKUP_CONTENT/state/"* "$PROJECT_ROOT/state/" 2>/dev/null || true
        info "State —Ñ–∞–π–ª—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    rm -rf "$TEMP_DIR"
    
    log "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    send_backup_notification "success" "–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ backup: $(basename "$backup_file")"
}

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö backup'–æ–≤
list_backups() {
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ backup'—ã:"
    echo "======================"
    
    if [ -d "$BACKUP_DIR" ]; then
        ls -lah "$BACKUP_DIR"/mirai_backup_*.tar.gz 2>/dev/null | while read line; do
            echo "$line"
        done
    else
        echo "Backup'—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-backup}" in
    "backup")
        main
        ;;
    "restore")
        restore_backup "$2"
        ;;
    "list")
        list_backups
        ;;
    "help"|"--help"|"-h")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [backup|restore|list|help]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  backup          - –°–æ–∑–¥–∞—Ç—å backup (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  restore <file>  - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup —Ñ–∞–π–ª–∞"
        echo "  list           - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ backup'—ã"
        echo "  help           - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        ;;
    *)
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac