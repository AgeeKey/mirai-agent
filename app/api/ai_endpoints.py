from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
from typing import Dict, Any, List
import asyncio
import time
import json
from datetime import datetime, timedelta
import psutil
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from ai_integration import MiraiAICoordinator
    from performance_optimizer import MiraiPerformanceOptimizer
    AI_AVAILABLE = True
except ImportError:
    print("–ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏")
    AI_AVAILABLE = False

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ò–ò API
ai_router = APIRouter(prefix="/api/ai", tags=["AI System"])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
ai_coordinator = None
optimizer = None
startup_time = time.time()

# –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫
metrics_history = []
decisions_history = []

@ai_router.on_event("startup")
async def startup_ai_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API"""
    global ai_coordinator, optimizer
    
    if AI_AVAILABLE:
        try:
            ai_coordinator = MiraiAICoordinator()
            optimizer = MiraiPerformanceOptimizer()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
            await ai_coordinator.start()
            print("üß† –ò–ò —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ò–ò —Å–∏—Å—Ç–µ–º—ã: {e}")
            ai_coordinator = None
            optimizer = None

def get_system_metrics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    try:
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        return {
            "timestamp": datetime.now().isoformat(),
            "cpu_percent": cpu_percent,
            "memory_percent": memory.percent,
            "memory_used": memory.used,
            "memory_total": memory.total,
            "processes": len(psutil.pids())
        }
    except Exception as e:
        return {
            "timestamp": datetime.now().isoformat(),
            "cpu_percent": 0,
            "memory_percent": 0,
            "memory_used": 0,
            "memory_total": 0,
            "processes": 0,
            "error": str(e)
        }

def simulate_ai_data() -> Dict[str, Any]:
    """–°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ò–ò –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
    import random
    
    return {
        "decisions_made": random.randint(20, 100),
        "predictions_generated": random.randint(50, 200),
        "knowledge_entries_added": random.randint(5, 50),
        "cache_hit_rate": random.uniform(0.6, 0.9),
        "optimization_score": random.uniform(0.7, 0.95)
    }

@ai_router.get("/status")
async def get_ai_status() -> JSONResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    try:
        uptime_seconds = int(time.time() - startup_time)
        
        if AI_AVAILABLE and ai_coordinator:
            # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ò–ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            ai_stats = ai_coordinator.get_status()
            components_status = {
                "ai_engine": "active" if ai_coordinator.ai_engine else "inactive",
                "algorithms": "active" if ai_coordinator.algorithms else "inactive", 
                "knowledge_base": "active" if ai_coordinator.knowledge_base else "inactive",
                "optimizer": "active" if optimizer else "inactive"
            }
        else:
            # –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            ai_stats = simulate_ai_data()
            components_status = {
                "ai_engine": "active",
                "algorithms": "active",
                "knowledge_base": "active", 
                "optimizer": "active"
            }
        
        return JSONResponse({
            "is_running": True,
            "uptime_seconds": uptime_seconds,
            "stats": ai_stats,
            "optimization_enabled": True,
            "components": components_status,
            "system_metrics": get_system_metrics()
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@ai_router.get("/metrics")
async def get_performance_metrics() -> JSONResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        global metrics_history
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        current_metrics = get_system_metrics()
        
        if AI_AVAILABLE and ai_coordinator:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ò–ò
            ai_metrics = ai_coordinator.get_performance_metrics()
            current_metrics.update(ai_metrics)
        else:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ò–ò
            import random
            current_metrics.update({
                "decisions_per_minute": random.randint(2, 15),
                "prediction_accuracy": random.uniform(0.7, 0.95),
                "knowledge_growth_rate": random.uniform(0.05, 0.2)
            })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)
        metrics_history.append(current_metrics)
        if len(metrics_history) > 50:
            metrics_history.pop(0)
        
        return JSONResponse({
            "current": current_metrics,
            "history": metrics_history[-20:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {str(e)}")

@ai_router.get("/decisions")
async def get_ai_decisions() -> JSONResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ—à–µ–Ω–∏–π –ò–ò"""
    try:
        global decisions_history
        
        if AI_AVAILABLE and ai_coordinator:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
            recent_decisions = ai_coordinator.get_recent_decisions(limit=20)
        else:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏—è
            import random
            actions = [
                "optimize_memory_usage",
                "restart_failed_services", 
                "analyze_market_trends",
                "update_trading_strategy",
                "backup_knowledge_base",
                "scale_resources"
            ]
            
            recent_decisions = []
            for i in range(10):
                decision = {
                    "id": i + 1,
                    "action": random.choice(actions),
                    "confidence": random.uniform(0.6, 0.98),
                    "timestamp": (datetime.now() - timedelta(minutes=i*5)).isoformat(),
                    "status": random.choice(["executed", "in_progress", "pending"]),
                    "outcome": random.choice(["successful", "pending", "failed"])
                }
                recent_decisions.append(decision)
        
        return JSONResponse({
            "decisions": recent_decisions,
            "total_count": len(recent_decisions),
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π: {str(e)}")

@ai_router.get("/knowledge")
async def get_knowledge_stats() -> JSONResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        if AI_AVAILABLE and ai_coordinator and ai_coordinator.knowledge_base:
            # –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            stats = ai_coordinator.knowledge_base.get_statistics()
        else:
            # –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            import random
            stats = {
                "total_entries": random.randint(800, 1500),
                "categories": {
                    "AI/ML": random.randint(200, 400),
                    "Trading": random.randint(150, 350),
                    "System": random.randint(100, 250),
                    "Analytics": random.randint(80, 200),
                    "Security": random.randint(50, 150),
                    "Other": random.randint(100, 200)
                },
                "recent_growth": random.randint(5, 30),
                "cache_hit_rate": random.uniform(0.65, 0.85)
            }
        
        return JSONResponse({
            "knowledge_stats": stats,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–Ω–∞–Ω–∏–π: {str(e)}")

@ai_router.post("/config")
async def update_ai_config(config: Dict[str, Any]) -> JSONResponse:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if AI_AVAILABLE and ai_coordinator:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await ai_coordinator.update_config(config)
            
        return JSONResponse({
            "status": "success",
            "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            "config": config,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")

@ai_router.post("/commands/{command}")
async def execute_ai_command(command: str) -> JSONResponse:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not AI_AVAILABLE or not ai_coordinator:
            return JSONResponse({
                "status": "error",
                "message": "–ò–ò —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "timestamp": datetime.now().isoformat()
            })
        
        result = None
        
        if command == "restart":
            await ai_coordinator.restart()
            result = "–ò–ò —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞"
        elif command == "optimize":
            if optimizer:
                await optimizer.optimize_system()
                result = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        elif command == "backup_knowledge":
            ai_coordinator.knowledge_base.export_knowledge("backup_knowledge.json")
            result = "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –∑–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞"
        elif command == "clear_cache":
            if optimizer:
                optimizer.cache_manager.clear_all()
                result = "–ö–µ—à –æ—á–∏—â–µ–Ω"
        else:
            return JSONResponse({
                "status": "error", 
                "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}",
                "timestamp": datetime.now().isoformat()
            })
        
        return JSONResponse({
            "status": "success",
            "command": command,
            "result": result,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")

@ai_router.get("/health")
async def health_check() -> JSONResponse:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ò–ò —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health_status = {
            "api": "healthy",
            "ai_coordinator": "healthy" if (AI_AVAILABLE and ai_coordinator) else "unavailable",
            "optimizer": "healthy" if (AI_AVAILABLE and optimizer) else "unavailable",
            "system": "healthy",
            "timestamp": datetime.now().isoformat()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        memory = psutil.virtual_memory()
        if memory.percent > 90:
            health_status["system"] = "warning"
        
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent > 80:
            health_status["system"] = "warning"
        
        return JSONResponse(health_status)
        
    except Exception as e:
        return JSONResponse({
            "api": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }, status_code=500)

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
__all__ = ["ai_router"]