#!/bin/bash

# üåê Mirai Domains Setup Script
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–æ–≤ aimirai.online –∏ aimirai.info

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

print_banner() {
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë${NC}                    ${BLUE}üåê MIRAI DOMAINS SETUP${NC}                     ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïë${NC}              ${GREEN}aimirai.online & aimirai.info${NC}                 ${PURPLE}‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

check_domain_dns() {
    local domain="$1"
    local server_ip="212.56.33.1"
    
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –¥–ª—è $domain..."
    
    if nslookup "$domain" | grep -q "$server_ip"; then
        print_status "$domain —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ $server_ip"
        return 0
    else
        local current_ip=$(nslookup "$domain" | grep "Address:" | tail -1 | awk '{print $2}')
        print_warning "$domain —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ $current_ip, –∞ –Ω–µ –Ω–∞ $server_ip"
        return 1
    fi
}

install_nginx() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx..."
    
    if ! command -v nginx &> /dev/null; then
        print_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Nginx..."
        apt update
        apt install -y nginx
        systemctl enable nginx
        print_status "Nginx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        print_status "Nginx —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

setup_ssl_certificates() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    # Install certbot if not present
    if ! command -v certbot &> /dev/null; then
        print_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Certbot..."
        apt install -y certbot python3-certbot-nginx
    fi
    
    # Get certificates for both domains
    local domains=("aimirai.online" "aimirai.info")
    
    for domain in "${domains[@]}"; do
        if [ ! -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]; then
            print_info "–ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è $domain..."
            
            # First, create a temporary nginx config to pass verification
            cat > "/etc/nginx/sites-available/temp-$domain" << EOF
server {
    listen 80;
    server_name $domain www.$domain;
    
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}
EOF
            
            ln -sf "/etc/nginx/sites-available/temp-$domain" "/etc/nginx/sites-enabled/temp-$domain"
            nginx -t && systemctl reload nginx
            
            # Get certificate
            certbot certonly --webroot -w /var/www/html -d "$domain" -d "www.$domain" --non-interactive --agree-tos --email admin@aimirai.online
            
            if [ $? -eq 0 ]; then
                print_status "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è $domain"
                rm -f "/etc/nginx/sites-enabled/temp-$domain"
            else
                print_error "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è $domain"
            fi
        else
            print_status "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $domain —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        fi
    done
}

setup_nginx_config() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx..."
    
    # Remove default site
    rm -f /etc/nginx/sites-enabled/default
    
    # Copy our configuration
    cp /root/mirai-agent/nginx/mirai-domains.conf /etc/nginx/sites-available/mirai-domains
    ln -sf /etc/nginx/sites-available/mirai-domains /etc/nginx/sites-enabled/mirai-domains
    
    # Test configuration
    if nginx -t; then
        print_status "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        systemctl reload nginx
        print_status "Nginx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω"
    else
        print_error "–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx"
        return 1
    fi
}

setup_firewall() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    # Allow HTTP and HTTPS
    ufw allow 80
    ufw allow 443
    ufw allow 8000  # API port
    ufw allow 3000  # Web port
    
    print_status "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

check_services() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Check if our services are running
    if curl -s http://localhost:8000 > /dev/null; then
        print_status "API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000"
    else
        print_warning "API —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000"
    fi
    
    if curl -s http://localhost:3000 > /dev/null; then
        print_status "Web —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000"
    else
        print_warning "Web —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000"
    fi
}

test_domains() {
    print_info "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤..."
    
    local domains=("aimirai.online" "aimirai.info")
    
    for domain in "${domains[@]}"; do
        print_info "–¢–µ—Å—Ç–∏—Ä—É—é $domain..."
        
        # Test HTTP redirect
        local http_status=$(curl -s -o /dev/null -w "%{http_code}" "http://$domain" || echo "000")
        if [ "$http_status" = "301" ] || [ "$http_status" = "302" ]; then
            print_status "$domain: HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ($http_status)"
        else
            print_warning "$domain: HTTP —Å—Ç–∞—Ç—É—Å $http_status"
        fi
        
        # Test HTTPS
        if curl -s -k "https://$domain" > /dev/null; then
            print_status "$domain: HTTPS –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            print_warning "$domain: HTTPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
    done
}

create_domain_routing() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ–º–µ–Ω–æ–≤..."
    
    # Create a simple script to help with domain-specific content
    cat > /root/mirai-agent/scripts/domain-router.js << 'EOF'
// Domain-specific routing for Mirai
const domainRouting = {
    'aimirai.online': {
        name: 'Trading Platform',
        theme: 'trading',
        features: ['trading', 'portfolio', 'analytics', 'api'],
        description: 'Professional AI Trading Platform'
    },
    'aimirai.info': {
        name: 'Mirai-chan Studio',
        theme: 'studio',
        features: ['character', 'chat', 'voice', 'personality'],
        description: 'Mirai-chan Personal Space'
    }
};

function getDomainConfig(hostname) {
    const domain = hostname.replace('www.', '');
    return domainRouting[domain] || domainRouting['aimirai.online'];
}

module.exports = { domainRouting, getDomainConfig };
EOF
    
    print_status "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–æ–º–µ–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–∞"
}

setup_auto_renewal() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
    
    # Add cron job for certificate renewal
    (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -
    
    print_status "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

show_status() {
    echo ""
    echo "üåê === –°–¢–ê–¢–£–° –î–û–ú–ï–ù–û–í ==="
    echo ""
    
    print_info "–î–æ–º–µ–Ω—ã:"
    echo "  üî• aimirai.online  - –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
    echo "  üé® aimirai.info    - –°—Ç—É–¥–∏—è Mirai-chan"
    echo ""
    
    print_info "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:"
    for domain in "aimirai.online" "aimirai.info"; do
        if [ -f "/etc/letsencrypt/live/$domain/fullchain.pem" ]; then
            local expiry=$(openssl x509 -in "/etc/letsencrypt/live/$domain/fullchain.pem" -noout -dates | grep "notAfter" | cut -d= -f2)
            echo "  ‚úÖ $domain - –¥–æ $expiry"
        else
            echo "  ‚ùå $domain - —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        fi
    done
    
    echo ""
    print_info "Nginx —Å—Ç–∞—Ç—É—Å:"
    if systemctl is-active --quiet nginx; then
        echo "  ‚úÖ Nginx –∞–∫—Ç–∏–≤–µ–Ω"
    else
        echo "  ‚ùå Nginx –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    fi
    
    echo ""
    print_info "–¢–µ—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "  üîó https://aimirai.online     - –¢–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
    echo "  üîó https://aimirai.online/api - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    echo "  üîó https://aimirai.info      - –°—Ç—É–¥–∏—è Mirai-chan"
}

main() {
    print_banner
    
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è Mirai Agent..."
    
    # Check if running as root
    if [ "$EUID" -ne 0 ]; then
        print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root"
        exit 1
    fi
    
    # Check DNS
    check_domain_dns "aimirai.online"
    check_domain_dns "aimirai.info"
    
    # Install and configure
    install_nginx
    setup_firewall
    setup_ssl_certificates
    setup_nginx_config
    create_domain_routing
    setup_auto_renewal
    
    # Test everything
    check_services
    test_domains
    
    echo ""
    print_status "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    
    show_status
    
    echo ""
    print_info "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DNS –∑–∞–ø–∏—Å–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ 212.56.33.1"
    echo "  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã: ./manage_services.sh start"
    echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É: https://aimirai.online"
    echo "  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è aimirai.info"
}

# Parse command line arguments
case "${1:-setup}" in
    "setup") main ;;
    "status") show_status ;;
    "test") test_domains ;;
    "ssl") setup_ssl_certificates ;;
    *) 
        echo "Usage: $0 {setup|status|test|ssl}"
        echo "  setup  - Full domain setup"
        echo "  status - Show current status"
        echo "  test   - Test domain connectivity"
        echo "  ssl    - Renew SSL certificates"
        ;;
esac