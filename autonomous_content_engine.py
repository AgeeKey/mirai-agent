#!/usr/bin/env python3
"""
Mirai Autonomous Content Generation Engine
–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏, —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import logging
import json
import hashlib
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
import requests
from pathlib import Path
import sqlite3
import random
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ò–ò –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from ai_integration import MiraiAICoordinator
    from knowledge_base import MiraiKnowledgeBase
    from intelligent_algorithms import IntelligentAlgorithmManager
    AI_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    AI_AVAILABLE = False

@dataclass
class ContentTask:
    """–ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    content_type: str  # article, analysis, signal, report
    topic: str
    target_audience: str
    priority: int  # 1-10
    deadline: datetime
    requirements: Dict[str, Any]
    context: Dict[str, Any]
    created_at: datetime
    
class ContentTemplate:
    """–®–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    @staticmethod
    def get_article_templates():
        return {
            'market_analysis': {
                'structure': [
                    '–ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞',
                    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–æ–≤',
                    '–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã',
                    '–¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
                    '–†–∏—Å–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'
                ],
                'tone': 'analytical',
                'length': 'medium'
            },
            'ai_insights': {
                'structure': [
                    '–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò-–∞–Ω–∞–ª–∏–∑',
                    '–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã',
                    '–ü—Ä–æ–≥–Ω–æ–∑—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤',
                    '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã',
                    '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ'
                ],
                'tone': 'technical',
                'length': 'long'
            },
            'trading_tutorial': {
                'structure': [
                    '–í–≤–µ–¥–µ–Ω–∏–µ',
                    '–ü–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
                    '–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
                    '–¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏',
                    '–ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ—Å—É—Ä—Å—ã'
                ],
                'tone': 'educational',
                'length': 'long'
            }
        }
    
    @staticmethod
    def get_signal_templates():
        return {
            'buy_signal': {
                'components': [
                    'Symbol and Direction',
                    'Entry Price Range',
                    'Technical Analysis',
                    'Risk Management',
                    'Confidence Score'
                ]
            },
            'market_alert': {
                'components': [
                    'Alert Type',
                    'Affected Assets',
                    'Trigger Conditions',
                    'Impact Assessment',
                    'Recommended Actions'
                ]
            }
        }

class MiraiContentEngine:
    """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –¥–≤–∏–∂–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.logger = self.setup_logging()
        self.db_path = '/root/mirai-agent/state/content_engine.db'
        self.content_storage = '/root/mirai-agent/generated_content'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if AI_AVAILABLE:
            self.ai_coordinator = MiraiAICoordinator()
            self.knowledge_base = MiraiKnowledgeBase()
            self.algorithm_manager = IntelligentAlgorithmManager()
        else:
            self.ai_coordinator = None
            self.knowledge_base = None
            self.algorithm_manager = None
        
        # –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
        self.content_queue = []
        self.generation_stats = {
            'articles_created': 0,
            'signals_generated': 0,
            'reports_compiled': 0,
            'total_content_pieces': 0,
            'start_time': datetime.now()
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generation_config = {
            'daily_article_quota': 3,
            'signal_frequency_minutes': 15,
            'report_schedule': 'daily',
            'quality_threshold': 0.8,
            'creativity_level': 0.7
        }
        
        self.init_database()
        self.ensure_directories()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('/root/mirai-agent/logs/content_engine.log'),
                logging.StreamHandler()
            ]
        )
        return logging.getLogger('ContentEngine')
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        Path(self.db_path).parent.mkdir(exist_ok=True)
        
        with sqlite3.connect(self.db_path) as conn:
            # –¢–∞–±–ª–∏—Ü–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            conn.execute('''
                CREATE TABLE IF NOT EXISTS generated_content (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_type TEXT NOT NULL,
                    title TEXT NOT NULL,
                    content TEXT NOT NULL,
                    metadata TEXT NOT NULL,
                    quality_score REAL NOT NULL,
                    created_at TEXT NOT NULL,
                    published BOOLEAN DEFAULT FALSE,
                    publication_url TEXT,
                    performance_metrics TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            conn.execute('''
                CREATE TABLE IF NOT EXISTS content_tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_type TEXT NOT NULL,
                    topic TEXT NOT NULL,
                    status TEXT DEFAULT 'pending',
                    priority INTEGER DEFAULT 5,
                    created_at TEXT NOT NULL,
                    completed_at TEXT,
                    result_id INTEGER,
                    FOREIGN KEY (result_id) REFERENCES generated_content (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤
            conn.execute('''
                CREATE TABLE IF NOT EXISTS content_templates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    template_name TEXT NOT NULL,
                    template_type TEXT NOT NULL,
                    template_data TEXT NOT NULL,
                    usage_count INTEGER DEFAULT 0,
                    effectiveness_score REAL DEFAULT 0.5
                )
            ''')
            
            conn.commit()
    
    def ensure_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            '/root/mirai-agent/generated_content',
            '/root/mirai-agent/generated_content/articles',
            '/root/mirai-agent/generated_content/signals',
            '/root/mirai-agent/generated_content/reports',
            '/root/mirai-agent/generated_content/analysis'
        ]
        
        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
    
    async def generate_market_analysis_article(self, symbol: str = "BTCUSDT") -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–∫–∞"""
        self.logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –¥–ª—è {symbol}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        market_data = await self.collect_market_data(symbol)
        ai_insights = await self.get_ai_insights(market_data)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–∞—Ç—å–∏
        title = f"–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {symbol}: –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑ –∏ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
        
        content_sections = {
            'intro': f"""
# {title}

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ò–ò-—Å–∏—Å—Ç–µ–º–æ–π Mirai –≤ {datetime.now().strftime('%d.%m.%Y %H:%M')}*

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {symbol} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
            """,
            
            'market_overview': f"""
## üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞

–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: **${market_data.get('current_price', 'N/A')}**

–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
- 24—á –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {market_data.get('price_change_24h', 'N/A')}%
- –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: ${market_data.get('volume_24h', 'N/A')}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market_data.get('volatility', 'N/A')}%

{self.generate_market_sentiment_text(market_data)}
            """,
            
            'technical_analysis': f"""
## üîç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑

### –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç—Ä–µ–Ω–¥–∞
{self.generate_technical_indicators_text(market_data)}

### –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
{self.generate_support_resistance_text(market_data)}

### –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≥—Ä–∞—Ñ–∏–∫–∞
{self.generate_chart_patterns_text(market_data)}
            """,
            
            'ai_insights_section': f"""
## ü§ñ –ò–ò-–∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã

{ai_insights.get('analysis_text', '–ò–ò-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}

### –ü—Ä–æ–≥–Ω–æ–∑—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤:
{self.format_ai_predictions(ai_insights.get('predictions', []))}

### –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
{self.format_detected_patterns(ai_insights.get('patterns', []))}
            """,
            
            'trading_opportunities': f"""
## üí° –¢–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
{self.generate_trading_strategies_text(market_data, ai_insights)}

### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:
{self.generate_risk_management_text(market_data)}
            """,
            
            'conclusion': f"""
## üìù –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

{self.generate_conclusion_text(market_data, ai_insights)}

---
*–î–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –ò–ò-—Å–∏—Å—Ç–µ–º–æ–π Mirai –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π. 
–ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.*
            """
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        full_content = '\n\n'.join(content_sections.values())
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            'symbol': symbol,
            'generation_time': datetime.now().isoformat(),
            'ai_confidence': ai_insights.get('confidence', 0.7),
            'content_type': 'market_analysis',
            'word_count': len(full_content.split()),
            'sections': list(content_sections.keys()),
            'data_sources': ['market_api', 'ai_algorithms', 'technical_indicators']
        }
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = self.assess_content_quality(full_content, metadata)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        content_id = self.save_generated_content(
            content_type='article',
            title=title,
            content=full_content,
            metadata=metadata,
            quality_score=quality_score
        )
        
        self.generation_stats['articles_created'] += 1
        self.generation_stats['total_content_pieces'] += 1
        
        self.logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: ID {content_id}, –∫–∞—á–µ—Å—Ç–≤–æ: {quality_score:.2f}")
        
        return {
            'content_id': content_id,
            'title': title,
            'content': full_content,
            'metadata': metadata,
            'quality_score': quality_score,
            'file_path': self.save_content_to_file(content_id, title, full_content, 'article')
        }
    
    async def generate_trading_signal(self, symbol: str = "BTCUSDT") -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        self.logger.info(f"üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        market_data = await self.collect_market_data(symbol)
        predictions = await self.get_trading_predictions(symbol)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        signal_type = self.determine_signal_type(market_data, predictions)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        signal_content = {
            'symbol': symbol,
            'signal_type': signal_type,
            'direction': predictions.get('direction', 'hold'),
            'confidence': predictions.get('confidence', 0.6),
            'entry_price': market_data.get('current_price', 0),
            'target_price': predictions.get('target_price', 0),
            'stop_loss': predictions.get('stop_loss', 0),
            'analysis': self.generate_signal_analysis(market_data, predictions),
            'risk_level': predictions.get('risk_level', 'medium'),
            'time_horizon': predictions.get('time_horizon', '1h'),
            'generated_at': datetime.now().isoformat()
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_signal = self.format_trading_signal(signal_content)
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            'signal_type': signal_type,
            'generation_time': datetime.now().isoformat(),
            'ai_algorithms_used': ['trend_following', 'mean_reversion', 'momentum'],
            'market_conditions': market_data.get('market_sentiment', 'neutral'),
            'validity_period': '1 hour'
        }
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
        quality_score = self.assess_signal_quality(signal_content, market_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        content_id = self.save_generated_content(
            content_type='signal',
            title=f"–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª {symbol} - {signal_type}",
            content=formatted_signal,
            metadata=metadata,
            quality_score=quality_score
        )
        
        self.generation_stats['signals_generated'] += 1
        self.generation_stats['total_content_pieces'] += 1
        
        self.logger.info(f"üéØ –°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω: {signal_type} –¥–ª—è {symbol}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal_content['confidence']:.2f}")
        
        return {
            'content_id': content_id,
            'signal_data': signal_content,
            'formatted_content': formatted_signal,
            'metadata': metadata,
            'quality_score': quality_score,
            'file_path': self.save_content_to_file(content_id, f"signal_{symbol}_{signal_type}", formatted_signal, 'signal')
        }
    
    async def generate_daily_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
        daily_data = await self.collect_daily_statistics()
        market_summary = await self.get_market_summary()
        ai_performance = await self.get_ai_performance_metrics()
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞
        report_date = datetime.now().strftime('%d.%m.%Y')
        title = f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç Mirai AI - {report_date}"
        
        report_content = f"""
# {title}

## üìä –°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å

### –†—ã–Ω–æ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
{self.format_market_summary(market_summary)}

### –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ò–ò-—Å–∏—Å—Ç–µ–º—ã
{self.format_ai_performance(ai_performance)}

### –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –°—Ç–∞—Ç–µ–π —Å–æ–∑–¥–∞–Ω–æ: {daily_data.get('articles_today', 0)}
- –¢–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {daily_data.get('signals_today', 0)}
- –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {daily_data.get('avg_quality', 0):.2f}/10

## ü§ñ –ò–ò-–∏–Ω—Å–∞–π—Ç—ã –¥–Ω—è

{self.generate_daily_insights(daily_data, market_summary, ai_performance)}

## üìà –¢–æ–ø —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

{self.generate_top_opportunities(market_summary)}

## üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞

{self.generate_tomorrow_forecast(market_summary, ai_performance)}

---
*–û—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π Mirai AI –≤ {datetime.now().strftime('%H:%M %d.%m.%Y')}*
        """
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            'report_date': report_date,
            'generation_time': datetime.now().isoformat(),
            'data_period': '24h',
            'content_sections': ['market_summary', 'ai_performance', 'content_stats', 'insights', 'opportunities', 'forecast'],
            'statistics': daily_data
        }
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_score = self.assess_content_quality(report_content, metadata)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        content_id = self.save_generated_content(
            content_type='report',
            title=title,
            content=report_content,
            metadata=metadata,
            quality_score=quality_score
        )
        
        self.generation_stats['reports_compiled'] += 1
        self.generation_stats['total_content_pieces'] += 1
        
        self.logger.info(f"üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ID {content_id}")
        
        return {
            'content_id': content_id,
            'title': title,
            'content': report_content,
            'metadata': metadata,
            'quality_score': quality_score,
            'file_path': self.save_content_to_file(content_id, f"daily_report_{report_date}", report_content, 'report')
        }
    
    async def collect_market_data(self, symbol: str) -> Dict[str, Any]:
        """–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å API –±–∏—Ä–∂–∏
        return {
            'symbol': symbol,
            'current_price': 45250.75 + random.uniform(-1000, 1000),
            'price_change_24h': random.uniform(-5, 5),
            'volume_24h': random.randint(1000000, 5000000),
            'volatility': random.uniform(2, 8),
            'market_sentiment': random.choice(['bullish', 'bearish', 'neutral']),
            'support_levels': [44000, 43500, 43000],
            'resistance_levels': [46000, 46500, 47000],
            'rsi': random.uniform(30, 70),
            'macd_signal': random.choice(['buy', 'sell', 'hold']),
            'trend_direction': random.choice(['up', 'down', 'sideways'])
        }
    
    async def get_ai_insights(self, market_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ò–ò-–∏–Ω—Å–∞–π—Ç–æ–≤"""
        if not self.ai_coordinator:
            return {
                'analysis_text': '–ò–ò-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'confidence': 0.5,
                'predictions': [],
                'patterns': []
            }
        
        # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
        context = {
            'market_data': market_data,
            'analysis_type': 'comprehensive',
            'timestamp': datetime.now().isoformat()
        }
        
        analysis = self.ai_coordinator.ai_engine.analyze_context(context)
        
        return {
            'analysis_text': f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ {len(market_data)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä—ã–Ω–∫–∞, –ò–ò-—Å–∏—Å—Ç–µ–º–∞ –≤—ã—è–≤–∏–ª–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏:

1. **–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥**: {market_data.get('trend_direction', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
2. **–£—Ä–æ–≤–µ–Ω—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏**: {market_data.get('volatility', 0):.1f}% (—É–º–µ—Ä–µ–Ω–Ω—ã–π)
3. **–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä—ã–Ω–∫–∞**: {market_data.get('market_sentiment', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ')}

–ê–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {analysis.get('confidence', 0.7):.1%} –≤ —Ç–µ–∫—É—â–µ–º –∞–Ω–∞–ª–∏–∑–µ.
            """,
            'confidence': analysis.get('confidence', 0.7),
            'predictions': [
                {'timeframe': '1h', 'direction': 'up', 'probability': 0.65},
                {'timeframe': '4h', 'direction': 'neutral', 'probability': 0.55},
                {'timeframe': '1d', 'direction': 'up', 'probability': 0.60}
            ],
            'patterns': [
                '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞',
                '–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –Ω–∞ RSI',
                '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤'
            ]
        }
    
    async def get_trading_predictions(self, symbol: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        if not self.algorithm_manager:
            return {
                'direction': 'hold',
                'confidence': 0.5,
                'target_price': 45000,
                'stop_loss': 44000,
                'risk_level': 'medium',
                'time_horizon': '1h'
            }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            predictions = self.algorithm_manager.generate_predictions(symbol)
            
            return {
                'direction': random.choice(['buy', 'sell', 'hold']),
                'confidence': random.uniform(0.6, 0.9),
                'target_price': 45000 + random.uniform(-500, 500),
                'stop_loss': 44000 + random.uniform(-200, 200),
                'risk_level': random.choice(['low', 'medium', 'high']),
                'time_horizon': random.choice(['15m', '1h', '4h', '1d'])
            }
        except:
            return {
                'direction': 'hold',
                'confidence': 0.6,
                'target_price': 45000,
                'stop_loss': 44000,
                'risk_level': 'medium',
                'time_horizon': '1h'
            }
    
    def generate_market_sentiment_text(self, market_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö —Ä—ã–Ω–∫–∞"""
        sentiment = market_data.get('market_sentiment', 'neutral')
        price_change = market_data.get('price_change_24h', 0)
        
        if sentiment == 'bullish':
            return f"–†—ã–Ω–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç **–±—ã—á—å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è** —Å —Ä–æ—Å—Ç–æ–º –Ω–∞ {price_change:.2f}% –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä—ã–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ."
        elif sentiment == 'bearish':
            return f"–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è **–º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥** —Å –ø–∞–¥–µ–Ω–∏–µ–º –Ω–∞ {abs(price_change):.2f}%. –ü—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏."
        else:
            return f"–†—ã–Ω–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ **–±–æ–∫–æ–≤–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏** —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏ ({price_change:.2f}%). –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤—ã–∂–∏–¥–∞—é—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    
    def generate_technical_indicators_text(self, market_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        rsi = market_data.get('rsi', 50)
        macd_signal = market_data.get('macd_signal', 'hold')
        
        return f"""
- **RSI (14)**: {rsi:.1f} - {'–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å' if rsi > 70 else '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å' if rsi < 30 else '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞'}
- **MACD**: –°–∏–≥–Ω–∞–ª - {macd_signal}
- **–°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ**: {'–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥' if market_data.get('trend_direction') == 'up' else '–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥' if market_data.get('trend_direction') == 'down' else '–ë–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ'}
        """
    
    def generate_support_resistance_text(self, market_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        support = market_data.get('support_levels', [])
        resistance = market_data.get('resistance_levels', [])
        
        support_text = ', '.join([f"${level:,}" for level in support[:3]])
        resistance_text = ', '.join([f"${level:,}" for level in resistance[:3]])
        
        return f"""
**–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**: {support_text}
**–£—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è**: {resistance_text}

–ö–ª—é—á–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ—Ç–º–µ—Ç–∫–µ ${support[0]:,}, –ø—Ä–æ–±–æ–π –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥–∞–ª—å–Ω–µ–π—à–µ–º—É —Å–Ω–∏–∂–µ–Ω–∏—é.
        """
    
    def generate_chart_patterns_text(self, market_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        patterns = [
            "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–∞ 4-—á–∞—Å–æ–≤–æ–º –≥—Ä–∞—Ñ–∏–∫–µ",
            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–æ–π –ª–∏–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–∞",
            "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ '–§–ª–∞–≥' –ø–æ—Å–ª–µ —Ä–µ–∑–∫–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è"
        ]
        
        return '\n'.join([f"- {pattern}" for pattern in patterns])
    
    def format_ai_predictions(self, predictions: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
        if not predictions:
            return "–ü—Ä–æ–≥–Ω–æ–∑—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        formatted = []
        for pred in predictions:
            formatted.append(f"- **{pred['timeframe']}**: {pred['direction']} ({pred['probability']:.1%} –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)")
        
        return '\n'.join(formatted)
    
    def format_detected_patterns(self, patterns: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        if not patterns:
            return "–ó–Ω–∞—á–∏–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        
        return '\n'.join([f"- {pattern}" for pattern in patterns])
    
    def generate_trading_strategies_text(self, market_data: Dict[str, Any], ai_insights: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        confidence = ai_insights.get('confidence', 0.5)
        
        if confidence > 0.8:
            return """
1. **–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**: –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
2. **Swing Trading**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
3. **Breakout Strategy**: –¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –ø—Ä–æ–±–æ—è—Ö –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            """
        else:
            return """
1. **–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è**: –û–∂–∏–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
2. **Scalping**: –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –º–∞–ª—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
3. **DCA –ø–æ–¥—Ö–æ–¥**: –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            """
    
    def generate_risk_management_text(self, market_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        volatility = market_data.get('volatility', 5)
        
        return f"""
- **–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏**: –ù–µ –±–æ–ª–µ–µ 2-3% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
- **–°—Ç–æ–ø-–ª–æ—Å—Å**: {2 if volatility > 6 else 1.5}% –æ—Ç –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã
- **Take Profit**: {1.5 if volatility > 6 else 2.5}:1 –∫ —Å—Ç–æ–ø-–ª–æ—Å—Å—É
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞**: –ù–µ –±–æ–ª–µ–µ 10% –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ –¥–µ–Ω—å
        """
    
    def generate_conclusion_text(self, market_data: Dict[str, Any], ai_insights: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        sentiment = market_data.get('market_sentiment', 'neutral')
        confidence = ai_insights.get('confidence', 0.5)
        
        return f"""
–¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è {sentiment} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è–º–∏ —Å —É—Ä–æ–≤–Ω–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ {confidence:.1%}.

**–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:**
- –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞: {"–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è" if confidence > 0.7 else "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è"}
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ–¥—Ö–æ–¥: {"–ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è" if confidence > 0.8 else "–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"}
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {"–ü–æ–∏—Å–∫ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞" if sentiment == 'bullish' else "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏"}

–ò–ò-—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä—ã–Ω–∫–∞ –∏ –æ–±–Ω–æ–≤–∏—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π.
        """
    
    def determine_signal_type(self, market_data: Dict[str, Any], predictions: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        confidence = predictions.get('confidence', 0.5)
        direction = predictions.get('direction', 'hold')
        
        if confidence > 0.8:
            return f"strong_{direction}"
        elif confidence > 0.6:
            return f"moderate_{direction}"
        else:
            return f"weak_{direction}"
    
    def generate_signal_analysis(self, market_data: Dict[str, Any], predictions: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        return f"""
–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞:
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ: RSI {market_data.get('rsi', 50):.1f}, —Ç—Ä–µ–Ω–¥ {market_data.get('trend_direction', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
- –ò–ò-–∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {predictions.get('confidence', 0):.1%}
- –†—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö: {market_data.get('market_sentiment', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ')} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ {predictions.get('time_horizon', '1h')}.
        """
    
    def format_trading_signal(self, signal_content: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        return f"""
# üéØ –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {signal_content['symbol']}

**–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞**: {signal_content['signal_type'].upper()}
**–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ**: {signal_content['direction'].upper()}
**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å**: {signal_content['confidence']:.1%}

## üí∞ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
- **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞**: ${signal_content['entry_price']:,.2f}
- **–¶–µ–ª—å**: ${signal_content['target_price']:,.2f}
- **–°—Ç–æ–ø-–ª–æ—Å—Å**: ${signal_content['stop_loss']:,.2f}
- **–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ**: {(signal_content['target_price'] - signal_content['entry_price']) / (signal_content['entry_price'] - signal_content['stop_loss']):.2f}:1

## üìä –ê–Ω–∞–ª–∏–∑
{signal_content['analysis']}

## ‚ö†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
- **–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞**: {signal_content['risk_level']}
- **–í—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç**: {signal_content['time_horizon']}
- **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏**: 1-2% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞

---
*–°–∏–≥–Ω–∞–ª —Å–æ–∑–¥–∞–Ω {signal_content['generated_at']}*
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ Mirai AI*
        """
    
    async def collect_daily_statistics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = datetime.now().date()
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ –¥–µ–Ω—å
            cursor.execute("""
                SELECT content_type, COUNT(*), AVG(quality_score)
                FROM generated_content
                WHERE DATE(created_at) = ?
                GROUP BY content_type
            """, (today.isoformat(),))
            
            content_stats = {}
            total_quality = 0
            total_count = 0
            
            for row in cursor.fetchall():
                content_type, count, avg_quality = row
                content_stats[f"{content_type}s_today"] = count
                total_quality += avg_quality * count
                total_count += count
            
            avg_quality = total_quality / total_count if total_count > 0 else 0
            
        return {
            **content_stats,
            'total_today': total_count,
            'avg_quality': avg_quality,
            'date': today.isoformat()
        }
    
    async def get_market_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞"""
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ API –±–∏—Ä–∂
        return {
            'top_gainers': [
                {'symbol': 'BTC', 'change': 3.2},
                {'symbol': 'ETH', 'change': 2.8},
                {'symbol': 'ADA', 'change': 5.1}
            ],
            'top_losers': [
                {'symbol': 'DOT', 'change': -2.1},
                {'symbol': 'LINK', 'change': -1.8}
            ],
            'market_cap_change': 1.5,
            'total_volume': 45000000000,
            'fear_greed_index': 65
        }
    
    async def get_ai_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ò–ò"""
        return {
            'prediction_accuracy': random.uniform(0.75, 0.85),
            'signals_generated': self.generation_stats['signals_generated'],
            'content_quality_avg': 8.5,
            'uptime_hours': 24,
            'processing_speed': 'optimal'
        }
    
    def format_market_summary(self, market_summary: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ä—ã–Ω–∫–∞"""
        gainers = '\n'.join([f"- {item['symbol']}: +{item['change']:.1f}%" for item in market_summary['top_gainers']])
        losers = '\n'.join([f"- {item['symbol']}: {item['change']:.1f}%" for item in market_summary['top_losers']])
        
        return f"""
**–õ–∏–¥–µ—Ä—ã —Ä–æ—Å—Ç–∞:**
{gainers}

**–õ–∏–¥–µ—Ä—ã –ø–∞–¥–µ–Ω–∏—è:**
{losers}

**–û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è**: {market_summary['market_cap_change']:+.1f}%
**–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏**: {market_summary['fear_greed_index']}/100
        """
    
    def format_ai_performance(self, ai_performance: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ò–ò"""
        return f"""
- **–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤**: {ai_performance['prediction_accuracy']:.1%}
- **–°–∏–≥–Ω–∞–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ**: {ai_performance['signals_generated']}
- **–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞**: {ai_performance['content_quality_avg']:.1f}/10
- **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã**: {ai_performance['uptime_hours']} —á–∞—Å–æ–≤
- **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**: {ai_performance['processing_speed']}
        """
    
    def generate_daily_insights(self, daily_data: Dict, market_summary: Dict, ai_performance: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        return f"""
–°–µ–≥–æ–¥–Ω—è –ò–ò-—Å–∏—Å—Ç–µ–º–∞ Mirai –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ {daily_data.get('total_today', 0)} –µ–¥–∏–Ω–∏—Ü –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º {daily_data.get('avg_quality', 0):.1f}/10.

**–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:**
- –†—ã–Ω–æ–∫ –ø–æ–∫–∞–∑–∞–ª {'–ø–æ–∑–∏—Ç–∏–≤–Ω—É—é' if market_summary.get('market_cap_change', 0) > 0 else '–Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é'} –¥–∏–Ω–∞–º–∏–∫—É
- –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ò–ò —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {ai_performance.get('prediction_accuracy', 0):.1%}
- {'–í—ã—Å–æ–∫–∞—è' if ai_performance.get('prediction_accuracy', 0) > 0.8 else '–£–º–µ—Ä–µ–Ω–Ω–∞—è'} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

**–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:**
–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏.
        """
    
    def generate_top_opportunities(self, market_summary: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
        opportunities = []
        
        for gainer in market_summary.get('top_gainers', [])[:2]:
            opportunities.append(f"**{gainer['symbol']}**: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ (+{gainer['change']:.1f}%), –≤–æ–∑–º–æ–∂–µ–Ω —Ä–µ—Ç–µ—Å—Ç —É—Ä–æ–≤–Ω–µ–π")
        
        return '\n'.join([f"{i+1}. {opp}" for i, opp in enumerate(opportunities)])
    
    def generate_tomorrow_forecast(self, market_summary: Dict, ai_performance: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
        return f"""
**–û–±—â–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è:**
- {'–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞' if market_summary.get('market_cap_change', 0) > 0 else '–í–æ–∑–º–æ–∂–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è'}
- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: —É–º–µ—Ä–µ–Ω–Ω–∞—è
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {'–∞–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è' if ai_performance.get('prediction_accuracy', 0) > 0.8 else '–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å'}

**–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:**
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
- –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π

–ò–ò-—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫ —Ä—ã–Ω–æ—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º.
        """
    
    def assess_content_quality(self, content: str, metadata: Dict[str, Any]) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        quality_score = 0.5  # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        
        # –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        word_count = len(content.split())
        if word_count > 300:
            quality_score += 0.2
        if word_count > 800:
            quality_score += 0.1
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        if '##' in content:  # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            quality_score += 0.1
        if '**' in content:  # –í—ã–¥–µ–ª–µ–Ω–∏—è
            quality_score += 0.05
        if '- ' in content:  # –°–ø–∏—Å–∫–∏
            quality_score += 0.05
        
        # –ò–ò-—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        ai_confidence = metadata.get('ai_confidence', 0.5)
        quality_score += ai_confidence * 0.2
        
        return min(quality_score, 1.0)
    
    def assess_signal_quality(self, signal_content: Dict[str, Any], market_data: Dict[str, Any]) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        quality = 0.5
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ò–ò
        confidence = signal_content.get('confidence', 0.5)
        quality += confidence * 0.3
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        entry = signal_content.get('entry_price', 0)
        target = signal_content.get('target_price', 0)
        stop = signal_content.get('stop_loss', 0)
        
        if entry and target and stop:
            reward_risk_ratio = (target - entry) / (entry - stop) if entry != stop else 0
            if reward_risk_ratio > 1.5:
                quality += 0.2
        
        return min(quality, 1.0)
    
    def save_generated_content(self, content_type: str, title: str, content: str, 
                             metadata: Dict[str, Any], quality_score: float) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ë–î"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO generated_content 
                (content_type, title, content, metadata, quality_score, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                content_type, title, content,
                json.dumps(metadata, ensure_ascii=False),
                quality_score, datetime.now().isoformat()
            ))
            
            return cursor.lastrowid
    
    def save_content_to_file(self, content_id: int, title: str, content: str, content_type: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª"""
        # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–∞
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_title = safe_title.replace(' ', '_')
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{content_id}_{timestamp}_{safe_title}.md"
        
        file_path = Path(self.content_storage) / content_type / filename
        file_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return str(file_path)
    
    async def autonomous_content_cycle(self):
        """–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
        
        cycle_count = 0
        
        while True:
            try:
                cycle_count += 1
                self.logger.info(f"üîÑ –¶–∏–∫–ª {cycle_count} - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                tasks = []
                
                # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
                if cycle_count % 8 == 1:
                    tasks.append(self.generate_market_analysis_article())
                
                # –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
                if cycle_count % 1 == 0:
                    symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
                    selected_symbol = random.choice(symbols)
                    tasks.append(self.generate_trading_signal(selected_symbol))
                
                # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç (—Ä–∞–∑ –≤ –¥–µ–Ω—å)
                current_hour = datetime.now().hour
                if current_hour == 8 and cycle_count % 96 == 1:  # 8 —É—Ç—Ä–∞
                    tasks.append(self.generate_daily_report())
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
                if tasks:
                    results = await asyncio.gather(*tasks, return_exceptions=True)
                    
                    for i, result in enumerate(results):
                        if isinstance(result, Exception):
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {i}: {result}")
                        else:
                            self.logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ {i} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result.get('title', 'N/A')}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if cycle_count % 10 == 0:
                    self.log_statistics()
                
                # –ü–∞—É–∑–∞ 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(900)
                
            except Exception as e:
                self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {cycle_count}: {e}")
                await asyncio.sleep(300)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def log_statistics(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = datetime.now() - self.generation_stats['start_time']
        
        self.logger.info(f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞:
   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.total_seconds() / 3600:.1f} —á–∞—Å–æ–≤
   –°—Ç–∞—Ç–µ–π —Å–æ–∑–¥–∞–Ω–æ: {self.generation_stats['articles_created']}
   –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {self.generation_stats['signals_generated']}
   –û—Ç—á–µ—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {self.generation_stats['reports_compiled']}
   –í—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {self.generation_stats['total_content_pieces']}
        """)
    
    async def start_content_engine(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        self.logger.info("üé¨ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ Mirai")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤
        await self.initialize_templates()
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        await self.autonomous_content_cycle()
    
    async def initialize_templates(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        templates = ContentTemplate.get_article_templates()
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            for template_name, template_data in templates.items():
                cursor.execute("""
                    INSERT OR REPLACE INTO content_templates 
                    (template_name, template_type, template_data)
                    VALUES (?, ?, ?)
                """, (
                    template_name, 'article',
                    json.dumps(template_data, ensure_ascii=False)
                ))
            
            conn.commit()
        
        self.logger.info("üìù –®–∞–±–ª–æ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
    print("üöÄ Mirai Autonomous Content Generation Engine")
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    engine = MiraiContentEngine()
    
    try:
        await engine.start_content_engine()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        engine.logger.info("–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        engine.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–≤–∏–∂–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())