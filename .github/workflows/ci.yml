name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist ruff black mypy
    
    - name: Create logs directory
      run: mkdir -p logs
    
    - name: Lint with ruff
      run: |
        ruff check app/ --output-format=github
    
    - name: Format check with black
      run: |
        black --check app/ --diff
    
    - name: Type check with mypy
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional
    
    - name: Run tests with pytest
      run: |
        pytest -q
      env:
        PYTHONPATH: ${{ github.workspace }}
        DRY_RUN: true
        TESTNET: true
        WEB_USER: testuser
        WEB_PASS: testpass
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ --severity-level medium
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check --json --output safety-report.json || true
        safety check

  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t mirai-agent:${{ github.sha }} .
        docker images