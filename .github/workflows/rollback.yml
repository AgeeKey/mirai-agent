name: Automated Rollback

on:
  workflow_dispatch:
    inputs:
      target_deployment:
        description: 'Target deployment ID to rollback to'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - staging
          - production
      services:
        description: 'Services to rollback (comma-separated)'
        required: false
        default: 'api,trader,web'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    outputs:
      target_sha: ${{ steps.validate.outputs.target_sha }}
      target_deployment: ${{ steps.validate.outputs.target_deployment }}
      services: ${{ steps.validate.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate rollback request
        id: validate
        run: |
          echo "Validating rollback request..."
          
          # Parse services
          SERVICES="${{ github.event.inputs.services }}"
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          
          # Determine target deployment
          if [[ -n "${{ github.event.inputs.target_deployment }}" ]]; then
            TARGET_DEPLOYMENT="${{ github.event.inputs.target_deployment }}"
          else
            # Find previous successful deployment
            TARGET_DEPLOYMENT=$(git log --oneline --grep="deploy:" -n 2 | tail -n 1 | cut -d' ' -f1)
          fi
          
          if [[ -z "$TARGET_DEPLOYMENT" ]]; then
            echo "No target deployment found"
            exit 1
          fi
          
          echo "target_deployment=$TARGET_DEPLOYMENT" >> $GITHUB_OUTPUT
          
          # Get target SHA
          TARGET_SHA=$(git rev-parse $TARGET_DEPLOYMENT 2>/dev/null || echo $TARGET_DEPLOYMENT)
          echo "target_sha=$TARGET_SHA" >> $GITHUB_OUTPUT
          
          echo "Rollback validated:"
          echo "  Target SHA: $TARGET_SHA"
          echo "  Services: $SERVICES"
          echo "  Environment: ${{ github.event.inputs.environment }}"
          echo "  Reason: ${{ github.event.inputs.reason }}"

  rollback-staging:
    name: Rollback Staging
    runs-on: ubuntu-latest
    needs: [validate-rollback]
    if: github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://mirai-staging.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name mirai-staging
      
      - name: Execute staging rollback
        run: |
          TARGET_SHA="${{ needs.validate-rollback.outputs.target_sha }}"
          SERVICES="${{ needs.validate-rollback.outputs.services }}"
          NAMESPACE="mirai-staging"
          
          echo "Rolling back staging to $TARGET_SHA"
          echo "Services: $SERVICES"
          
          IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
          
          for service in "${SERVICE_ARRAY[@]}"; do
            echo "Rolling back $service..."
            
            kubectl set image deployment/mirai-$service-staging \
              mirai-$service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:$TARGET_SHA \
              -n $NAMESPACE
            
            kubectl rollout status deployment/mirai-$service-staging \
              -n $NAMESPACE --timeout=300s
          done
      
      - name: Verify staging rollback
        run: |
          sleep 30
          STAGING_URL=$(kubectl get ingress mirai-staging -n mirai-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f "https://$STAGING_URL/api/health"

  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    needs: [validate-rollback]
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://mirai.example.com
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Kubernetes
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name mirai-production
      
      - name: Pre-rollback backup
        run: |
          # Create backup of current state
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Export current deployments
          kubectl get deployments -n mirai-production -o yaml > backup-deployments-$TIMESTAMP.yaml
          
          # Store backup
          kubectl create configmap rollback-backup-$TIMESTAMP \
            --from-file=backup-deployments-$TIMESTAMP.yaml \
            -n mirai-production
          
          echo "Backup created: rollback-backup-$TIMESTAMP"
      
      - name: Execute production rollback
        run: |
          TARGET_SHA="${{ needs.validate-rollback.outputs.target_sha }}"
          SERVICES="${{ needs.validate-rollback.outputs.services }}"
          NAMESPACE="mirai-production"
          
          echo "🚨 EXECUTING PRODUCTION ROLLBACK 🚨"
          echo "Target SHA: $TARGET_SHA"
          echo "Services: $SERVICES"
          echo "Reason: ${{ github.event.inputs.reason }}"
          
          # Create rollback script
          cat > rollback-production.sh << 'EOF'
          #!/bin/bash
          set -e
          
          TARGET_SHA="$1"
          SERVICES="$2"
          NAMESPACE="$3"
          
          IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
          
          # Stage 1: Prepare new images
          echo "Stage 1: Preparing rollback images..."
          for service in "${SERVICE_ARRAY[@]}"; do
            echo "Checking image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:$TARGET_SHA"
            
            # Verify image exists
            if ! docker manifest inspect "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:$TARGET_SHA" > /dev/null 2>&1; then
              echo "❌ Image not found: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:$TARGET_SHA"
              exit 1
            fi
          done
          
          # Stage 2: Gradual rollback (one service at a time)
          echo "Stage 2: Executing gradual rollback..."
          
          for service in "${SERVICE_ARRAY[@]}"; do
            echo "Rolling back $service to $TARGET_SHA..."
            
            # Update deployment
            kubectl set image deployment/mirai-$service-production \
              mirai-$service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-$service:$TARGET_SHA \
              -n $NAMESPACE
            
            # Wait for rollout
            kubectl rollout status deployment/mirai-$service-production \
              -n $NAMESPACE --timeout=600s
            
            # Health check after each service
            echo "Health check for $service..."
            sleep 15
            
            if [[ "$service" == "api" ]]; then
              PROD_URL=$(kubectl get ingress mirai-production -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              
              # Retry health check
              for i in {1..5}; do
                if curl -f "https://$PROD_URL/api/health"; then
                  echo "✅ Health check passed for $service"
                  break
                elif [[ $i -eq 5 ]]; then
                  echo "❌ Health check failed for $service after 5 attempts"
                  exit 1
                else
                  echo "Health check attempt $i/5 failed, retrying in 10s..."
                  sleep 10
                fi
              done
            fi
            
            echo "✅ $service rollback completed successfully"
          done
          
          echo "🎉 Production rollback completed successfully!"
          EOF
          
          chmod +x rollback-production.sh
          ./rollback-production.sh "$TARGET_SHA" "$SERVICES" "$NAMESPACE"
      
      - name: Post-rollback verification
        run: |
          NAMESPACE="mirai-production"
          
          echo "Post-rollback verification..."
          
          # Extended health checks
          PROD_URL=$(kubectl get ingress mirai-production -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # API health
          curl -f "https://$PROD_URL/api/health"
          curl -f "https://$PROD_URL/api/trading/status"
          
          # Web health
          curl -f "https://$PROD_URL/health"
          
          # Trading system specific checks
          curl -f "https://$PROD_URL/api/performance/summary"
          
          # Check all pods are running
          kubectl get pods -n $NAMESPACE -l app=mirai
          
          echo "✅ Post-rollback verification completed"
      
      - name: Update rollback tracking
        run: |
          # Record rollback in configmap
          cat > rollback-record.json << EOF
          {
            "rollback_id": "${{ github.run_id }}",
            "target_sha": "${{ needs.validate-rollback.outputs.target_sha }}",
            "previous_sha": "$(kubectl get deployment mirai-api-production -n mirai-production -o jsonpath='{.metadata.annotations.deployment\.kubernetes\.io/revision}')",
            "services": "${{ needs.validate-rollback.outputs.services }}",
            "reason": "${{ github.event.inputs.reason }}",
            "triggered_by": "${{ github.actor }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          
          kubectl create configmap rollback-record-${{ github.run_id }} \
            --from-file=rollback-record.json \
            -n mirai-production
      
      - name: Enable monitoring alerts
        run: |
          # Enhanced monitoring post-rollback
          curl -X POST "https://grafana.example.com/api/alerts" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Post-rollback monitoring - ${{ needs.validate-rollback.outputs.target_sha }}",
              "message": "Enhanced monitoring after production rollback",
              "tags": ["rollback", "production", "critical"],
              "time": "now",
              "timeEnd": "now+2h"
            }'

  notification:
    name: Rollback Notification
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback-staging, rollback-production]
    if: always()
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.rollback-staging.result }}" == "success" || "${{ needs.rollback-production.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      
      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.status.outputs.status == 'success' && '✅ ROLLBACK COMPLETED' || '❌ ROLLBACK FAILED' }}",
              "attachments": [
                {
                  "color": "${{ steps.status.outputs.status == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {"title": "Environment", "value": "${{ github.event.inputs.environment }}", "short": true},
                    {"title": "Target SHA", "value": "${{ needs.validate-rollback.outputs.target_sha }}", "short": true},
                    {"title": "Services", "value": "${{ needs.validate-rollback.outputs.services }}", "short": true},
                    {"title": "Triggered By", "value": "${{ github.actor }}", "short": true},
                    {"title": "Reason", "value": "${{ github.event.inputs.reason }}", "short": false}
                  ],
                  "footer": "Mirai Rollback System",
                  "ts": ${{ github.event.head_commit.timestamp && 'new Date("${{ github.event.head_commit.timestamp }}").getTime() / 1000' || 'Math.floor(Date.now() / 1000)' }}
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: Create issue on failure
        if: steps.status.outputs.status == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Rollback Failed - ${{ github.event.inputs.environment }}`,
              body: `
              ## Rollback Failure Report
              
              **Environment:** ${{ github.event.inputs.environment }}
              **Target SHA:** ${{ needs.validate-rollback.outputs.target_sha }}
              **Services:** ${{ needs.validate-rollback.outputs.services }}
              **Reason:** ${{ github.event.inputs.reason }}
              **Triggered By:** ${{ github.actor }}
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              
              ### Next Steps
              
              1. Review workflow logs for failure details
              2. Check system health manually
              3. Consider emergency maintenance mode
              4. Investigate root cause
              
              ### Emergency Contacts
              
              - On-call Engineer: @oncall
              - DevOps Team: @devops
              - CTO: @cto
              `,
              labels: ['bug', 'critical', 'rollback-failure', 'production']
            })

  post-rollback-monitoring:
    name: Post-Rollback Monitoring
    runs-on: ubuntu-latest
    needs: [rollback-staging, rollback-production]
    if: success()
    steps:
      - name: Extended monitoring
        run: |
          echo "Starting extended post-rollback monitoring..."
          
          # Environment-specific monitoring
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            ENVIRONMENT="production"
            URL="https://mirai.example.com"
          else
            ENVIRONMENT="staging"
            URL="https://mirai-staging.example.com"
          fi
          
          # Monitor for 1 hour
          for i in {1..60}; do
            echo "Monitoring check $i/60..."
            
            # Health checks
            if ! curl -f "$URL/api/health" -m 10; then
              echo "❌ Health check failed at minute $i"
              
              # Send alert
              curl -X POST "${{ secrets.ALERT_WEBHOOK }}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"text\": \"⚠️ Health check failed $i minutes post-rollback\",
                  \"environment\": \"$ENVIRONMENT\",
                  \"minute\": $i
                }"
            fi
            
            # Performance checks
            RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$URL/api/health")
            if (( $(echo "$RESPONSE_TIME > 2.0" | bc -l) )); then
              echo "⚠️ Slow response time: ${RESPONSE_TIME}s"
            fi
            
            sleep 60
          done
          
          echo "✅ Extended monitoring completed - system stable"