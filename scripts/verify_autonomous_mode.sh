#!/usr/bin/env bash
set -euo pipefail

echo "=== üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ Mirai-Agent ==="

# 1) –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è)
echo "[1] –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞..."
head -c 1M /dev/urandom | base64 | tr -d '\n' | sha256sum | awk '{print "SHA256:", $1}'

# 2) –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (edits.autoApprove)
echo "[2] –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
TEST_FILE=/tmp/test_auto_edit.txt
echo "hello" > "$TEST_FILE"
sed -i 's/hello/OK_AUTONOMY/' "$TEST_FILE"
if grep -q "OK_AUTONOMY" "$TEST_FILE"; then
  echo "‚úî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ"
else
  echo "‚úñ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–æ—Å—å"; exit 1
fi

# 3) Git-–∫–æ–Ω—Ñ–∏–≥–∏ (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π)
echo "[3] –¢–µ—Å—Ç git configs..."
for s in advice.statusHints advice.commitBeforeMerge push.autoSetupRemote advice.addIgnoredFile; do
  v=$(git config --global --get "$s" 2>/dev/null || true)
  [ -z "$v" ] && v="not-set"
  printf "  %-24s : %s\n" "$s" "$v"
done

# 4) Smoke-—Ç–µ—Å—Ç –≤–µ–±-–ø–∞–Ω–µ–ª–∏ (FastAPI + uvicorn)
echo "[4] –ó–∞–ø—É—Å–∫ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ (smoke)..."

# –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç–Ω—ã–π venv, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–µ—Ç–∏; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
PROJECT_VENV="$(pwd)/.venv"
USE_VENV=""
if [ -d "$PROJECT_VENV" ]; then
  USE_VENV="$PROJECT_VENV"
else
  USE_VENV="/tmp/venv"
  python3 -m venv "$USE_VENV"
fi

source "$USE_VENV/bin/activate"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
python - <<'PY'
import importlib, sys
missing = []
for m in ("fastapi", "uvicorn", "requests"):
    try:
        importlib.import_module(m)
    except Exception:
        missing.append(m)
if missing:
    print("Installing:", " ".join(missing))
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", *missing])
else:
    print("All deps already installed")
PY

# –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health-–ø—Ä–æ–≤–µ—Ä–∫–∏
APP_DIR="/tmp/mini_web_panel"
mkdir -p "$APP_DIR"
cat > "$APP_DIR/web_panel.py" <<'PY'
from fastapi import FastAPI
app = FastAPI()
@app.get("/health")
def health():
    return {"status": "ok"}
PY

# –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
UV_LOG="/tmp/uvicorn_smoke.log"
uvicorn web_panel:app --app-dir "$APP_DIR" --host 127.0.0.1 --port 8099 >"$UV_LOG" 2>&1 &
PID=$!
sleep 2
HTTP=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8099/health || true)
if [ "$HTTP" = "200" ]; then
  echo "‚úî –í–µ–±-–ø–∞–Ω–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç 200"
else
  echo "‚úñ –í–µ–±-–ø–∞–Ω–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ $HTTP"; tail -n 50 "$UV_LOG" || true; kill $PID 2>/dev/null || true; exit 1
fi
kill $PID 2>/dev/null || true

# 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á (—É—Å–ª–æ–≤–Ω–∞—è) ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º TASK_OK
echo "[5] –¢–µ—Å—Ç –∞–≤—Ç–æ–∑–∞–¥–∞—á..."
echo "TASK_OK"

echo "=== ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ==="
#!/bin/bash

# Autonomous Mode Verification Script
# This script tests all autonomous features to ensure they work without prompts

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ GitHub Copilot..."
echo ""

# Test 1: Environment Variables
echo "1. üåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
# Use environment variable if set, otherwise use relative path from this script's location
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ACTIVATE_AUTONOMOUS_ENV_PATH="${ACTIVATE_AUTONOMOUS_ENV_PATH:-$SCRIPT_DIR/activate_autonomous_env.sh}"
source "$ACTIVATE_AUTONOMOUS_ENV_PATH" >/dev/null 2>&1

echo "   MIRAI_AUTONOMOUS_MODE: ${MIRAI_AUTONOMOUS_MODE:-‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê}"
echo "   GITHUB_COPILOT_AUTONOMOUS: ${GITHUB_COPILOT_AUTONOMOUS:-‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê}"
echo "   VSCODE_AUTONOMOUS_MODE: ${VSCODE_AUTONOMOUS_MODE:-‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê}"
echo ""

# Test 2: VS Code Configuration Files
echo "2. üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VS Code:"
config_files=(
    "~/.vscode-server/data/User/settings.json"
    "~/.vscode-remote/data/User/settings.json" 
    "~/.config/Code/User/settings.json"
    "/home/runner/work/mirai-agent/mirai-agent/.vscode/settings.json"
)

for file in "${config_files[@]}"; do
    expanded_file=$(eval echo "$file")
    if [ -f "$expanded_file" ]; then
        echo "   ‚úÖ $file"
    else
        echo "   ‚ùå $file - –ù–ï –ù–ê–ô–î–ï–ù"
    fi
done
echo ""

# Test 3: Command Functions
echo "3. ‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:"
commands=("mi-status" "mi-test" "auto-commit" "auto-format" "mi-cd")

for cmd in "${commands[@]}"; do
    if type "$cmd" >/dev/null 2>&1; then
        echo "   ‚úÖ $cmd - –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        echo "   ‚ùå $cmd - –ù–ï –ù–ê–ô–î–ï–ù–ê"
    fi
done
echo ""

# Test 4: Git Configuration
echo "4. üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Git (–±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π):"
git_settings=(
    "advice.statusHints"
    "advice.commitBeforeMerge"
    "push.autoSetupRemote"
    "advice.addIgnoredFile"
)

for setting in "${git_settings[@]}"; do
    value=$(git config --global --get "$setting" 2>/dev/null || echo "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    echo "   $setting: $value"
done
echo ""

# Test 5: VS Code Settings Check
echo "5. ‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ VS Code:"
vscode_settings_file="/home/runner/work/mirai-agent/mirai-agent/.vscode/settings.json"

if [ -f "$vscode_settings_file" ]; then
    critical_settings=(
        "chat.experimental.agent.autoApprove"
        "chat.agent.maxRequests"
        "security.workspace.trust.enabled"
        "terminal.integrated.confirmOnExit"
        "window.confirmBeforeClose"
    )
    
    for setting in "${critical_settings[@]}"; do
        if grep -q "\"$setting\"" "$vscode_settings_file"; then
            echo "   ‚úÖ $setting - –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        else
            echo "   ‚ùå $setting - –ù–ï –ù–ê–ô–î–ï–ù"
        fi
    done
else
    echo "   ‚ùå –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ VS Code –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
echo ""

# Test 6: Functional Test
echo "6. üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç:"
cd /home/runner/work/mirai-agent/mirai-agent

echo "   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ mi-status..."
if mi-status >/dev/null 2>&1; then
    echo "   ‚úÖ mi-status —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "   ‚ùå mi-status –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
fi

echo "   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auto-format (dry run)..."
if type auto-format >/dev/null 2>&1; then
    echo "   ‚úÖ auto-format –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    echo "   ‚ùå auto-format –ù–ï –î–û–°–¢–£–ü–ù–ê"
fi
echo ""

# Summary
echo "üéØ –†–ï–ó–Æ–ú–ï –ê–í–¢–û–ù–û–ú–ù–û–ì–û –†–ï–ñ–ò–ú–ê:"
echo ""

all_good=true

# Check critical components
if [ "${MIRAI_AUTONOMOUS_MODE}" = "true" ] && [ "${GITHUB_COPILOT_AUTONOMOUS}" = "true" ]; then
    echo "‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
else
    echo "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    all_good=false
fi

if [ -f "$vscode_settings_file" ] && grep -q "chat.experimental.agent.autoApprove" "$vscode_settings_file"; then
    echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
else
    echo "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VS Code –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"
    all_good=false
fi

if type mi-status >/dev/null 2>&1; then
    echo "‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
else
    echo "‚ùå –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç"
    all_good=false
fi

echo ""
if [ "$all_good" = true ]; then
    echo "üöÄ –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú –ü–û–õ–ù–û–°–¢–¨–Æ –ê–ö–¢–ò–í–ï–ù!"
    echo "ü§ñ GitHub Copilot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π"
    echo ""
    echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   mi-status, mi-test, mi-api, mi-start"
    echo "   auto-commit, auto-format, auto-test"
    echo "   mi-cd, mi-app, mi-tests, mi-scripts"
    echo ""
    echo "üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π!"
else
    echo "‚ö†Ô∏è  –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ù–ê–°–¢–†–û–ï–ù"
    echo ""
    echo "üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "   cd /home/runner/work/mirai-agent/mirai-agent"
    echo "   ./scripts/setup_full_autonomous.sh"
    echo "   source scripts/activate_autonomous_env.sh"
fi

echo ""
echo "üìÑ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/AUTONOMOUS_MODE.md"