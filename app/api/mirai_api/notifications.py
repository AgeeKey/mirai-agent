"""
Push Notifications API endpoints for Mirai trading platform
"""
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import json
import httpx
import asyncio
from datetime import datetime
import logging

from .auth import get_current_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = APIRouter(prefix="/notifications", tags=["notifications"])

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class PushTokenRequest(BaseModel):
    token: str
    device_id: str
    platform: str = "mobile"

class TradingSignalNotification(BaseModel):
    symbol: str
    type: str  # 'BUY' | 'SELL'
    confidence: int
    price: float
    strategy: str

class PortfolioNotification(BaseModel):
    total_value: float
    daily_pnl: float
    change_percent: float

class SystemNotification(BaseModel):
    title: str
    message: str
    priority: str = "normal"  # 'low' | 'normal' | 'high'
    category: str = "system"

# In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/Database)
user_push_tokens: Dict[int, List[Dict]] = {}

@router.post("/register-token")
async def register_push_token(
    token_data: PushTokenRequest,
    current_user = Depends(get_current_user)
):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è push —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = current_user.id
        
        if user_id not in user_push_tokens:
            user_push_tokens[user_id] = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
        existing_token = next(
            (t for t in user_push_tokens[user_id] if t['token'] == token_data.token),
            None
        )
        
        if not existing_token:
            user_push_tokens[user_id].append({
                'token': token_data.token,
                'device_id': token_data.device_id,
                'platform': token_data.platform,
                'registered_at': datetime.now().isoformat()
            })
            
        logger.info(f"Registered push token for user {user_id}")
        return {"status": "success", "message": "Push token registered"}
        
    except Exception as e:
        logger.error(f"Error registering push token: {e}")
        raise HTTPException(status_code=500, detail="Failed to register push token")

@router.delete("/unregister-token")
async def unregister_push_token(
    device_id: str,
    current_user = Depends(get_current_user)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ push —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = current_user.id
        
        if user_id in user_push_tokens:
            user_push_tokens[user_id] = [
                t for t in user_push_tokens[user_id] 
                if t['device_id'] != device_id
            ]
            
        return {"status": "success", "message": "Push token unregistered"}
        
    except Exception as e:
        logger.error(f"Error unregistering push token: {e}")
        raise HTTPException(status_code=500, detail="Failed to unregister push token")

@router.get("/tokens")
async def get_user_tokens(current_user = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = current_user.id
    tokens = user_push_tokens.get(user_id, [])
    
    return {
        "user_id": user_id,
        "tokens": tokens,
        "count": len(tokens)
    }

async def send_expo_notification(expo_token: str, notification_data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Expo Push API"""
    try:
        url = "https://exp.host/--/api/v2/push/send"
        
        payload = {
            "to": expo_token,
            "title": notification_data.get("title", "Mirai Trading"),
            "body": notification_data.get("body", ""),
            "data": notification_data.get("data", {}),
            "sound": notification_data.get("sound", "default"),
            "badge": notification_data.get("badge", 1),
            "priority": notification_data.get("priority", "default"),
            "channelId": notification_data.get("channelId", "default")
        }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(url, json=payload)
            
            if response.status_code == 200:
                logger.info(f"Push notification sent successfully to {expo_token[:10]}...")
                return response.json()
            else:
                logger.error(f"Failed to send push notification: {response.text}")
                return None
                
    except Exception as e:
        logger.error(f"Error sending push notification: {e}")
        return None

@router.post("/send/trading-signal")
async def send_trading_signal_notification(
    signal: TradingSignalNotification,
    background_tasks: BackgroundTasks,
    current_user = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ"""
    try:
        user_id = current_user.id
        tokens = user_push_tokens.get(user_id, [])
        
        if not tokens:
            return {"status": "no_tokens", "message": "No push tokens registered"}
        
        notification_data = {
            "title": f"üö® {signal.type} Signal",
            "body": f"{signal.symbol} at ${signal.price:.2f} ({signal.confidence}% confidence)",
            "data": {
                "type": "trading_signal",
                "symbol": signal.symbol,
                "signal_type": signal.type,
                "price": signal.price,
                "confidence": signal.confidence,
                "strategy": signal.strategy,
                "timestamp": datetime.now().isoformat()
            },
            "channelId": "trading_signals",
            "priority": "high",
            "badge": 1
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        for token_info in tokens:
            background_tasks.add_task(
                send_expo_notification,
                token_info['token'],
                notification_data
            )
        
        return {
            "status": "success", 
            "message": f"Trading signal notification sent to {len(tokens)} devices"
        }
        
    except Exception as e:
        logger.error(f"Error sending trading signal notification: {e}")
        raise HTTPException(status_code=500, detail="Failed to send notification")

@router.post("/send/portfolio-update")
async def send_portfolio_notification(
    portfolio: PortfolioNotification,
    background_tasks: BackgroundTasks,
    current_user = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"""
    try:
        user_id = current_user.id
        tokens = user_push_tokens.get(user_id, [])
        
        if not tokens:
            return {"status": "no_tokens", "message": "No push tokens registered"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ PnL
        emoji = "üìà" if portfolio.daily_pnl >= 0 else "üìâ"
        sign = "+" if portfolio.daily_pnl >= 0 else ""
        
        notification_data = {
            "title": f"{emoji} Portfolio Update",
            "body": f"${portfolio.total_value:,.2f} ({sign}{portfolio.change_percent:.1f}%)",
            "data": {
                "type": "portfolio_update",
                "total_value": portfolio.total_value,
                "daily_pnl": portfolio.daily_pnl,
                "change_percent": portfolio.change_percent,
                "timestamp": datetime.now().isoformat()
            },
            "channelId": "portfolio_updates",
            "priority": "normal",
            "badge": 1
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        for token_info in tokens:
            background_tasks.add_task(
                send_expo_notification,
                token_info['token'],
                notification_data
            )
        
        return {
            "status": "success", 
            "message": f"Portfolio notification sent to {len(tokens)} devices"
        }
        
    except Exception as e:
        logger.error(f"Error sending portfolio notification: {e}")
        raise HTTPException(status_code=500, detail="Failed to send notification")

@router.post("/send/system")
async def send_system_notification(
    system_notif: SystemNotification,
    background_tasks: BackgroundTasks,
    current_user = Depends(get_current_user)
):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        user_id = current_user.id
        tokens = user_push_tokens.get(user_id, [])
        
        if not tokens:
            return {"status": "no_tokens", "message": "No push tokens registered"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ —ç–º–æ–¥–∑–∏
        priority_emoji = {
            "low": "‚ÑπÔ∏è",
            "normal": "üîî",
            "high": "‚ö†Ô∏è"
        }
        
        notification_data = {
            "title": f"{priority_emoji.get(system_notif.priority, 'üîî')} {system_notif.title}",
            "body": system_notif.message,
            "data": {
                "type": "system",
                "category": system_notif.category,
                "priority": system_notif.priority,
                "timestamp": datetime.now().isoformat()
            },
            "channelId": "system_alerts",
            "priority": "default" if system_notif.priority == "normal" else system_notif.priority,
            "badge": 1
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        for token_info in tokens:
            background_tasks.add_task(
                send_expo_notification,
                token_info['token'],
                notification_data
            )
        
        return {
            "status": "success", 
            "message": f"System notification sent to {len(tokens)} devices"
        }
        
    except Exception as e:
        logger.error(f"Error sending system notification: {e}")
        raise HTTPException(status_code=500, detail="Failed to send notification")

@router.post("/broadcast/all-users")
async def broadcast_notification(
    notification: SystemNotification,
    background_tasks: BackgroundTasks,
    current_user = Depends(get_current_user)
):
    """–®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏)
        if not hasattr(current_user, 'is_admin') or not current_user.is_admin:
            raise HTTPException(status_code=403, detail="Admin access required")
        
        total_devices = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id, tokens in user_push_tokens.items():
            total_devices += len(tokens)
            
            notification_data = {
                "title": f"üì¢ {notification.title}",
                "body": notification.message,
                "data": {
                    "type": "broadcast",
                    "category": notification.category,
                    "priority": notification.priority,
                    "timestamp": datetime.now().isoformat()
                },
                "channelId": "broadcasts",
                "priority": "high",
                "badge": 1
            }
            
            for token_info in tokens:
                background_tasks.add_task(
                    send_expo_notification,
                    token_info['token'],
                    notification_data
                )
        
        return {
            "status": "success", 
            "message": f"Broadcast notification sent to {total_devices} devices across {len(user_push_tokens)} users"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error broadcasting notification: {e}")
        raise HTTPException(status_code=500, detail="Failed to broadcast notification")

@router.get("/stats")
async def get_notification_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º"""
    try:
        total_users = len(user_push_tokens)
        total_devices = sum(len(tokens) for tokens in user_push_tokens.values())
        
        platform_stats = {}
        for tokens in user_push_tokens.values():
            for token_info in tokens:
                platform = token_info.get('platform', 'unknown')
                platform_stats[platform] = platform_stats.get(platform, 0) + 1
        
        return {
            "total_users": total_users,
            "total_devices": total_devices,
            "platform_distribution": platform_stats,
            "users_with_tokens": list(user_push_tokens.keys())
        }
        
    except Exception as e:
        logger.error(f"Error getting notification stats: {e}")
        raise HTTPException(status_code=500, detail="Failed to get stats")