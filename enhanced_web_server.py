#!/usr/bin/env python3
"""
Enhanced Mirai Web Server
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ Mirai —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
"""

import http.server
import socketserver
import os
import threading
import logging
import signal
import sys
import time
from pathlib import Path

class EnhancedMiraiHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è SPA"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory="/root/mirai-agent/frontend/trading/dist", **kwargs)
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SPA routing"""
        # –î–ª—è SPA –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ index.html
        path = self.translate_path(self.path)
        if not os.path.exists(path) and not self.path.startswith('/api'):
            self.path = '/index.html'
        
        return super().do_GET()
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
    
    def end_headers(self):
        """–î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Cache-Control', 'no-cache')
        super().end_headers()
    
    def log_message(self, format, *args):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        logging.info(f"Web: {self.address_string()} - {format % args}")

class EnhancedWebServer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º"""
    
    def __init__(self, port=3001, host='0.0.0.0'):
        self.port = port
        self.host = host
        self.httpd = None
        self.running = False
        self.setup_logging()
        self.setup_signal_handlers()
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('/root/mirai-agent/logs/enhanced_web.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger('EnhancedWebServer')
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        self.stop()
        sys.exit(0)
    
    def check_frontend_dir(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        frontend_dir = Path("/root/mirai-agent/frontend/trading/dist")
        if not frontend_dir.exists():
            self.logger.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É...")
            frontend_dir.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
            with open(frontend_dir / 'index.html', 'w', encoding='utf-8') as f:
                f.write("""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mirai Trading Platform</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f0f0f0; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .online { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .building { background: #fff3cd; color: #856404; border: 1px solid #ffeaa7; }
        h1 { color: #333; text-align: center; }
        .api-links { display: flex; gap: 10px; justify-content: center; margin: 20px 0; }
        .api-link { padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; }
        .api-link:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Mirai Trading Ecosystem</h1>
        
        <div class="status online">
            ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
        </div>
        
        <div class="status building">
            üî® –§—Ä–æ–Ω—Ç–µ–Ω–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∫–∏
        </div>
        
        <div class="api-links">
            <a href="http://localhost:8001/docs" class="api-link" target="_blank">üìä Trading API</a>
            <a href="http://localhost:8002/docs" class="api-link" target="_blank">üåê Services API</a>
            <a href="http://localhost:3000" class="api-link" target="_blank">üìà Monitoring</a>
        </div>
        
        <h2>–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞</h2>
        <ul>
            <li>‚úÖ API —Å–µ—Ä–≤–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç</li>
            <li>‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω</li>
            <li>‚úÖ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∞–≥–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç</li>
            <li>üî® –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è</li>
        </ul>
        
        <p><strong>–°–∏—Å—Ç–µ–º–∞ Mirai —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.</strong></p>
        
        <script>
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            setInterval(function() {
                fetch('/api/status').then(r => r.json()).then(data => {
                    console.log('Status updated:', data);
                }).catch(e => console.log('API not ready yet'));
            }, 30000);
        </script>
    </div>
</body>
</html>
                """)
            
            self.logger.info("–°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        
        return frontend_dir
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            self.check_frontend_dir()
            
            self.logger.info(f"–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {self.host}:{self.port}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                result = sock.connect_ex((self.host, self.port))
                sock.close()
                
                if result == 0:
                    self.logger.warning(f"–ü–æ—Ä—Ç {self.port} —É–∂–µ –∑–∞–Ω—è—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å...")
                    os.system(f"lsof -ti:{self.port} | xargs kill -9 2>/dev/null || true")
                    time.sleep(2)
            except:
                pass
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.httpd = socketserver.TCPServer((self.host, self.port), EnhancedMiraiHTTPRequestHandler)
            self.httpd.allow_reuse_address = True
            self.running = True
            
            self.logger.info(f"üåê –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://{self.host}:{self.port}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.httpd.serve_forever()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        if self.httpd and self.running:
            self.logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä...")
            self.running = False
            self.httpd.shutdown()
            self.httpd.server_close()
            self.logger.info("–í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = EnhancedWebServer()
    
    try:
        server.start()
    except KeyboardInterrupt:
        server.stop()
        print("\nüõë –í–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()