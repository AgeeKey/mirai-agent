version: '3.8'

services:
  # Mirai Trading Agent - основной торговый бот
  mirai-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mirai-agent
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - TRADING_MODE=live
      - RISK_MANAGEMENT=strict
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - mirai-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import app.agent.advisor; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mirai.service=agent"

  # Mirai API - REST API для управления
  mirai-api:
    build:
      context: ./app/api
      dockerfile: Dockerfile
    container_name: mirai-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://mirai:mirai123@postgres:5432/mirai_db
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - CORS_ORIGINS=http://localhost:3000,https://aimirai.info
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - mirai-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mirai.service=api"

  # Mirai Trader - исполнение ордеров
  mirai-trader:
    build:
      context: ./app/trader
      dockerfile: Dockerfile
    container_name: mirai-trader
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_API_SECRET=${BINANCE_API_SECRET}
      - BINANCE_TESTNET=${BINANCE_TESTNET:-true}
      - REDIS_URL=redis://redis:6379/1
      - RISK_ENGINE_ENABLED=true
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - mirai-network
    depends_on:
      - redis
      - mirai-api
    healthcheck:
      test: ["CMD", "python", "-c", "import app.trader.core; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mirai.service=trader"

  # Mirai Dashboard - веб-интерфейс
  mirai-dashboard:
    build:
      context: ./web/services
      dockerfile: Dockerfile
    container_name: mirai-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000/ws
      - NODE_ENV=production
    networks:
      - mirai-network
    depends_on:
      - mirai-api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mirai.service=dashboard"

  # Telegram Bot - уведомления
  mirai-telegram:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mirai-telegram
    restart: unless-stopped
    command: ["python", "-m", "app.telegram_bot.bot"]
    environment:
      - PYTHONPATH=/app
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - API_URL=http://mirai-api:8000
    volumes:
      - ./state:/app/state
      - ./logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - mirai-network
    depends_on:
      - mirai-api
    labels:
      - "com.mirai.service=telegram"

  # PostgreSQL - основная база данных
  postgres:
    image: postgres:16-alpine
    container_name: mirai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=mirai_db
      - POSTGRES_USER=mirai
      - POSTGRES_PASSWORD=mirai123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/sql:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - mirai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mirai -d mirai_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mirai.service=database"

  # Redis - кэш и очереди
  redis:
    image: redis:7-alpine
    container_name: mirai-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mirai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mirai.service=cache"

  # Nginx - обратный прокси
  nginx:
    image: nginx:alpine
    container_name: mirai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - mirai-network
    depends_on:
      - mirai-api
      - mirai-dashboard
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.mirai.service=proxy"

  # Grafana - мониторинг и аналитика
  grafana:
    image: grafana/grafana:latest
    container_name: mirai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana:/etc/grafana/provisioning:ro
    networks:
      - mirai-network
    depends_on:
      - postgres
    labels:
      - "com.mirai.service=monitoring"

  # Prometheus - метрики
  prometheus:
    image: prom/prometheus:latest
    container_name: mirai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mirai-network
    labels:
      - "com.mirai.service=metrics"

  # Filebeat - логи
  filebeat:
    image: elastic/filebeat:8.10.0
    container_name: mirai-filebeat
    restart: unless-stopped
    user: root
    volumes:
      - ./infra/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/mirai:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mirai-network
    depends_on:
      - mirai-api
    labels:
      - "com.mirai.service=logs"

networks:
  mirai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  nginx_logs:
    driver: local