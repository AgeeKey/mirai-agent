name: Build & Deploy

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata
        id: meta
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Build & Push API
        uses: docker/build-push-action@v6
        with:
          context: app/api
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/ageekey/mirai-api:${{ steps.meta.outputs.version }}
            ${{ steps.meta.outputs.is_release == 'true' && 'ghcr.io/ageekey/mirai-api:latest' || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Trader
        uses: docker/build-push-action@v6
        with:
          context: app/trader
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/ageekey/mirai-trader:${{ steps.meta.outputs.version }}
            ${{ steps.meta.outputs.is_release == 'true' && 'ghcr.io/ageekey/mirai-trader:latest' || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Services
        uses: docker/build-push-action@v6
        with:
          context: web/services
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/ageekey/mirai-services:${{ steps.meta.outputs.version }}
            ${{ steps.meta.outputs.is_release == 'true' && 'ghcr.io/ageekey/mirai-services:latest' || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

    outputs:
      version: ${{ steps.meta.outputs.version }}
      is_release: ${{ steps.meta.outputs.is_release }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 20
    if: github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /opt/mirai
            
            # Backup current version
            echo "Creating backup..."
            docker compose -f docker-compose.prod.yml down --timeout 30
            
            # Update environment
            echo "TAG=${{ needs.build.outputs.version }}" > .env
            echo "DOMAIN_STUDIO=${{ secrets.DOMAIN_STUDIO }}" >> .env
            echo "DOMAIN_PANEL=${{ secrets.DOMAIN_PANEL }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "WEB_USER=${{ secrets.WEB_USER }}" >> .env
            echo "WEB_PASS=${{ secrets.WEB_PASS }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
            echo "TELEGRAM_CHAT_ID_ADMIN=${{ secrets.TELEGRAM_CHAT_ID_ADMIN }}" >> .env
            
            # Pull new images
            echo "Pulling new images..."
            docker compose -f docker-compose.prod.yml pull
            
            # Start services
            echo "Starting services..."
            docker compose -f docker-compose.prod.yml up -d
            
            # Health check
            echo "Waiting for services to start..."
            sleep 30
            
            # Cleanup
            echo "Cleaning up old images..."
            docker system prune -af --volumes
            
            echo "Deployment completed!"

      - name: Health Check
        run: |
          # Wait a bit more for services to be fully ready
          sleep 60
          
          # Check API health
          if curl -f https://${{ secrets.DOMAIN_PANEL }}/healthz; then
            echo "‚úÖ API health check passed"
          else
            echo "‚ùå API health check failed"
            exit 1
          fi
          
          # Check Web UI
          if curl -f https://${{ secrets.DOMAIN_STUDIO }}; then
            echo "‚úÖ Web UI health check passed"
          else
            echo "‚ùå Web UI health check failed"
            exit 1
          fi

      - name: Notify Success
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Studio: https://${{ secrets.DOMAIN_STUDIO }}"
          echo "API: https://${{ secrets.DOMAIN_PANEL }}/docs"
