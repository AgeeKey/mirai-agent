"""
Mirai Agent - –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import asyncio
import json
import logging
import sqlite3
import os
import time
import httpx
import psutil
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from enum import Enum

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/root/mirai-agent/logs/alerts.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AlertLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"
    EMERGENCY = "emergency"

class AlertType(Enum):
    """–¢–∏–ø—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    TRADING = "trading"
    AI = "ai"
    SYSTEM = "system"
    SECURITY = "security"

@dataclass
class Alert:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–ª–µ—Ä—Ç–∞"""
    id: str
    type: AlertType
    level: AlertLevel
    title: str
    message: str
    timestamp: datetime
    resolved: bool = False
    resolved_at: Optional[datetime] = None
    metadata: Optional[Dict] = None

class AlertRule:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, name: str, level: AlertLevel, alert_type: AlertType):
        self.name = name
        self.level = level
        self.alert_type = alert_type
        self.last_triggered = None
        self.cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
    
    async def check(self, metrics: Dict) -> Optional[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–ª–µ—Ä—Ç–∞"""
        raise NotImplementedError
    
    def can_trigger(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞ (—É—á–µ—Ç cooldown)"""
        if self.last_triggered is None:
            return True
        return (datetime.now() - self.last_triggered).seconds > self.cooldown

class DrawdownAlert(AlertRule):
    """–ê–ª–µ—Ä—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è drawdown"""
    
    def __init__(self, threshold: float = 10.0):
        super().__init__("Drawdown Alert", AlertLevel.CRITICAL, AlertType.TRADING)
        self.threshold = threshold
    
    async def check(self, metrics: Dict) -> Optional[Alert]:
        trading = metrics.get('trading', {})
        daily_pnl = trading.get('daily_pnl', 0)
        total_pnl = trading.get('total_pnl', 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π drawdown
        if daily_pnl < -self.threshold and self.can_trigger():
            self.last_triggered = datetime.now()
            return Alert(
                id=f"drawdown_{int(time.time())}",
                type=self.alert_type,
                level=self.level,
                title="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π Drawdown!",
                message=f"–î–Ω–µ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ ${self.threshold}. –¢–µ–∫—É—â–∏–π P&L: ${daily_pnl}",
                timestamp=datetime.now(),
                metadata={"daily_pnl": daily_pnl, "threshold": self.threshold}
            )
        return None

class WinRateAlert(AlertRule):
    """–ê–ª–µ—Ä—Ç –Ω–∏–∑–∫–æ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞"""
    
    def __init__(self, threshold: float = 40.0):
        super().__init__("Win Rate Alert", AlertLevel.WARNING, AlertType.TRADING)
        self.threshold = threshold
    
    async def check(self, metrics: Dict) -> Optional[Alert]:
        trading = metrics.get('trading', {})
        win_rate = trading.get('win_rate', 0)
        
        if win_rate < self.threshold and win_rate > 0 and self.can_trigger():
            self.last_triggered = datetime.now()
            return Alert(
                id=f"winrate_{int(time.time())}",
                type=self.alert_type,
                level=self.level,
                title="–ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç",
                message=f"–í–∏–Ω—Ä–µ–π—Ç —É–ø–∞–ª –¥–æ {win_rate}% (–ø–æ—Ä–æ–≥: {self.threshold}%)",
                timestamp=datetime.now(),
                metadata={"win_rate": win_rate, "threshold": self.threshold}
            )
        return None

class AIUnavailableAlert(AlertRule):
    """–ê–ª–µ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI"""
    
    def __init__(self):
        super().__init__("AI Unavailable", AlertLevel.CRITICAL, AlertType.AI)
        self.cooldown = 60  # 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    
    async def check(self, metrics: Dict) -> Optional[Alert]:
        ai = metrics.get('ai', {})
        status = ai.get('status', 'Unknown')
        
        if status != 'Connected' and self.can_trigger():
            self.last_triggered = datetime.now()
            return Alert(
                id=f"ai_unavailable_{int(time.time())}",
                type=self.alert_type,
                level=self.level,
                title="AI Orchestrator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!",
                message=f"–°—Ç–∞—Ç—É—Å AI: {status}. –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Ä—É—à–µ–Ω—ã.",
                timestamp=datetime.now(),
                metadata={"ai_status": status}
            )
        return None

class SystemResourceAlert(AlertRule):
    """–ê–ª–µ—Ä—Ç –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, cpu_threshold: float = 90.0, memory_threshold: float = 85.0):
        super().__init__("System Resources", AlertLevel.WARNING, AlertType.SYSTEM)
        self.cpu_threshold = cpu_threshold
        self.memory_threshold = memory_threshold
    
    async def check(self, metrics: Dict) -> Optional[Alert]:
        system = metrics.get('system', {})
        cpu_usage = system.get('cpu_usage', 0)
        memory_usage = system.get('memory_usage', 0)
        
        if cpu_usage > self.cpu_threshold and self.can_trigger():
            self.last_triggered = datetime.now()
            return Alert(
                id=f"cpu_high_{int(time.time())}",
                type=self.alert_type,
                level=self.level,
                title="–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU",
                message=f"CPU –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ {cpu_usage}% (–ø–æ—Ä–æ–≥: {self.cpu_threshold}%)",
                timestamp=datetime.now(),
                metadata={"cpu_usage": cpu_usage, "threshold": self.cpu_threshold}
            )
        
        if memory_usage > self.memory_threshold and self.can_trigger():
            self.last_triggered = datetime.now()
            return Alert(
                id=f"memory_high_{int(time.time())}",
                type=self.alert_type,
                level=self.level,
                title="–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
                message=f"–ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ {memory_usage}% (–ø–æ—Ä–æ–≥: {self.memory_threshold}%)",
                timestamp=datetime.now(),
                metadata={"memory_usage": memory_usage, "threshold": self.memory_threshold}
            )
        
        return None

class EmergencyStopAlert(AlertRule):
    """–ê–ª–µ—Ä—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ emergency stop"""
    
    def __init__(self):
        super().__init__("Emergency Stop", AlertLevel.EMERGENCY, AlertType.SECURITY)
        self.cooldown = 0  # –ë–µ–∑ cooldown –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    
    async def check(self, metrics: Dict) -> Optional[Alert]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å emergency stop —á–µ—Ä–µ–∑ API
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get("http://localhost:8001/emergency/status", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get('emergency_stop_active', False):
                        return Alert(
                            id=f"emergency_stop_{int(time.time())}",
                            type=self.alert_type,
                            level=self.level,
                            title="üö® EMERGENCY STOP –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!",
                            message="–¢–æ—Ä–≥–æ–≤–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.",
                            timestamp=datetime.now(),
                            metadata=data
                        )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ emergency stop: {e}")
        
        return None

class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.rules: List[AlertRule] = []
        self.active_alerts: List[Alert] = []
        self.alert_history: List[Alert] = []
        self.db_path = "/root/mirai-agent/state/mirai.db"
        self.telegram_enabled = False
        self.setup_rules()
        self.init_database()
    
    def setup_rules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
        self.rules = [
            DrawdownAlert(threshold=50.0),  # $50 –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ—Ç–µ—Ä—å
            WinRateAlert(threshold=35.0),   # –í–∏–Ω—Ä–µ–π—Ç –Ω–∏–∂–µ 35%
            AIUnavailableAlert(),
            SystemResourceAlert(cpu_threshold=85.0, memory_threshold=80.0),
            EmergencyStopAlert()
        ]
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(self.rules)} –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤")
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS alerts (
                    id TEXT PRIMARY KEY,
                    type TEXT,
                    level TEXT,
                    title TEXT,
                    message TEXT,
                    timestamp TEXT,
                    resolved BOOLEAN DEFAULT FALSE,
                    resolved_at TEXT,
                    metadata TEXT
                )
            """)
            
            conn.commit()
            conn.close()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    async def check_alerts(self, metrics: Dict) -> List[Alert]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤"""
        new_alerts = []
        
        for rule in self.rules:
            try:
                alert = await rule.check(metrics)
                if alert:
                    new_alerts.append(alert)
                    logger.warning(f"–ù–æ–≤—ã–π –∞–ª–µ—Ä—Ç: {alert.title} - {alert.message}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ {rule.name}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
        for alert in new_alerts:
            await self.save_alert(alert)
            self.active_alerts.append(alert)
            self.alert_history.append(alert)
        
        return new_alerts
    
    async def save_alert(self, alert: Alert):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT OR REPLACE INTO alerts 
                (id, type, level, title, message, timestamp, resolved, resolved_at, metadata)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                alert.id,
                alert.type.value,
                alert.level.value,
                alert.title,
                alert.message,
                alert.timestamp.isoformat(),
                alert.resolved,
                alert.resolved_at.isoformat() if alert.resolved_at else None,
                json.dumps(alert.metadata) if alert.metadata else None
            ))
            
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def send_telegram_alert(self, alert: Alert):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            icon = {
                AlertLevel.INFO: "‚ÑπÔ∏è",
                AlertLevel.WARNING: "‚ö†Ô∏è",
                AlertLevel.CRITICAL: "üö®",
                AlertLevel.EMERGENCY: "üÜò"
            }.get(alert.level, "üîî")
            
            message = f"{icon} *{alert.title}*\n\n{alert.message}\n\n_–í—Ä–µ–º—è: {alert.timestamp.strftime('%H:%M:%S')}_"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    "http://localhost:8002/send_alert",
                    json={"message": message, "level": alert.level.value},
                    timeout=10
                )
                
                if response.status_code == 200:
                    logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram: {alert.title}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def resolve_alert(self, alert_id: str):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        for alert in self.active_alerts:
            if alert.id == alert_id:
                alert.resolved = True
                alert.resolved_at = datetime.now()
                await self.save_alert(alert)
                self.active_alerts.remove(alert)
                logger.info(f"–ê–ª–µ—Ä—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω: {alert.title}")
                break
    
    def get_active_alerts(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        return [asdict(alert) for alert in self.active_alerts if not alert.resolved]
    
    def get_alert_history(self, hours: int = 24) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        cutoff = datetime.now() - timedelta(hours=hours)
        recent_alerts = [
            asdict(alert) for alert in self.alert_history 
            if alert.timestamp > cutoff
        ]
        return recent_alerts

class AlertService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.alert_manager = AlertManager()
        self.running = False
        self.check_interval = 30  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    async def get_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get("http://localhost:9999/metrics", timeout=5)
                if response.status_code == 200:
                    return response.json()
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {response.status_code}")
                    return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    async def monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤...")
        self.running = True
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics = await self.get_metrics()
                
                if metrics:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
                    new_alerts = await self.alert_manager.check_alerts(metrics)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    for alert in new_alerts:
                        await self.alert_manager.send_telegram_alert(alert)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(self.check_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(self.check_interval)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.running = False
        logger.info("–°–µ—Ä–≤–∏—Å –∞–ª–µ—Ä—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    service = AlertService()
    
    try:
        await service.monitor_loop()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        service.stop()

if __name__ == "__main__":
    asyncio.run(main())