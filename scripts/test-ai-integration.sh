#!/bin/bash

# üß™ Mirai Agent - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
# –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}============================================${NC}"
echo -e "${BLUE}   MIRAI AGENT - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –°–ò–°–¢–ï–ú–´   ${NC}"
echo -e "${BLUE}============================================${NC}"
echo ""

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
declare -A test_results
total_tests=0
passed_tests=0
failed_tests=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_result="$3"
    
    total_tests=$((total_tests + 1))
    echo -e "${CYAN}üß™ –¢–µ—Å—Ç: $test_name${NC}"
    
    if eval "$test_command"; then
        echo -e "   ${GREEN}‚úÖ PASSED${NC}"
        test_results["$test_name"]="PASSED"
        passed_tests=$((passed_tests + 1))
        return 0
    else
        echo -e "   ${RED}‚ùå FAILED${NC}"
        test_results["$test_name"]="FAILED"
        failed_tests=$((failed_tests + 1))
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP —Ç–µ—Å—Ç–∞
http_test() {
    local url="$1"
    local expected_code="${2:-200}"
    local timeout="${3:-10}"
    
    response_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time "$timeout" "$url" 2>/dev/null || echo "000")
    [ "$response_code" = "$expected_code" ]
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è JSON API —Ç–µ—Å—Ç–∞
json_api_test() {
    local url="$1"
    local expected_key="$2"
    local timeout="${3:-10}"
    
    response=$(curl -s --max-time "$timeout" "$url" 2>/dev/null || echo '{}')
    echo "$response" | python3 -c "import sys, json; data=json.load(sys.stdin); print('$expected_key' in data)" 2>/dev/null | grep -q "True"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è WebSocket —Ç–µ—Å—Ç–∞
websocket_test() {
    local url="$1"
    local timeout="${2:-5}"
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    timeout "$timeout" bash -c "exec 3<>/dev/tcp/localhost/8080" 2>/dev/null
}

echo -e "${BLUE}üìã –ü–õ–ê–ù –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${NC}"
echo "----------------------------------------"
echo "1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (Docker, —Å–µ—Ç–∏)"
echo "2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (API, Frontend)"
echo "3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (Orchestrator, ChromaDB)"
echo "4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (SuperAGI, AutoGPT)"
echo "5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∑–∞–¥–∞—á –∏ workflows"
echo "6. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
echo "7. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"
echo ""

# ===============================
# 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´
# ===============================
echo -e "${BLUE}üîß 1. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´${NC}"
echo "----------------------------------------"

run_test "Docker daemon" "systemctl is-active docker >/dev/null 2>&1"
run_test "Docker containers running" "[ \$(docker ps | wc -l) -gt 1 ]"
run_test "Mirai network exists" "docker network ls | grep -q mirai || docker network ls | grep -q infra"
run_test "Shared directories exist" "[ -d /root/mirai-agent/shared/data ] && [ -d /root/mirai-agent/shared/reports ]"
run_test "Log directories writable" "[ -w /root/mirai-agent/logs ]"

echo ""

# ===============================
# 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –°–ï–†–í–ò–°–û–í
# ===============================
echo -e "${BLUE}üì° 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ê–ó–û–í–´–• –°–ï–†–í–ò–°–û–í${NC}"
echo "----------------------------------------"

run_test "Frontend (Next.js) –¥–æ—Å—Ç—É–ø–µ–Ω" "http_test 'http://localhost:3000' 200 5"
run_test "API –∑–¥–æ—Ä–æ–≤—å–µ" "http_test 'http://localhost:8001/health' 200 5"
run_test "API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON" "json_api_test 'http://localhost:8001/health' 'status'"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã
if netstat -tlpn 2>/dev/null | grep -q ":8001 "; then
    run_test "API –ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω" "true"
else
    run_test "API –ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω" "false"
fi

if netstat -tlpn 2>/dev/null | grep -q ":3000 "; then
    run_test "Frontend –ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω" "true" 
else
    run_test "Frontend –ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω" "false"
fi

echo ""

# ===============================
# 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ===============================
echo -e "${BLUE}ü§ñ 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í${NC}"
echo "----------------------------------------"

# ChromaDB
run_test "ChromaDB –¥–æ—Å—Ç—É–ø–µ–Ω" "http_test 'http://localhost:8000/api/v1/heartbeat' 200 10"
run_test "ChromaDB API —Ä–∞–±–æ—Ç–∞–µ—Ç" "json_api_test 'http://localhost:8000/api/v1/heartbeat' 'nanosecond heartbeat'"

# Orchestrator
run_test "Orchestrator –¥–æ—Å—Ç—É–ø–µ–Ω" "http_test 'http://localhost:8080/health' 200 10"
run_test "Orchestrator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" "json_api_test 'http://localhost:8080/stats' 'total_tasks'"
run_test "Orchestrator WebSocket" "netstat -tlpn 2>/dev/null | grep -q ':8080.*python'"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
ai_containers=("mirai-orchestrator" "mirai-chromadb")
for container in "${ai_containers[@]}"; do
    if docker ps --format "table {{.Names}}" | grep -q "$container"; then
        run_test "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container –∑–∞–ø—É—â–µ–Ω" "docker inspect $container --format='{{.State.Status}}' | grep -q 'running'"
    else
        run_test "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container –∑–∞–ø—É—â–µ–Ω" "false"
    fi
done

echo ""

# ===============================
# 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# ===============================
echo -e "${BLUE}üîó 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò${NC}"
echo "----------------------------------------"

# –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –≤ Orchestrator
echo "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É..."
if task_response=$(curl -s -X POST "http://localhost:8080/task/submit" \
    -H "Content-Type: application/json" \
    -d '{
        "type": "analysis", 
        "goal": "Test integration",
        "context": {"test": true},
        "priority": 10
    }' 2>/dev/null); then
    
    if echo "$task_response" | grep -q "task_id"; then
        task_id=$(echo "$task_response" | python3 -c "import sys, json; print(json.load(sys.stdin)['task_id'])" 2>/dev/null)
        run_test "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Orchestrator" "true"
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        sleep 3
        if task_status=$(curl -s "http://localhost:8080/task/$task_id" 2>/dev/null); then
            run_test "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω" "echo '$task_status' | grep -q 'task_id'"
        else
            run_test "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω" "false"
        fi
    else
        run_test "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Orchestrator" "false"
    fi
else
    run_test "–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Orchestrator" "false"
fi

# –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
run_test "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á" "json_api_test 'http://localhost:8080/tasks/active' 'count'"

echo ""

# ===============================
# 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI WORKFLOW
# ===============================
echo -e "${BLUE}üß† 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI WORKFLOW${NC}"
echo "----------------------------------------"

# –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
task_types=("analysis" "reporting")
for task_type in "${task_types[@]}"; do
    echo "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏: $task_type"
    
    task_data="{\"type\":\"$task_type\",\"goal\":\"Test $task_type workflow\",\"context\":{\"test\":true}}"
    
    if response=$(curl -s -X POST "http://localhost:8080/task/submit" \
        -H "Content-Type: application/json" \
        -d "$task_data" 2>/dev/null); then
        
        if echo "$response" | grep -q "task_id"; then
            run_test "–ó–∞–¥–∞—á–∞ —Ç–∏–ø–∞ $task_type –ø—Ä–∏–Ω—è—Ç–∞" "true"
        else
            run_test "–ó–∞–¥–∞—á–∞ —Ç–∏–ø–∞ $task_type –ø—Ä–∏–Ω—è—Ç–∞" "false"
        fi
    else
        run_test "–ó–∞–¥–∞—á–∞ —Ç–∏–ø–∞ $task_type –ø—Ä–∏–Ω—è—Ç–∞" "false"
    fi
done

# –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
if stats=$(curl -s "http://localhost:8080/stats" 2>/dev/null); then
    if echo "$stats" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('total_tasks', 0))" | grep -q "[0-9]"; then
        run_test "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–∞" "true"
    else
        run_test "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–∞" "false"
    fi
else
    run_test "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–∞" "false"
fi

echo ""

# ===============================
# 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò –ò –î–ê–ù–ù–´–•
# ===============================
echo -e "${BLUE}üíæ 6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò –ò –î–ê–ù–ù–´–•${NC}"
echo "----------------------------------------"

# –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –≤ shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
test_file="/root/mirai-agent/shared/data/test_$(date +%s).json"
if echo '{"test": "data", "timestamp": "'$(date -Iseconds)'"}' > "$test_file" 2>/dev/null; then
    run_test "–ó–∞–ø–∏—Å—å –≤ shared/data" "[ -f '$test_file' ]"
    rm -f "$test_file" 2>/dev/null
else
    run_test "–ó–∞–ø–∏—Å—å –≤ shared/data" "false"
fi

# –¢–µ—Å—Ç ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏–π
if collections=$(curl -s "http://localhost:8000/api/v1/collections" 2>/dev/null); then
    run_test "ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã" "echo '$collections' | grep -q '\[\]' || echo '$collections' | grep -q 'name'"
else
    run_test "ChromaDB –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã" "false"
fi

echo ""

# ===============================
# 7. –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ===============================
echo -e "${BLUE}‚ö° 7. –ù–ê–ì–†–£–ó–û–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï${NC}"
echo "----------------------------------------"

echo "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á..."
pids=()
for i in {1..5}; do
    (
        curl -s -X POST "http://localhost:8080/task/submit" \
            -H "Content-Type: application/json" \
            -d "{\"type\":\"analysis\",\"goal\":\"Load test $i\",\"priority\":1}" \
            >/dev/null 2>&1
    ) &
    pids+=($!)
done

# –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
success_count=0
for pid in "${pids[@]}"; do
    if wait "$pid"; then
        success_count=$((success_count + 1))
    fi
done

run_test "–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á" "[ $success_count -ge 3 ]"

echo ""

# ===============================
# 8. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´
# ===============================
echo -e "${BLUE}üéØ 8. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´${NC}"
echo "----------------------------------------"

# –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ)
if active_tasks=$(curl -s "http://localhost:8080/tasks/active" 2>/dev/null); then
    task_count=$(echo "$active_tasks" | python3 -c "import sys, json; print(json.load(sys.stdin).get('count', 0))" 2>/dev/null)
    run_test "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á" "[ '$task_count' -ge 0 ]"
else
    run_test "–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á" "false"
fi

# –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á
if history=$(curl -s "http://localhost:8080/tasks/history?limit=10" 2>/dev/null); then
    run_test "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–∞" "echo '$history' | grep -q 'count'"
else
    run_test "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω–∞" "false"
fi

# –¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è
echo "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è..."
if learn_response=$(curl -s -X POST "http://localhost:8080/learn" 2>/dev/null); then
    run_test "–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" "echo '$learn_response' | grep -q 'task_id'"
else
    run_test "–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç" "false"
fi

echo ""

# ===============================
# 9. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–û–ô
# ===============================
echo -e "${BLUE}üîß 9. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–û–ô${NC}"
echo "----------------------------------------"

# –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–ª—è AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
if curl -s "http://localhost:8001/health" >/dev/null 2>&1; then
    run_test "–û—Å–Ω–æ–≤–Ω–æ–π API –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è AI" "true"
    
    # –¢–µ—Å—Ç AI endpoint –≤ API (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if curl -s "http://localhost:8001/ai/status" >/dev/null 2>&1; then
        run_test "AI endpoint –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API" "true"
    else
        run_test "AI endpoint –≤ –æ—Å–Ω–æ–≤–Ω–æ–º API" "false"
    fi
else
    run_test "–û—Å–Ω–æ–≤–Ω–æ–π API –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è AI" "false"
fi

echo ""

# ===============================
# –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ===============================
echo -e "${BLUE}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø${NC}"
echo "============================================"
echo ""

echo -e "${CYAN}–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
echo "  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests"
echo -e "  –ü—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$passed_tests${NC}"
echo -e "  –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${RED}$failed_tests${NC}"

if [ $total_tests -gt 0 ]; then
    success_rate=$((passed_tests * 100 / total_tests))
    echo "  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $success_rate%"
fi

echo ""
echo -e "${CYAN}–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:${NC}"
for test_name in "${!test_results[@]}"; do
    result="${test_results[$test_name]}"
    if [ "$result" = "PASSED" ]; then
        echo -e "  ${GREEN}‚úÖ${NC} $test_name"
    else
        echo -e "  ${RED}‚ùå${NC} $test_name"
    fi
done

echo ""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
if [ $failed_tests -eq 0 ]; then
    echo -e "${GREEN}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!${NC}"
    echo ""
    echo "AI —Å–∏—Å—Ç–µ–º–∞ Mirai –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:"
    echo "  ‚Ä¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo "  ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "  ‚Ä¢ AI –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ"
    echo "  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ"
    
    exit_code=0
elif [ $success_rate -ge 80 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò${NC}"
    echo ""
    echo "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:"
    echo "  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã –≤—ã—à–µ"
    echo "  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"
    echo "  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º"
    
    exit_code=1
else
    echo -e "${RED}‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï${NC}"
    echo ""
    echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:"
    echo "  ‚Ä¢ –ú–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤"
    echo "  ‚Ä¢ AI —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo "  ‚Ä¢ –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ"
    echo "  ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    
    exit_code=2
fi

echo ""
echo -e "${CYAN}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
if [ $exit_code -eq 0 ]; then
    echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é AI —Å–∏—Å—Ç–µ–º—É: docker-compose -f infra/docker-compose.ai.yml up -d"
    echo "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω—ã: ./scripts/setup-nginx-ssl.sh"
    echo "3. –í–∫–ª—é—á–∏—Ç–µ AI –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: echo 'AI_ENABLED=true' >> .env"
    echo "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ trader —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
elif [ $exit_code -eq 1 ]; then
    echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
    echo "3. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
else
    echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É (Docker, —Å–µ—Ç–∏)"
    echo "2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–æ—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
    echo "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫"
fi

echo ""
echo "–õ–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: /root/mirai-agent/logs/ai-integration-test-$(date +%Y%m%d-%H%M%S).log"

echo ""
echo -e "${BLUE}============================================${NC}"
echo -e "${BLUE}         –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û            ${NC}"
echo -e "${BLUE}============================================${NC}"

exit $exit_code