#!/usr/bin/env python3
"""
Mirai AI Integration Testing Server
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import json
import time
import logging
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import sys
import os
import threading

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ò–ò –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from ai_integration import MiraiAICoordinator
    from ai_engine import MiraiAdvancedAI
    from knowledge_base import MiraiKnowledgeBase
    from performance_optimizer import MiraiPerformanceOptimizer
    AI_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    AI_AVAILABLE = False

class AIIntegrationHandler(BaseHTTPRequestHandler):
    """HTTP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self, *args, ai_coordinator=None, **kwargs):
        self.ai_coordinator = ai_coordinator
        super().__init__(*args, **kwargs)
    
    def log_message(self, format, *args):
        """–ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ª–æ–≥–æ–≤ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        pass
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        if path == '/':
            self.serve_dashboard()
        elif path == '/api/status':
            self.serve_api_status()
        elif path == '/api/metrics':
            self.serve_api_metrics()
        elif path == '/api/test-decision':
            self.serve_test_decision()
        elif path == '/api/test-knowledge':
            self.serve_test_knowledge()
        elif path == '/test':
            self.serve_integration_test()
        else:
            self.send_404()
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_path = urlparse(self.path)
        path = parsed_path.path
        
        if path == '/api/add-knowledge':
            self.handle_add_knowledge()
        elif path == '/api/make-decision':
            self.handle_make_decision()
        else:
            self.send_404()
    
    def serve_dashboard(self):
        """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–∞—à–±–æ—Ä–¥–∞"""
        html_content = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mirai AI Integration Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .status-active {
            background-color: #4CAF50;
            animation: pulse 2s infinite;
        }
        .status-inactive {
            background-color: #f44336;
        }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
            transition: background 0.3s;
        }
        .btn:hover {
            background: #45a049;
        }
        .test-result {
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
            background: rgba(0, 0, 0, 0.2);
            max-height: 200px;
            overflow-y: auto;
        }
        .log-container {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            max-height: 300px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Mirai AI Integration Test Center</h1>
            <p>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>
        </div>
        
        <div class="grid">
            <div class="card">
                <h3>üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h3>
                <div id="system-status">
                    <div><span class="status-indicator status-active"></span>–ò–ò –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä: <span id="coordinator-status">–ó–∞–≥—Ä—É–∑–∫–∞...</span></div>
                    <div><span class="status-indicator status-active"></span>–ò–ò –î–≤–∏–∂–æ–∫: <span id="engine-status">–ó–∞–≥—Ä—É–∑–∫–∞...</span></div>
                    <div><span class="status-indicator status-active"></span>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: <span id="knowledge-status">–ó–∞–≥—Ä—É–∑–∫–∞...</span></div>
                    <div><span class="status-indicator status-active"></span>–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä: <span id="optimizer-status">–ó–∞–≥—Ä—É–∑–∫–∞...</span></div>
                </div>
                <button class="btn" onclick="updateStatus()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
            </div>
            
            <div class="card">
                <h3>üìä –ú–µ—Ç—Ä–∏–∫–∏</h3>
                <div id="metrics">
                    <div>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <span id="uptime">-</span></div>
                    <div>–†–µ—à–µ–Ω–∏–π –ø—Ä–∏–Ω—è—Ç–æ: <span id="decisions">-</span></div>
                    <div>–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: <span id="predictions">-</span></div>
                    <div>–ó–Ω–∞–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: <span id="knowledge-count">-</span></div>
                </div>
                <button class="btn" onclick="updateMetrics()">üìà –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏</button>
            </div>
            
            <div class="card">
                <h3>üß† –¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π</h3>
                <button class="btn" onclick="testDecision()">üéØ –¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏—è</button>
                <div id="decision-result" class="test-result"></div>
            </div>
            
            <div class="card">
                <h3>üìö –¢–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</h3>
                <button class="btn" onclick="testKnowledge()">üìñ –¢–µ—Å—Ç –∑–Ω–∞–Ω–∏–π</button>
                <div id="knowledge-result" class="test-result"></div>
            </div>
        </div>
        
        <div class="card">
            <h3>üîÑ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç</h3>
            <button class="btn" onclick="runFullIntegrationTest()">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç</button>
            <div id="full-test-result" class="test-result"></div>
        </div>
        
        <div class="card">
            <h3>üìã –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
            <div id="log-container" class="log-container"></div>
            <button class="btn" onclick="clearLogs()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏</button>
        </div>
    </div>

    <script>
        let logContainer = document.getElementById('log-container');
        
        function log(message) {
            const timestamp = new Date().toLocaleTimeString();
            logContainer.innerHTML += `[${timestamp}] ${message}<br>`;
            logContainer.scrollTop = logContainer.scrollHeight;
        }
        
        async function updateStatus() {
            log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã...');
            try {
                const response = await fetch('/api/status');
                const status = await response.json();
                
                document.getElementById('coordinator-status').textContent = status.is_running ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                document.getElementById('engine-status').textContent = status.components?.ai_engine || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                document.getElementById('knowledge-status').textContent = status.components?.knowledge_base || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                document.getElementById('optimizer-status').textContent = status.components?.optimizer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                
                log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
            }
        }
        
        async function updateMetrics() {
            log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫...');
            try {
                const response = await fetch('/api/metrics');
                const metrics = await response.json();
                
                document.getElementById('uptime').textContent = Math.round(metrics.uptime_seconds) + ' —Å–µ–∫';
                document.getElementById('decisions').textContent = metrics.stats?.decisions_made || '0';
                document.getElementById('predictions').textContent = metrics.stats?.predictions_generated || '0';
                document.getElementById('knowledge-count').textContent = metrics.stats?.knowledge_entries_added || '0';
                
                log('üìà –ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            } catch (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: ${error.message}`);
            }
        }
        
        async function testDecision() {
            log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π...');
            const resultDiv = document.getElementById('decision-result');
            resultDiv.innerHTML = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
            
            try {
                const response = await fetch('/api/test-decision');
                const result = await response.json();
                
                resultDiv.innerHTML = `
                    <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong><br>
                    –î–µ–π—Å—Ç–≤–∏–µ: ${result.action}<br>
                    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(result.confidence * 100).toFixed(1)}%<br>
                    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: ${result.recommendations?.join(', ') || '–ù–µ—Ç'}
                `;
                
                log('üéØ –¢–µ—Å—Ç —Ä–µ—à–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            } catch (error) {
                resultDiv.innerHTML = `–û—à–∏–±–∫–∞: ${error.message}`;
                log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Ä–µ—à–µ–Ω–∏–π: ${error.message}`);
            }
        }
        
        async function testKnowledge() {
            log('üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...');
            const resultDiv = document.getElementById('knowledge-result');
            resultDiv.innerHTML = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
            
            try {
                const response = await fetch('/api/test-knowledge');
                const result = await response.json();
                
                resultDiv.innerHTML = `
                    <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç:</strong><br>
                    ${result.message}<br>
                    –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: ${result.total_entries || 0}
                `;
                
                log('üìñ –¢–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω');
            } catch (error) {
                resultDiv.innerHTML = `–û—à–∏–±–∫–∞: ${error.message}`;
                log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∑–Ω–∞–Ω–∏–π: ${error.message}`);
            }
        }
        
        async function runFullIntegrationTest() {
            log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...');
            const resultDiv = document.getElementById('full-test-result');
            resultDiv.innerHTML = '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...';
            
            try {
                const response = await fetch('/test');
                const result = await response.json();
                
                let resultHtml = '<strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:</strong><br>';
                result.tests.forEach(test => {
                    const status = test.success ? '‚úÖ' : '‚ùå';
                    resultHtml += `${status} ${test.name}: ${test.result}<br>`;
                });
                resultHtml += `<br><strong>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</strong> ${result.overall_success ? '–£—Å–ø–µ—Ö' : '–ï—Å—Ç—å –æ—à–∏–±–∫–∏'}`;
                
                resultDiv.innerHTML = resultHtml;
                log(`üéØ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${result.overall_success ? '–£—Å–ø–µ—à–Ω–æ' : '–° –æ—à–∏–±–∫–∞–º–∏'}`);
            } catch (error) {
                resultDiv.innerHTML = `–û—à–∏–±–∫–∞: ${error.message}`;
                log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${error.message}`);
            }
        }
        
        function clearLogs() {
            logContainer.innerHTML = '';
            log('üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.addEventListener('load', function() {
            log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Integration Test Center');
            updateStatus();
            updateMetrics();
            
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            setInterval(() => {
                updateStatus();
                updateMetrics();
            }, 10000);
        });
    </script>
</body>
</html>
        """
        
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=utf-8')
        self.end_headers()
        self.wfile.write(html_content.encode('utf-8'))
    
    def serve_api_status(self):
        """API —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if not AI_AVAILABLE or not self.ai_coordinator:
            status = {
                'is_running': False,
                'error': 'AI components not available',
                'components': {
                    'ai_engine': 'unavailable',
                    'knowledge_base': 'unavailable',
                    'optimizer': 'unavailable'
                },
                'timestamp': datetime.now().isoformat()
            }
        else:
            status = self.ai_coordinator.get_status()
        
        self.send_json_response(status)
    
    def serve_api_metrics(self):
        """API –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        if not AI_AVAILABLE or not self.ai_coordinator:
            metrics = {
                'uptime_seconds': 0,
                'stats': {
                    'decisions_made': 0,
                    'predictions_generated': 0,
                    'knowledge_entries_added': 0
                },
                'timestamp': datetime.now().isoformat()
            }
        else:
            metrics = self.ai_coordinator.get_status()
        
        self.send_json_response(metrics)
    
    def serve_test_decision(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π"""
        if not AI_AVAILABLE or not self.ai_coordinator:
            result = {
                'action': 'test_unavailable',
                'confidence': 0.0,
                'recommendations': ['AI components not available'],
                'timestamp': datetime.now().isoformat()
            }
        else:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            test_context = {
                'system_load': 0.7,
                'memory_usage': 0.6,
                'active_trades': 5,
                'test_mode': True
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            result = self.ai_coordinator.ai_engine.analyze_context(test_context)
            result['timestamp'] = datetime.now().isoformat()
        
        self.send_json_response(result)
    
    def serve_test_knowledge(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        if not AI_AVAILABLE or not self.ai_coordinator:
            result = {
                'message': '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
                'total_entries': 0,
                'success': False
            }
        else:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
                stats = self.ai_coordinator.knowledge_base.get_statistics()
                result = {
                    'message': '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
                    'total_entries': stats.get('total_entries', 0),
                    'categories': stats.get('categories', {}),
                    'success': True,
                    'timestamp': datetime.now().isoformat()
                }
            except Exception as e:
                result = {
                    'message': f'–û—à–∏–±–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {str(e)}',
                    'total_entries': 0,
                    'success': False
                }
        
        self.send_json_response(result)
    
    def serve_integration_test(self):
        """–ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
        tests = []
        overall_success = True
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        tests.append({
            'name': '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ò–ò –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
            'success': AI_AVAILABLE,
            'result': '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã' if AI_AVAILABLE else '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
        })
        
        if AI_AVAILABLE and self.ai_coordinator:
            # –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            try:
                status = self.ai_coordinator.get_status()
                tests.append({
                    'name': '–ò–ò –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä',
                    'success': True,
                    'result': f'–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—É—â–µ–Ω: {status.get("is_running", False)}'
                })
            except Exception as e:
                tests.append({
                    'name': '–ò–ò –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä',
                    'success': False,
                    'result': f'–û—à–∏–±–∫–∞: {str(e)}'
                })
                overall_success = False
            
            # –¢–µ—Å—Ç –ò–ò –¥–≤–∏–∂–∫–∞
            try:
                test_context = {'test': True, 'timestamp': time.time()}
                decision = self.ai_coordinator.ai_engine.analyze_context(test_context)
                tests.append({
                    'name': '–ò–ò –î–≤–∏–∂–æ–∫',
                    'success': True,
                    'result': f'–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.get("confidence", 0):.2f}'
                })
            except Exception as e:
                tests.append({
                    'name': '–ò–ò –î–≤–∏–∂–æ–∫',
                    'success': False,
                    'result': f'–û—à–∏–±–∫–∞: {str(e)}'
                })
                overall_success = False
            
            # –¢–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            try:
                stats = self.ai_coordinator.knowledge_base.get_statistics()
                tests.append({
                    'name': '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
                    'success': True,
                    'result': f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø–∏—Å–µ–π: {stats.get("total_entries", 0)}'
                })
            except Exception as e:
                tests.append({
                    'name': '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
                    'success': False,
                    'result': f'–û—à–∏–±–∫–∞: {str(e)}'
                })
                overall_success = False
        
        result = {
            'tests': tests,
            'overall_success': overall_success,
            'timestamp': datetime.now().isoformat(),
            'total_tests': len(tests),
            'passed_tests': sum(1 for t in tests if t['success'])
        }
        
        self.send_json_response(result)
    
    def send_json_response(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(200)
        self.send_header('Content-type', 'application/json; charset=utf-8')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False, indent=2).encode('utf-8'))
    
    def send_404(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ 404 –æ—à–∏–±–∫–∏"""
        self.send_response(404)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'404 Not Found')

def create_handler_class(ai_coordinator):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –ò–ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º"""
    class Handler(AIIntegrationHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, ai_coordinator=ai_coordinator, **kwargs)
    
    return Handler

def run_ai_integration_server(port=8081):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ AI Integration Test Server –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    ai_coordinator = None
    if AI_AVAILABLE:
        try:
            ai_coordinator = MiraiAICoordinator()
            print("‚úÖ –ò–ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ò–ò –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    handler_class = create_handler_class(ai_coordinator)
    server = HTTPServer(('0.0.0.0', port), handler_class)
    
    print(f"üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")
    print("üìä –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥: http://localhost:{port}")
    print("üîß API —Å—Ç–∞—Ç—É—Å–∞: http://localhost:{port}/api/status")
    print("üìà API –º–µ—Ç—Ä–∏–∫: http://localhost:{port}/api/metrics")
    print("üß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç: http://localhost:{port}/test")
    print("\n–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        server.shutdown()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = 8081
    if len(sys.argv) > 1:
        try:
            port = int(sys.argv[1])
        except ValueError:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8081")
    
    run_ai_integration_server(port)