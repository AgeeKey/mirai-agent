import React, { useState, useEffect } from 'react';
import { AlertTriangle, Power, Shield, CheckCircle, XCircle } from 'lucide-react';
import './KillSwitch.css';

interface EmergencyState {
  trading_stopped: boolean;
  last_stop_time: string | null;
  stop_reason: string | null;
  stopped_by: string | null;
  active_positions_closed: boolean;
}

interface SystemStatus {
  trading_active: boolean;
  ai_active: boolean;
  positions_status: string;
  last_check: string;
}

interface EmergencyStatus {
  emergency_state: EmergencyState;
  system_status: SystemStatus;
}

const KillSwitch: React.FC = () => {
  const [emergencyStatus, setEmergencyStatus] = useState<EmergencyStatus | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [testResults, setTestResults] = useState<any>(null);
  const [logs, setLogs] = useState<string[]>([]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    const fetchStatus = async () => {
      try {
        const response = await fetch('/api/emergency/status');
        const data = await response.json();
        setEmergencyStatus(data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      }
    };

    fetchStatus();
    const interval = setInterval(fetchStatus, 5000);
    return () => clearInterval(interval);
  }, []);

  const handleEmergencyStop = async (reason: string = 'Manual emergency stop') => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/emergency/stop', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ reason, user: 'Web Interface' })
      });

      const result = await response.json();
      
      if (response.ok) {
        alert('üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.');
        setShowConfirmation(false);
      } else {
        alert(`–û—à–∏–±–∫–∞: ${result.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleReset = async () => {
    const confirmation = prompt(
      '–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç —Ç–æ—Ä–≥–æ–≤–ª—é.\n\n–í–≤–µ–¥–∏—Ç–µ "CONFIRM_RESET" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:'
    );

    if (confirmation !== 'CONFIRM_RESET') {
      alert('–°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.');
      return;
    }

    setIsLoading(true);
    try {
      const response = await fetch('/api/emergency/reset', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          confirmation: 'CONFIRM_RESET',
          user: 'Web Interface'
        })
      });

      const result = await response.json();
      
      if (response.ok) {
        alert('‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –¢–æ—Ä–≥–æ–≤–ª—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.');
      } else {
        alert(`–û—à–∏–±–∫–∞: ${result.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è');
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  };

  const runSystemTest = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/emergency/test', { method: 'POST' });
      const results = await response.json();
      setTestResults(results);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchLogs = async () => {
    try {
      const response = await fetch('/api/emergency/logs?lines=20');
      const data = await response.json();
      setLogs(data.logs || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤:', error);
    }
  };

  if (!emergencyStatus) {
    return (
      <div className="kill-switch-container loading">
        <div className="loading-spinner">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</div>
      </div>
    );
  }

  const isEmergencyStopped = emergencyStatus.emergency_state.trading_stopped;

  return (
    <div className="kill-switch-container">
      <div className="kill-switch-header">
        <h2>
          <Shield className="icon" />
          –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        </h2>
        <div className={`status-indicator ${isEmergencyStopped ? 'stopped' : 'active'}`}>
          {isEmergencyStopped ? (
            <>
              <XCircle className="icon" />
              –¢–û–†–ì–û–í–õ–Ø –û–°–¢–ê–ù–û–í–õ–ï–ù–ê
            </>
          ) : (
            <>
              <CheckCircle className="icon" />
              –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ù–ê
            </>
          )}
        </div>
      </div>

      <div className="status-grid">
        <div className="status-card">
          <h3>ü§ñ AI Orchestrator</h3>
          <div className={`status ${emergencyStatus.system_status.ai_active ? 'active' : 'inactive'}`}>
            {emergencyStatus.system_status.ai_active ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
          </div>
        </div>

        <div className="status-card">
          <h3>üìà –¢–æ—Ä–≥–æ–≤–ª—è</h3>
          <div className={`status ${emergencyStatus.system_status.trading_active ? 'active' : 'inactive'}`}>
            {emergencyStatus.system_status.trading_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : 'üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
          </div>
        </div>

        <div className="status-card">
          <h3>üí∞ –ü–æ–∑–∏—Ü–∏–∏</h3>
          <div className={`status ${emergencyStatus.system_status.positions_status === 'active' ? 'active' : 'inactive'}`}>
            {emergencyStatus.system_status.positions_status === 'active' ? 'üìä –û—Ç–∫—Ä—ã—Ç—ã' : 'üí§ –ó–∞–∫—Ä—ã—Ç—ã'}
          </div>
        </div>

        <div className="status-card">
          <h3>‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞</h3>
          <div className="timestamp">
            {new Date(emergencyStatus.system_status.last_check).toLocaleTimeString('ru-RU')}
          </div>
        </div>
      </div>

      {isEmergencyStopped && (
        <div className="emergency-info">
          <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ</h3>
          <div className="info-grid">
            <div><strong>–í—Ä–µ–º—è:</strong> {emergencyStatus.emergency_state.last_stop_time ? 
              new Date(emergencyStatus.emergency_state.last_stop_time).toLocaleString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
            <div><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> {emergencyStatus.emergency_state.stop_reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</div>
            <div><strong>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</strong> {emergencyStatus.emergency_state.stopped_by || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}</div>
          </div>
        </div>
      )}

      <div className="action-buttons">
        {!isEmergencyStopped ? (
          <>
            <button 
              className="emergency-button"
              onClick={() => setShowConfirmation(true)}
              disabled={isLoading}
            >
              <AlertTriangle className="icon" />
              {isLoading ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê'}
            </button>
            
            <button 
              className="test-button"
              onClick={runSystemTest}
              disabled={isLoading}
            >
              üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
            </button>
          </>
        ) : (
          <button 
            className="reset-button"
            onClick={handleReset}
            disabled={isLoading}
          >
            <Power className="icon" />
            {isLoading ? '–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è...' : '–°–ë–†–û–° –ò –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï'}
          </button>
        )}

        <button 
          className="logs-button"
          onClick={fetchLogs}
        >
          üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
        </button>
      </div>

      {showConfirmation && (
        <div className="confirmation-modal">
          <div className="modal-content">
            <h3>‚ö†Ô∏è –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –≠–ö–°–¢–†–ï–ù–ù–û–ô –û–°–¢–ê–ù–û–í–ö–ò</h3>
            <p>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ:</p>
            <ul>
              <li>üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</li>
              <li>üí∞ –ó–∞–∫—Ä–æ–µ—Ç –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏</li>
              <li>ü§ñ –û—Ç–∫–ª—é—á–∏—Ç AI Orchestrator</li>
              <li>üì± –û—Ç–ø—Ä–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
            </ul>
            <p><strong>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?</strong></p>
            
            <div className="modal-buttons">
              <button 
                className="confirm-button"
                onClick={() => handleEmergencyStop()}
                disabled={isLoading}
              >
                ‚úÖ –î–ê, –û–°–¢–ê–ù–û–í–ò–¢–¨
              </button>
              <button 
                className="cancel-button"
                onClick={() => setShowConfirmation(false)}
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          </div>
        </div>
      )}

      {testResults && (
        <div className="test-results">
          <h3>üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
          <div className="test-grid">
            {Object.entries(testResults.tests).map(([test, result]) => (
              <div key={test} className="test-item">
                <strong>{test}:</strong> <span dangerouslySetInnerHTML={{__html: result as string}} />
              </div>
            ))}
          </div>
          <div className={`overall-result ${testResults.overall.includes('‚úÖ') ? 'success' : 'error'}`}>
            {testResults.overall}
          </div>
        </div>
      )}

      {logs.length > 0 && (
        <div className="logs-section">
          <h3>üìã –õ–æ–≥–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</h3>
          <div className="logs-container">
            {logs.map((log, index) => (
              <div key={index} className="log-line">
                {log}
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default KillSwitch;