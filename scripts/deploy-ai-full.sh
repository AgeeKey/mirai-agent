#!/bin/bash

# üöÄ Mirai Agent - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

echo -e "${BOLD}${BLUE}===============================================${NC}"
echo -e "${BOLD}${BLUE}   MIRAI AGENT - –ü–û–õ–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï AI      ${NC}"
echo -e "${BOLD}${BLUE}===============================================${NC}"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –æ—Ç root${NC}"
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
cd /root/mirai-agent

echo -e "${CYAN}üìã –ü–õ–ê–ù –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø${NC}"
echo "----------------------------------------"
echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"
echo "2. –°–æ–∑–¥–∞–Ω–∏–µ backup —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã"
echo "3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ AI –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
echo "4. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SuperAGI –∏ AutoGPT"
echo "5. –°–±–æ—Ä–∫–∞ AI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" 
echo "6. –ó–∞–ø—É—Å–∫ AI —Å–µ—Ä–≤–∏—Å–æ–≤"
echo "7. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"
echo "8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx –∏ SSL"
echo "9. –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
echo "10. –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
echo ""

read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/n): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    exit 0
fi
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
execute_step() {
    local step_name="$1"
    local step_command="$2"
    local required="${3:-true}"
    
    echo -e "${BLUE}üîÑ $step_name${NC}"
    echo "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: $step_command"
    
    if eval "$step_command"; then
        echo -e "${GREEN}‚úÖ $step_name - —É—Å–ø–µ—à–Ω–æ${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $step_name - –æ—à–∏–±–∫–∞${NC}"
        if [ "$required" = "true" ]; then
            echo "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ."
            exit 1
        else
            echo "–ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º."
            return 1
        fi
    fi
}

# ===============================
# –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô
# ===============================
echo -e "${BLUE}1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–• –£–°–õ–û–í–ò–ô${NC}"
echo "========================================"

execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker" "systemctl is-active docker >/dev/null"
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose" "command -v docker-compose >/dev/null || command -v docker compose >/dev/null"
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git" "command -v git >/dev/null"
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Python 3" "command -v python3 >/dev/null"
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ curl" "command -v curl >/dev/null"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ (–º–∏–Ω–∏–º—É–º 5GB)
available_space=$(df / | tail -1 | awk '{print $4}')
if [ $available_space -lt 5242880 ]; then  # 5GB in KB
    echo -e "${RED}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5GB)${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª .env
if [ ! -f ".env" ]; then
    echo -e "${RED}‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    exit 1
fi

if ! grep -q "OPENAI_API_KEY" .env; then
    echo -e "${YELLOW}‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env${NC}"
    echo "–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á OpenAI –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI"
fi

echo ""

# ===============================
# –®–ê–ì 2: BACKUP –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–´
# ===============================
echo -e "${BLUE}2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï BACKUP${NC}"
echo "============================="

BACKUP_DIR="/root/mirai-backup-$(date +%Y%m%d-%H%M%S)"
execute_step "–°–æ–∑–¥–∞–Ω–∏–µ backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏" "mkdir -p $BACKUP_DIR"
execute_step "Backup —Å–æ—Å—Ç–æ—è–Ω–∏—è Docker" "docker ps -a > $BACKUP_DIR/docker-state.txt || true"
execute_step "Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" "cp -r state $BACKUP_DIR/ || true"
execute_step "Backup –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π" "cp -r configs $BACKUP_DIR/ && cp .env $BACKUP_DIR/ || true"
execute_step "Backup –ª–æ–≥–æ–≤" "find logs -name '*.log' -mtime -7 -exec cp {} $BACKUP_DIR/ \; || true"

echo -e "${GREEN}‚úÖ Backup —Å–æ–∑–¥–∞–Ω –≤: $BACKUP_DIR${NC}"
echo ""

# ===============================
# –®–ê–ì 3: –ü–û–î–ì–û–¢–û–í–ö–ê AI –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´
# ===============================
echo -e "${BLUE}3Ô∏è‚É£ –ü–û–î–ì–û–¢–û–í–ö–ê AI –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–´${NC}"
echo "======================================"

execute_step "–°–æ–∑–¥–∞–Ω–∏–µ AI –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π" "mkdir -p microservices/ai-engine/{superagi,autogpt-runner,orchestrator,dashboard} shared/{data,reports,knowledge}"
execute_step "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤" "mkdir -p logs"
execute_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" "chmod -R 755 microservices shared && chown -R root:root microservices shared"

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è AI –≤ .env –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if ! grep -q "AI_ENABLED" .env; then
    echo "AI_ENABLED=false" >> .env
    echo -e "${GREEN}‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è AI_ENABLED${NC}"
fi

if ! grep -q "POSTGRES_PASSWORD" .env; then
    echo "POSTGRES_PASSWORD=mirai123" >> .env
    echo -e "${GREEN}‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è POSTGRES_PASSWORD${NC}"
fi

if ! grep -q "CHROMA_TOKEN" .env; then
    echo "CHROMA_TOKEN=mirai-secret-token" >> .env
    echo -e "${GREEN}‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è CHROMA_TOKEN${NC}"
fi

echo ""

# ===============================
# –®–ê–ì 4: –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í
# ===============================
echo -e "${BLUE}4Ô∏è‚É£ –ö–õ–û–ù–ò–†–û–í–ê–ù–ò–ï AI –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í${NC}"
echo "====================================="

cd microservices/ai-engine

# SuperAGI
if [ ! -d "superagi/.git" ]; then
    execute_step "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SuperAGI" "git clone https://github.com/TransformerOptimus/SuperAGI.git superagi"
else
    echo -e "${GREEN}‚úÖ SuperAGI —É–∂–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω${NC}"
fi

# AutoGPT  
if [ ! -d "autogpt-runner/.git" ]; then
    execute_step "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ AutoGPT" "git clone https://github.com/Significant-Gravitas/AutoGPT.git autogpt-runner"
else
    echo -e "${GREEN}‚úÖ AutoGPT —É–∂–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω${NC}"
fi

cd /root/mirai-agent
echo ""

# ===============================
# –®–ê–ì 5: –°–ë–û–†–ö–ê AI –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
# ===============================
echo -e "${BLUE}5Ô∏è‚É£ –°–ë–û–†–ö–ê AI –ö–û–ù–¢–ï–ô–ù–ï–†–û–í${NC}"
echo "==============================="

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º Orchestrator (–æ–Ω —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π)
execute_step "–°–±–æ—Ä–∫–∞ Orchestrator" "docker build -t mirai-orchestrator microservices/ai-engine/orchestrator/"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è SuperAGI –∏ AutoGPT
echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã AI..."
if docker pull chromadb/chroma:0.4.15 >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ ChromaDB –æ–±—Ä–∞–∑ –∑–∞–≥—Ä—É–∂–µ–Ω${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π ChromaDB –æ–±—Ä–∞–∑–∞${NC}"
fi

echo ""

# ===============================
# –®–ê–ì 6: –ó–ê–ü–£–°–ö AI –°–ï–†–í–ò–°–û–í
# ===============================
echo -e "${BLUE}6Ô∏è‚É£ –ó–ê–ü–£–°–ö AI –°–ï–†–í–ò–°–û–í${NC}"
echo "============================"

# –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã (PostgreSQL, Redis, ChromaDB)
echo "–ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ AI —Å–µ—Ä–≤–∏—Å—ã..."
execute_step "–ó–∞–ø—É—Å–∫ PostgreSQL –¥–ª—è AI" "docker-compose -f infra/docker-compose.ai.yml up -d postgres-ai"
execute_step "–ó–∞–ø—É—Å–∫ Redis –¥–ª—è AI" "docker-compose -f infra/docker-compose.ai.yml up -d redis-ai"
execute_step "–ó–∞–ø—É—Å–∫ ChromaDB" "docker-compose -f infra/docker-compose.ai.yml up -d chromadb"

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫)..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL" "docker-compose -f infra/docker-compose.ai.yml exec -T postgres-ai pg_isready -U mirai" "false"
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis" "docker-compose -f infra/docker-compose.ai.yml exec -T redis-ai redis-cli ping | grep -q PONG" "false"
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ ChromaDB" "curl -f -s http://localhost:8000/api/v1/heartbeat >/dev/null" "false"

# –ó–∞–ø—É—Å–∫–∞–µ–º Orchestrator
echo "–ó–∞–ø—É—Å–∫–∞–µ–º Orchestrator..."
execute_step "–ó–∞–ø—É—Å–∫ Orchestrator" "docker-compose -f infra/docker-compose.ai.yml up -d orchestrator"

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Orchestrator
echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Orchestrator (15 —Å–µ–∫)..."
sleep 15
execute_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Orchestrator" "curl -f -s http://localhost:8080/health >/dev/null"

echo ""

# ===============================
# –®–ê–ì 7: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–û–ô
# ===============================
echo -e "${BLUE}7Ô∏è‚É£ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–û–ô${NC}"
echo "====================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
if curl -f -s http://localhost:8001/health >/dev/null; then
    echo -e "${GREEN}‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º AI endpoint –≤ API (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API
    
else
    echo -e "${YELLOW}‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º${NC}"
    execute_step "–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API" "docker-compose -f infra/docker-compose.yml up -d api" "false"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend
if curl -f -s http://localhost:3000 >/dev/null; then
    echo -e "${GREEN}‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Frontend –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º${NC}"
    execute_step "–ó–∞–ø—É—Å–∫ Frontend" "docker-compose -f infra/docker-compose.yml up -d web" "false"
fi

echo ""

# ===============================
# –®–ê–ì 8: –ù–ê–°–¢–†–û–ô–ö–ê NGINX –ò SSL
# ===============================
echo -e "${BLUE}8Ô∏è‚É£ –ù–ê–°–¢–†–û–ô–ö–ê NGINX –ò SSL${NC}"
echo "==============================="

if command -v nginx >/dev/null; then
    echo "Nginx –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    execute_step "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Nginx" "cp nginx/*.conf /etc/nginx/sites-available/ || true" "false"
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ SSL –ø–æ–∫–∞)
    echo "–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–µ–∑ SSL..."
    
    # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    cat > /tmp/mirai-simple.conf << 'EOF'
server {
    listen 80;
    server_name _;
    
    location /health {
        return 200 "Mirai AI System Ready";
        add_header Content-Type text/plain;
    }
    
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
    }
    
    location /api/ {
        proxy_pass http://127.0.0.1:8001/;
        proxy_set_header Host $host;
    }
    
    location /orchestrator/ {
        proxy_pass http://127.0.0.1:8080/;
        proxy_set_header Host $host;
    }
}
EOF
    
    execute_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx" "cp /tmp/mirai-simple.conf /etc/nginx/sites-available/ && ln -sf /etc/nginx/sites-available/mirai-simple.conf /etc/nginx/sites-enabled/" "false"
    execute_step "–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx" "nginx -t" "false"
    execute_step "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Nginx" "systemctl reload nginx" "false"
    
else
    echo -e "${YELLOW}‚ö†Ô∏è Nginx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É${NC}"
fi

echo ""

# ===============================
# –®–ê–ì 9: –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
# ===============================
echo -e "${BLUE}9Ô∏è‚É£ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï${NC}"
echo "================================="

echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (30 —Å–µ–∫)..."
sleep 30

echo "–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
if [ -f "scripts/test-ai-integration.sh" ]; then
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    if ./scripts/test-ai-integration.sh; then
        echo -e "${GREEN}‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
fi

echo ""

# ===============================
# –®–ê–ì 10: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ===============================
echo -e "${BLUE}üîü –§–ò–ù–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø${NC}"
echo "==============================="

# –í–∫–ª—é—á–∞–µ–º AI –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
echo "–í–∫–ª—é—á–∞–µ–º AI –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
sed -i 's/AI_ENABLED=false/AI_ENABLED=true/' .env
echo -e "${GREEN}‚úÖ AI –≤–∫–ª—é—á–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ${NC}"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
cat > scripts/start-ai-system.sh << 'EOF'
#!/bin/bash
echo "–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π AI —Å–∏—Å—Ç–µ–º—ã Mirai..."

# –ó–∞–ø—É—Å–∫–∞–µ–º AI —Å–µ—Ä–≤–∏—Å—ã
docker-compose -f infra/docker-compose.ai.yml up -d

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
sleep 30

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å AI –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
docker-compose -f infra/docker-compose.yml up -d

echo "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å:"
echo "  - Frontend: http://localhost:3000"
echo "  - API: http://localhost:8001/health"
echo "  - AI Orchestrator: http://localhost:8080/health"
echo "  - ChromaDB: http://localhost:8000/api/v1/heartbeat"
EOF

chmod +x scripts/start-ai-system.sh
echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã${NC}"

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
cat > scripts/stop-ai-system.sh << 'EOF'
#!/bin/bash
echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã Mirai..."

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã
docker-compose -f infra/docker-compose.ai.yml down

echo "AI —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
EOF

chmod +x scripts/stop-ai-system.sh
echo -e "${GREEN}‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã${NC}"

echo ""

# ===============================
# –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
# ===============================
echo -e "${BOLD}${GREEN}üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!${NC}"
echo "=============================================="
echo ""

echo -e "${CYAN}üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï${NC}"
echo ""

echo -e "${BOLD}–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
echo "  üåê Frontend: http://localhost:3000"
echo "  üì° API: http://localhost:8001"
echo "  ü§ñ AI Orchestrator: http://localhost:8080"
echo "  üíæ ChromaDB: http://localhost:8000"
echo "  üóÑÔ∏è PostgreSQL: localhost:5433"
echo "  üî¥ Redis: localhost:6380"
echo ""

echo -e "${BOLD}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:${NC}"
echo "  ‚Ä¢ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: ./scripts/start-ai-system.sh"
echo "  ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI: ./scripts/stop-ai-system.sh"
echo "  ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ./scripts/test-ai-integration.sh"
echo "  ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: docker-compose -f infra/docker-compose.ai.yml logs -f"
echo ""

echo -e "${BOLD}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
echo "  ‚Ä¢ AI –≤–∫–ª—é—á–µ–Ω: AI_ENABLED=true"
echo "  ‚Ä¢ Backup —Å–æ–∑–¥–∞–Ω: $BACKUP_DIR"
echo "  ‚Ä¢ –õ–æ–≥–∏: /root/mirai-agent/logs/"
echo "  ‚Ä¢ Shared –¥–∞–Ω–Ω—ã–µ: /root/mirai-agent/shared/"
echo ""

echo -e "${BOLD}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: curl http://localhost:8080/health"
echo "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω—ã: ./scripts/setup-nginx-ssl.sh (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
echo "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É:"
echo "   curl -X POST http://localhost:8080/task/submit \\"
echo "        -H 'Content-Type: application/json' \\"
echo "        -d '{\"type\":\"analysis\",\"goal\":\"Test Mirai AI\"}'"
echo "4. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"
echo ""

echo -e "${YELLOW}‚ö†Ô∏è –í–ê–ñ–ù–û:${NC}"
echo "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π OPENAI_API_KEY"
echo "‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
echo "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π—Ç–µ backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
echo "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤"
echo ""

echo -e "${BOLD}${BLUE}===============================================${NC}"
echo -e "${BOLD}${BLUE}      MIRAI AI AGENT –ì–û–¢–û–í –ö –¢–û–†–ì–û–í–õ–ï!        ${NC}"
echo -e "${BOLD}${BLUE}===============================================${NC}"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(mirai|infra)" || echo "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Mirai –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

echo ""
echo "–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "  watch -n 5 'docker ps --format \"table {{.Names}}\\t{{.Status}}\" | grep mirai'"