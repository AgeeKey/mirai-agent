import React from 'react';
import {
  StyleSheet,
  Text,
  View,
  ScrollView,
  TouchableOpacity,
  Switch,
  Alert,
  SafeAreaView,
} from 'react-native';
import { useNotifications, NotificationSettings } from '../hooks/useNotifications';

interface NotificationSettingsScreenProps {
  onBack: () => void;
}

export default function NotificationSettingsScreen({ onBack }: NotificationSettingsScreenProps) {
  const {
    isInitialized,
    permissionGranted,
    expoPushToken,
    notificationCount,
    settings,
    updateSettings,
    clearAllNotifications,
    resetBadgeCount,
    checkPermissions,
    reinitialize,
    sendTradingSignal,
    sendPortfolioUpdate,
    sendSystemAlert,
  } = useNotifications();

  const handleToggleSetting = (key: keyof NotificationSettings, value: boolean) => {
    updateSettings({ [key]: value });
  };

  const handleTestTradingSignal = async () => {
    if (!permissionGranted) {
      Alert.alert('–û—à–∏–±–∫–∞', '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      return;
    }

    await sendTradingSignal({
      symbol: 'BTC/USDT',
      type: 'BUY',
      confidence: 0.87,
      price: 45250.00,
      strategy: 'AI Trend Following'
    });

    Alert.alert('–¢–µ—Å—Ç', '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–º —Å–∏–≥–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  };

  const handleTestPortfolioUpdate = async () => {
    if (!permissionGranted) {
      Alert.alert('–û—à–∏–±–∫–∞', '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      return;
    }

    await sendPortfolioUpdate({
      totalValue: 125840.50,
      dailyPnl: 2384.20,
      changePercent: 1.95
    });

    Alert.alert('–¢–µ—Å—Ç', '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  };

  const handleTestSystemAlert = async () => {
    if (!permissionGranted) {
      Alert.alert('–û—à–∏–±–∫–∞', '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
      return;
    }

    await sendSystemAlert(
      '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
    );

    Alert.alert('–¢–µ—Å—Ç', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  };

  const handleClearAllNotifications = () => {
    Alert.alert(
      '–û—á–∏—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–û—á–∏—Å—Ç–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            await clearAllNotifications();
            Alert.alert('–ì–æ—Ç–æ–≤–æ', '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
          }
        }
      ]
    );
  };

  const handleRequestPermissions = async () => {
    const granted = await checkPermissions();
    if (granted) {
      await reinitialize();
      Alert.alert('–£—Å–ø–µ—Ö', '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã');
    } else {
      Alert.alert(
        '–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã',
        '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
      );
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity onPress={onBack} style={styles.backButton}>
          <Text style={styles.backButtonText}>‚Üê –ù–∞–∑–∞–¥</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
        <View style={styles.placeholder} />
      </View>

      <ScrollView style={styles.content}>
        {/* –°—Ç–∞—Ç—É—Å */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üì± –°—Ç–∞—Ç—É—Å</Text>
          
          <View style={styles.statusCard}>
            <View style={styles.statusRow}>
              <Text style={styles.statusLabel}>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã</Text>
              <View style={[styles.statusIndicator, { backgroundColor: isInitialized ? '#10B981' : '#EF4444' }]} />
            </View>
            
            <View style={styles.statusRow}>
              <Text style={styles.statusLabel}>–†–∞–∑—Ä–µ—à–µ–Ω–∏—è</Text>
              <View style={[styles.statusIndicator, { backgroundColor: permissionGranted ? '#10B981' : '#EF4444' }]} />
            </View>
            
            <View style={styles.statusRow}>
              <Text style={styles.statusLabel}>–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö</Text>
              <View style={styles.badgeCount}>
                <Text style={styles.badgeText}>{notificationCount}</Text>
              </View>
            </View>
          </View>

          {!permissionGranted && (
            <TouchableOpacity style={styles.permissionButton} onPress={handleRequestPermissions}>
              <Text style={styles.permissionButtonText}>üîî –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</Text>
            </TouchableOpacity>
          )}
        </View>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</Text>
          
          <View style={styles.settingsCard}>
            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>ü§ñ –¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã</Text>
                <Text style={styles.settingDescription}>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö AI —Å–∏–≥–Ω–∞–ª–∞—Ö</Text>
              </View>
              <Switch
                value={settings.tradingSignals}
                onValueChange={(value) => handleToggleSetting('tradingSignals', value)}
                trackColor={{ false: '#374151', true: '#60A5FA' }}
                thumbColor={settings.tradingSignals ? '#FFFFFF' : '#9CA3AF'}
              />
            </View>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è</Text>
                <Text style={styles.settingDescription}>–ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ P&L</Text>
              </View>
              <Switch
                value={settings.portfolioUpdates}
                onValueChange={(value) => handleToggleSetting('portfolioUpdates', value)}
                trackColor={{ false: '#374151', true: '#60A5FA' }}
                thumbColor={settings.portfolioUpdates ? '#FFFFFF' : '#9CA3AF'}
              />
            </View>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
                <Text style={styles.settingDescription}>–í–∞–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</Text>
              </View>
              <Switch
                value={settings.systemAlerts}
                onValueChange={(value) => handleToggleSetting('systemAlerts', value)}
                trackColor={{ false: '#374151', true: '#60A5FA' }}
                thumbColor={settings.systemAlerts ? '#FFFFFF' : '#9CA3AF'}
              />
            </View>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</Text>
                <Text style={styles.settingDescription}>–û—Ç—á–µ—Ç—ã –≤ 20:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</Text>
              </View>
              <Switch
                value={settings.dailyReports}
                onValueChange={(value) => handleToggleSetting('dailyReports', value)}
                trackColor={{ false: '#374151', true: '#60A5FA' }}
                thumbColor={settings.dailyReports ? '#FFFFFF' : '#9CA3AF'}
              />
            </View>
          </View>
        </View>

        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞ –∏ –≤–∏–±—Ä–∞—Ü–∏–∏ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üîä –ó–≤—É–∫ –∏ –≤–∏–±—Ä–∞—Ü–∏—è</Text>
          
          <View style={styles.settingsCard}>
            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>üîî –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
                <Text style={styles.settingDescription}>–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫</Text>
              </View>
              <Switch
                value={settings.soundEnabled}
                onValueChange={(value) => handleToggleSetting('soundEnabled', value)}
                trackColor={{ false: '#374151', true: '#60A5FA' }}
                thumbColor={settings.soundEnabled ? '#FFFFFF' : '#9CA3AF'}
              />
            </View>

            <View style={styles.settingRow}>
              <View style={styles.settingInfo}>
                <Text style={styles.settingLabel}>üì≥ –í–∏–±—Ä–∞—Ü–∏—è</Text>
                <Text style={styles.settingDescription}>–í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö</Text>
              </View>
              <Switch
                value={settings.vibrationEnabled}
                onValueChange={(value) => handleToggleSetting('vibrationEnabled', value)}
                trackColor={{ false: '#374151', true: '#60A5FA' }}
                thumbColor={settings.vibrationEnabled ? '#FFFFFF' : '#9CA3AF'}
              />
            </View>
          </View>
        </View>

        {/* –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
        {permissionGranted && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</Text>
            
            <View style={styles.testButtons}>
              <TouchableOpacity style={styles.testButton} onPress={handleTestTradingSignal}>
                <Text style={styles.testButtonText}>ü§ñ –¢–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞</Text>
              </TouchableOpacity>
              
              <TouchableOpacity style={styles.testButton} onPress={handleTestPortfolioUpdate}>
                <Text style={styles.testButtonText}>üí∞ –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è</Text>
              </TouchableOpacity>
              
              <TouchableOpacity style={styles.testButton} onPress={handleTestSystemAlert}>
                <Text style={styles.testButtonText}>‚ö†Ô∏è –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</Text>
          
          <View style={styles.actionButtons}>
            <TouchableOpacity style={styles.actionButton} onPress={resetBadgeCount}>
              <Text style={styles.actionButtonText}>üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫</Text>
            </TouchableOpacity>
            
            <TouchableOpacity style={[styles.actionButton, styles.destructiveButton]} onPress={handleClearAllNotifications}>
              <Text style={[styles.actionButtonText, styles.destructiveButtonText]}>üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ</Text>
            </TouchableOpacity>
          </View>
        </View>

        {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        {expoPushToken && (
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Text>
            
            <View style={styles.techInfo}>
              <Text style={styles.techLabel}>Expo Push Token:</Text>
              <Text style={styles.techValue} numberOfLines={3} ellipsizeMode="middle">
                {expoPushToken}
              </Text>
            </View>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1F2937',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#374151',
  },
  backButton: {
    padding: 5,
  },
  backButtonText: {
    color: '#60A5FA',
    fontSize: 16,
    fontWeight: '600',
  },
  headerTitle: {
    color: 'white',
    fontSize: 20,
    fontWeight: 'bold',
  },
  placeholder: {
    width: 60,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  section: {
    marginVertical: 15,
  },
  sectionTitle: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  statusCard: {
    backgroundColor: '#374151',
    borderRadius: 12,
    padding: 15,
  },
  statusRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
  },
  statusLabel: {
    color: '#9CA3AF',
    fontSize: 16,
  },
  statusIndicator: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  badgeCount: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    minWidth: 24,
    alignItems: 'center',
  },
  badgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  permissionButton: {
    backgroundColor: '#60A5FA',
    borderRadius: 12,
    padding: 15,
    alignItems: 'center',
    marginTop: 10,
  },
  permissionButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  settingsCard: {
    backgroundColor: '#374151',
    borderRadius: 12,
    padding: 15,
  },
  settingRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#4B5563',
  },
  settingInfo: {
    flex: 1,
    marginRight: 15,
  },
  settingLabel: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  settingDescription: {
    color: '#9CA3AF',
    fontSize: 14,
    marginTop: 2,
  },
  testButtons: {
    gap: 10,
  },
  testButton: {
    backgroundColor: '#4B5563',
    borderRadius: 12,
    padding: 15,
    alignItems: 'center',
  },
  testButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  actionButtons: {
    gap: 10,
  },
  actionButton: {
    backgroundColor: '#4B5563',
    borderRadius: 12,
    padding: 15,
    alignItems: 'center',
  },
  actionButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  destructiveButton: {
    backgroundColor: '#EF4444',
  },
  destructiveButtonText: {
    color: 'white',
  },
  techInfo: {
    backgroundColor: '#374151',
    borderRadius: 12,
    padding: 15,
  },
  techLabel: {
    color: '#9CA3AF',
    fontSize: 14,
    marginBottom: 5,
  },
  techValue: {
    color: 'white',
    fontSize: 12,
    fontFamily: 'monospace',
  },
});