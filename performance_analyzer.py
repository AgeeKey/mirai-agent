#!/usr/bin/env python3
"""
Mirai Advanced Performance Analyzer
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Mirai
"""

import asyncio
import json
import time
import requests
import psutil
import subprocess
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
import logging

class MiraiPerformanceAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã Mirai"""
    
    def __init__(self):
        self.metrics = {}
        self.recommendations = []
        self.issues = []
        self.logger = self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(level=logging.INFO)
        return logging.getLogger('MiraiAnalyzer')
    
    async def analyze_system_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        # CPU –∞–Ω–∞–ª–∏–∑
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_count = psutil.cpu_count()
        cpu_freq = psutil.cpu_freq()
        
        self.metrics['cpu'] = {
            'usage_percent': cpu_percent,
            'cores': cpu_count,
            'frequency': cpu_freq.current if cpu_freq else 0,
            'load_average': psutil.getloadavg() if hasattr(psutil, 'getloadavg') else [0, 0, 0]
        }
        
        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        swap = psutil.swap_memory()
        
        self.metrics['memory'] = {
            'total_gb': memory.total / (1024**3),
            'used_gb': memory.used / (1024**3),
            'available_gb': memory.available / (1024**3),
            'percent': memory.percent,
            'swap_percent': swap.percent
        }
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('/')
        disk_io = psutil.disk_io_counters()
        
        self.metrics['disk'] = {
            'total_gb': disk.total / (1024**3),
            'used_gb': disk.used / (1024**3),
            'free_gb': disk.free / (1024**3),
            'percent': (disk.used / disk.total) * 100,
            'read_mb': disk_io.read_bytes / (1024**2) if disk_io else 0,
            'write_mb': disk_io.write_bytes / (1024**2) if disk_io else 0
        }
        
        # –°–µ—Ç—å
        net_io = psutil.net_io_counters()
        connections = len(psutil.net_connections())
        
        self.metrics['network'] = {
            'bytes_sent_mb': net_io.bytes_sent / (1024**2),
            'bytes_recv_mb': net_io.bytes_recv / (1024**2),
            'packets_sent': net_io.packets_sent,
            'packets_recv': net_io.packets_recv,
            'connections': connections
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ
        if cpu_percent > 80:
            self.issues.append("–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU")
            self.recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
        if memory.percent > 85:
            self.issues.append("–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
            self.recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö")
            
        if (disk.used / disk.total) * 100 > 90:
            self.issues.append("–ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
            self.recommendations.append("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    
    async def analyze_api_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
        self.logger.info("üîó –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API...")
        
        apis = [
            {'name': 'Trading API', 'url': 'http://localhost:8001/health'},
            {'name': 'Services API', 'url': 'http://localhost:8002/health'},
            {'name': 'Web Interface', 'url': 'http://localhost:3001'}
        ]
        
        api_metrics = {}
        
        for api in apis:
            try:
                start_time = time.time()
                response = requests.get(api['url'], timeout=10)
                response_time = (time.time() - start_time) * 1000  # –º—Å
                
                api_metrics[api['name']] = {
                    'status': 'online' if response.status_code == 200 else 'error',
                    'response_time_ms': response_time,
                    'status_code': response.status_code
                }
                
                if response_time > 1000:  # > 1 —Å–µ–∫—É–Ω–¥—ã
                    self.issues.append(f"{api['name']} –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    self.recommendations.append(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å {api['name']} –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
                    
            except Exception as e:
                api_metrics[api['name']] = {
                    'status': 'offline',
                    'error': str(e)
                }
                self.issues.append(f"{api['name']} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self.recommendations.append(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å {api['name']}")
        
        self.metrics['apis'] = api_metrics
    
    async def analyze_database_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info("üóÑÔ∏è –ê–Ω–∞–ª–∏–∑ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        
        db_metrics = {}
        
        # SQLite –∞–Ω–∞–ª–∏–∑
        sqlite_path = '/root/mirai-agent/state/mirai.db'
        if Path(sqlite_path).exists():
            try:
                stat = Path(sqlite_path).stat()
                db_metrics['sqlite'] = {
                    'size_mb': stat.st_size / (1024**2),
                    'modified': datetime.fromtimestamp(stat.st_mtime).isoformat()
                }
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
                conn = sqlite3.connect(sqlite_path)
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = cursor.fetchall()
                
                table_info = {}
                for table in tables:
                    table_name = table[0]
                    cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                    count = cursor.fetchone()[0]
                    table_info[table_name] = count
                
                db_metrics['sqlite']['tables'] = table_info
                conn.close()
                
                if stat.st_size > 100 * 1024 * 1024:  # > 100MB
                    self.recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å SQLite –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                db_metrics['sqlite'] = {'error': str(e)}
        
        self.metrics['databases'] = db_metrics
    
    async def analyze_docker_performance(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        self.logger.info("üê≥ –ê–Ω–∞–ª–∏–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            result = subprocess.run(
                ['docker', 'stats', '--no-stream', '--format', 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}'],
                capture_output=True, text=True
            )
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                containers = {}
                
                for line in lines:
                    if line.strip():
                        parts = line.split('\t')
                        if len(parts) >= 5:
                            name = parts[0]
                            cpu = parts[1]
                            memory = parts[2]
                            network = parts[3]
                            block_io = parts[4]
                            
                            containers[name] = {
                                'cpu_percent': cpu,
                                'memory_usage': memory,
                                'network_io': network,
                                'block_io': block_io
                            }
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
                            cpu_val = float(cpu.replace('%', '')) if '%' in cpu else 0
                            if cpu_val > 50:
                                self.issues.append(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–≥–æ CPU")
                
                self.metrics['docker'] = containers
                
        except Exception as e:
            self.metrics['docker'] = {'error': str(e)}
    
    async def analyze_autonomous_system(self):
        """–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("ü§ñ –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        autonomous_metrics = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        log_path = '/root/mirai-agent/logs/autonomous.log'
        if Path(log_path).exists():
            try:
                with open(log_path, 'r') as f:
                    lines = f.readlines()
                
                recent_lines = lines[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                
                error_count = sum(1 for line in recent_lines if 'ERROR' in line)
                warning_count = sum(1 for line in recent_lines if 'WARNING' in line)
                task_completed = sum(1 for line in recent_lines if '–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' in line)
                task_failed = sum(1 for line in recent_lines if '–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞' in line)
                
                autonomous_metrics = {
                    'recent_errors': error_count,
                    'recent_warnings': warning_count,
                    'tasks_completed': task_completed,
                    'tasks_failed': task_failed,
                    'log_size_mb': Path(log_path).stat().st_size / (1024**2)
                }
                
                if error_count > 5:
                    self.issues.append("–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
                    self.recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ")
                
            except Exception as e:
                autonomous_metrics = {'error': str(e)}
        
        self.metrics['autonomous_system'] = autonomous_metrics
    
    def calculate_performance_score(self):
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        score = 100
        
        # –í—ã—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
        if self.metrics.get('cpu', {}).get('usage_percent', 0) > 80:
            score -= 20
        elif self.metrics.get('cpu', {}).get('usage_percent', 0) > 60:
            score -= 10
            
        if self.metrics.get('memory', {}).get('percent', 0) > 85:
            score -= 20
        elif self.metrics.get('memory', {}).get('percent', 0) > 70:
            score -= 10
            
        if self.metrics.get('disk', {}).get('percent', 0) > 90:
            score -= 15
        elif self.metrics.get('disk', {}).get('percent', 0) > 80:
            score -= 5
            
        # –ó–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É
        score -= len(self.issues) * 5
        
        return max(0, min(100, score))
    
    def generate_optimization_plan(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        plan = []
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if self.metrics.get('memory', {}).get('percent', 0) > 70:
            plan.append({
                'priority': 'high',
                'action': 'memory_optimization',
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏',
                'commands': [
                    'docker system prune -f',
                    'sync && echo 3 > /proc/sys/vm/drop_caches'
                ]
            })
        
        if self.metrics.get('disk', {}).get('percent', 0) > 80:
            plan.append({
                'priority': 'high',
                'action': 'disk_cleanup',
                'description': '–û—á–∏—Å—Ç–∫–∞ –¥–∏—Å–∫–∞',
                'commands': [
                    '/root/mirai-agent/scripts/cleanup-disk.sh'
                ]
            })
        
        # API –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        slow_apis = [name for name, data in self.metrics.get('apis', {}).items() 
                    if data.get('response_time_ms', 0) > 500]
        
        if slow_apis:
            plan.append({
                'priority': 'medium',
                'action': 'api_optimization',
                'description': f'–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö API: {", ".join(slow_apis)}',
                'commands': [
                    'systemctl reload nginx',
                    '/root/mirai-agent/scripts/optimize-performance.sh'
                ]
            })
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if self.metrics.get('databases', {}).get('sqlite', {}).get('size_mb', 0) > 100:
            plan.append({
                'priority': 'medium',
                'action': 'database_optimization',
                'description': '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                'commands': [
                    'sqlite3 /root/mirai-agent/state/mirai.db "VACUUM;"',
                    'sqlite3 /root/mirai-agent/state/mirai.db "REINDEX;"'
                ]
            })
        
        return plan
    
    async def create_report(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        await self.analyze_system_performance()
        await self.analyze_api_performance()
        await self.analyze_database_performance()
        await self.analyze_docker_performance()
        await self.analyze_autonomous_system()
        
        score = self.calculate_performance_score()
        optimization_plan = self.generate_optimization_plan()
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'performance_score': score,
            'metrics': self.metrics,
            'issues': self.issues,
            'recommendations': self.recommendations,
            'optimization_plan': optimization_plan,
            'summary': {
                'total_issues': len(self.issues),
                'critical_issues': len([i for i in self.issues if '–≤—ã—Å–æ–∫' in i.lower() or '–º–∞–ª–æ' in i.lower()]),
                'apis_online': len([api for api in self.metrics.get('apis', {}).values() if api.get('status') == 'online']),
                'docker_containers': len(self.metrics.get('docker', {})),
                'system_load': self.metrics.get('cpu', {}).get('load_average', [0])[0]
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = f'/root/mirai-agent/reports/performance_analysis_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        Path('/root/mirai-agent/reports').mkdir(exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        self.logger.info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print(f"\nüéØ –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: {score}/100")
        print(f"üìä –í—ã—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(self.issues)}")
        print(f"üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(self.recommendations)}")
        print(f"‚ö° –ü–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(optimization_plan)} –¥–µ–π—Å—Ç–≤–∏–π")
        
        if self.issues:
            print("\n‚ö†Ô∏è –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in self.issues[:5]:
                print(f"  ‚Ä¢ {issue}")
        
        if optimization_plan:
            print("\nüöÄ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
            for action in optimization_plan[:3]:
                print(f"  ‚Ä¢ {action['description']} ({action['priority']})")
        
        return report

async def main():
    analyzer = MiraiPerformanceAnalyzer()
    await analyzer.create_report()

if __name__ == "__main__":
    asyncio.run(main())