#!/bin/bash

# üîç Mirai Agent - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
# –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=======================================${NC}"
echo -e "${BLUE}   MIRAI AGENT - –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´       ${NC}"
echo -e "${BLUE}=======================================${NC}"
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo -e "${BLUE}üìÇ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê${NC}"
echo "----------------------------------------"
for dir in app web microservices infra state logs reports configs scripts; do
    if [ -d "/root/mirai-agent/$dir" ]; then
        size=$(du -sh "/root/mirai-agent/$dir" 2>/dev/null | cut -f1)
        file_count=$(find "/root/mirai-agent/$dir" -type f | wc -l)
        echo -e "  ${GREEN}‚úÖ${NC} $dir (${size}, ${file_count} —Ñ–∞–π–ª–æ–≤)"
    else
        echo -e "  ${RED}‚ùå${NC} $dir (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    fi
done
echo ""

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–æ—Å—Ç–æ—è–Ω–∏—è
echo -e "${BLUE}üê≥ DOCKER –°–û–°–¢–û–Ø–ù–ò–ï${NC}"
echo "----------------------------------------"
if systemctl is-active --quiet docker; then
    echo -e "  ${GREEN}‚úÖ${NC} Docker daemon –∑–∞–ø—É—â–µ–Ω"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    if docker ps -a &>/dev/null; then
        echo ""
        echo "–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -10
    fi
else
    echo -e "  ${RED}‚ùå${NC} Docker daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    docker_status=$(systemctl show docker -p ActiveState --value)
    echo "     –°—Ç–∞—Ç—É—Å: $docker_status"
fi
echo ""

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤
echo -e "${BLUE}üì¶ PYTHON –ü–ê–ö–ï–¢–´${NC}"
echo "----------------------------------------"
for pkg in app/api app/trader app/agent app/telegram_bot; do
    if [ -f "/root/mirai-agent/$pkg/pyproject.toml" ]; then
        echo -e "  ${GREEN}‚úÖ${NC} $pkg"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if grep -q "version" "/root/mirai-agent/$pkg/pyproject.toml"; then
            version=$(grep "version" "/root/mirai-agent/$pkg/pyproject.toml" | head -1 | cut -d'"' -f2)
            echo "     –í–µ—Ä—Å–∏—è: $version"
        fi
    else
        echo -e "  ${RED}‚ùå${NC} $pkg (–Ω–µ—Ç pyproject.toml)"
    fi
done
echo ""

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
echo -e "${BLUE}üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò${NC}"
echo "----------------------------------------"
for config in configs/risk.yaml configs/strategies.yaml configs/logging.yaml .env; do
    if [ -f "/root/mirai-agent/$config" ]; then
        size=$(ls -lh "/root/mirai-agent/$config" | awk '{print $5}')
        echo -e "  ${GREEN}‚úÖ${NC} $config ($size)"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if [[ "$config" == ".env" ]]; then
            echo "     –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
            if grep -q "OPENAI_API_KEY" "/root/mirai-agent/$config"; then
                echo -e "       ${GREEN}‚úÖ${NC} OPENAI_API_KEY"
            else
                echo -e "       ${YELLOW}‚ö†Ô∏è${NC} OPENAI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            fi
            
            if grep -q "BINANCE_API_KEY" "/root/mirai-agent/$config"; then
                echo -e "       ${GREEN}‚úÖ${NC} BINANCE_API_KEY"
            else
                echo -e "       ${YELLOW}‚ö†Ô∏è${NC} BINANCE_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            fi
        fi
    else
        echo -e "  ${RED}‚ùå${NC} $config (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)"
    fi
done
echo ""

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo -e "${BLUE}üíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•${NC}"
echo "----------------------------------------"
if [ -f "/root/mirai-agent/state/mirai.db" ]; then
    size=$(du -h /root/mirai-agent/state/mirai.db | cut -f1)
    echo -e "  ${GREEN}‚úÖ${NC} SQLite database ($size)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    if command -v sqlite3 >/dev/null 2>&1; then
        echo "     –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:"
        sqlite3 /root/mirai-agent/state/mirai.db "
        SELECT 
            'positions' as table_name, 
            COUNT(*) as count
        FROM positions 
        UNION ALL 
        SELECT 
            'orders' as table_name, 
            COUNT(*) as count 
        FROM orders;" 2>/dev/null | while read line; do
            echo "       $line"
        done
    else
        echo -e "       ${YELLOW}‚ö†Ô∏è${NC} sqlite3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü"
    fi
else
    echo -e "  ${RED}‚ùå${NC} Database –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi
echo ""

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
echo -e "${BLUE}üåê –°–ï–¢–ï–í–´–ï –ü–û–†–¢–´${NC}"
echo "----------------------------------------"
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ Mirai:"
ports=("8001:API" "8002:Trader" "8003:Telegram" "3000:Frontend" "8085:SuperAGI" "8090:AutoGPT" "8080:Orchestrator")

for port_info in "${ports[@]}"; do
    port=$(echo $port_info | cut -d: -f1)
    service=$(echo $port_info | cut -d: -f2)
    
    if netstat -tulpn 2>/dev/null | grep -q ":$port "; then
        process=$(netstat -tulpn 2>/dev/null | grep ":$port " | awk '{print $7}' | cut -d/ -f2 | head -1)
        echo -e "  ${GREEN}‚úÖ${NC} $service ($port) - $process"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è${NC} $service ($port) - —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
done
echo ""

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
echo -e "${BLUE}üìú –õ–û–ì–ò${NC}"
echo "----------------------------------------"
if [ -d "/root/mirai-agent/logs" ]; then
    log_files=$(find /root/mirai-agent/logs -name "*.log" -type f | wc -l)
    total_size=$(du -sh /root/mirai-agent/logs 2>/dev/null | cut -f1)
    echo -e "  ${GREEN}‚úÖ${NC} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ ($total_size, $log_files —Ñ–∞–π–ª–æ–≤)"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    if [ $log_files -gt 0 ]; then
        echo "     –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ª–æ–≥-—Ñ–∞–π–ª–∞:"
        find /root/mirai-agent/logs -name "*.log" -type f -printf '%T@ %p\n' | sort -n | tail -3 | while read timestamp filepath; do
            filename=$(basename "$filepath")
            size=$(ls -lh "$filepath" | awk '{print $5}')
            echo "       $filename ($size)"
        done
    fi
else
    echo -e "  ${RED}‚ùå${NC} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi
echo ""

# 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
echo -e "${BLUE}üíΩ –î–ò–°–ö–û–í–û–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û${NC}"
echo "----------------------------------------"
df -h / | grep -v "Filesystem"
echo ""
echo "–†–∞–∑–º–µ—Ä—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:"
du -sh /root/mirai-agent/{app,web,microservices,state,logs} 2>/dev/null | sort -h
echo ""

# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
echo -e "${BLUE}‚öôÔ∏è –°–ò–°–¢–ï–ú–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø${NC}"
echo "----------------------------------------"
echo "RAM:"
free -h | grep "Mem:"
echo ""
echo "CPU:"
nproc
echo ""
echo "Python –≤–µ—Ä—Å–∏—è:"
python3 --version
echo ""

# 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
echo -e "${BLUE}ü§ñ AI-–ì–û–¢–û–í–ù–û–°–¢–¨${NC}"
echo "----------------------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º microservices –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
if [ -d "/root/mirai-agent/microservices" ]; then
    echo -e "  ${GREEN}‚úÖ${NC} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è microservices —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è AI
    if [ -d "/root/mirai-agent/microservices/ai-engine" ]; then
        echo -e "  ${GREEN}‚úÖ${NC} ai-engine –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo -e "  ${YELLOW}‚ö†Ô∏è${NC} ai-engine –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)"
    fi
else
    echo -e "  ${RED}‚ùå${NC} –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è microservices –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
if [ -d "/root/mirai-agent/shared" ]; then
    echo -e "  ${GREEN}‚úÖ${NC} Shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è${NC} Shared –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)"
fi

echo ""

# 11. –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
echo -e "${BLUE}üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò${NC}"
echo "----------------------------------------"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
critical_issues=0

if ! systemctl is-active --quiet docker; then
    echo -e "${RED}üî• –ö–†–ò–¢–ò–ß–ù–û:${NC} Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º AI"
    critical_issues=$((critical_issues + 1))
fi

if [ ! -f "/root/mirai-agent/.env" ]; then
    echo -e "${RED}üî• –ö–†–ò–¢–ò–ß–ù–û:${NC} –§–∞–π–ª .env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    critical_issues=$((critical_issues + 1))
elif ! grep -q "OPENAI_API_KEY" "/root/mirai-agent/.env"; then
    echo -e "${YELLOW}‚ö†Ô∏è –í–ê–ñ–ù–û:${NC} –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π"
fi

if [ ! -f "/root/mirai-agent/state/mirai.db" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –í–ê–ñ–ù–û:${NC} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ (–º–∏–Ω–∏–º—É–º 2GB)
available_space=$(df / | tail -1 | awk '{print $4}')
if [ $available_space -lt 2097152 ]; then  # 2GB in KB
    echo -e "${RED}üî• –ö–†–ò–¢–ò–ß–ù–û:${NC} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2GB)"
    critical_issues=$((critical_issues + 1))
fi

if [ $critical_issues -eq 0 ]; then
    echo -e "${GREEN}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤${NC}"
    echo ""
    echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. ./scripts/backup-before-upgrade.sh"
    echo "2. ./scripts/fix-docker.sh (–µ—Å–ª–∏ Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
    echo "3. ./scripts/phase1-prepare.sh"
else
    echo -e "${RED}‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $critical_issues –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º${NC}"
    echo "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º."
fi

echo ""
echo -e "${BLUE}=======================================${NC}"
echo -e "${BLUE}         –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù              ${NC}"
echo -e "${BLUE}=======================================${NC}"